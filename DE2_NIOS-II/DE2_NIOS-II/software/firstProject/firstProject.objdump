
firstProject.elf:     file format elf32-littlenios2
firstProject.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005bec memsz 0x00005bec flags r-x
    LOAD off    0x00006c0c vaddr 0x00005c0c paddr 0x000077e0 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags rw-
    LOAD off    0x000093b4 vaddr 0x000093b4 paddr 0x000093b4 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005918  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000013c  00005ad0  00005ad0  00006ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd4  00005c0c  000077e0  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  000093b4  000093b4  000093b4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000087e0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  00008808  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ea6  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a1f7  00000000  00000000  00009fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000517a  00000000  00000000  000241bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cdee  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001164  00000000  00000000  00036128  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017fb  00000000  00000000  0003728c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004199  00000000  00000000  00038a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003cc20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003cc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003f6ae  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003f6b1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0003f6b4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0003f6b5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0003f6b9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003f6bd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003f6c1  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003f6ca  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003f6d3  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003f6dc  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001e  00000000  00000000  0003f6e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00005ad0 l    d  .rodata	00000000 .rodata
00005c0c l    d  .rwdata	00000000 .rwdata
000093b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 project_interrupt.c
000093dc l     O .bss	00000018 alarm.2243
00000000 l    df *ABS*	00000000 lib2-divmod.c
000002d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00005c0c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001d94 l     F .text	00000058 std
00001ea0 l     F .text	00000008 __fp_lock
00001ea8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002ff4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003054 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003158 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000327c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000335c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000034bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000036ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000077d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00003b48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000065bc l     O .rwdata	00001060 JTAG_UART
0000761c l     O .rwdata	0000002c Expansion_JP1
00007648 l     O .rwdata	0000002c Expansion_JP2
00007674 l     O .rwdata	0000002c Green_LEDs
000076a0 l     O .rwdata	0000002c HEX3_HEX0
000076cc l     O .rwdata	0000002c HEX7_HEX4
000076f8 l     O .rwdata	0000002c Pushbuttons
00007724 l     O .rwdata	0000002c Red_LEDs
00007750 l     O .rwdata	0000002c Slider_switches
0000777c l     O .rwdata	0000002c Serial_port
00003ca4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003edc l     F .text	0000022c altera_avalon_jtag_uart_irq
00004108 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004784 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004ce8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004ec0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000051d0 l     F .text	000000f8 alt_file_locked
00005454 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000058b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00005a6c l     F .text	00000040 alt_sim_halt
00002c40 g     F .text	00000070 _isatty_r
0000351c g     F .text	0000006c alt_main
0000045c g     F .text	000000a0 _puts_r
0000941c g     O .bss	00000100 alt_irq
00002cb0 g     F .text	00000078 _lseek_r
000077e0 g       *ABS*	00000000 __flash_rwdata_start
000096ac g       *ABS*	00000000 __alt_heap_start
0000287c g     F .text	00000068 __sseek
00001dfc g     F .text	000000a4 __sinit
00001efc g     F .text	0000009c __sfmoreglue
000035a8 g     F .text	00000020 __malloc_unlock
00004ab4 g     F .text	00000090 alt_up_rs232_read_fd
000012e4 g     F .text	000000e0 memmove
00001eec g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002bcc g     F .text	00000074 _fstat_r
000093c0 g     O .bss	00000004 errno
000093c8 g     O .bss	00000004 alt_argv
0000f7a8 g       *ABS*	00000000 _gp
0000643c g     O .rwdata	00000180 alt_fd_list
00004e10 g     F .text	00000094 alt_find_dev
00001244 g     F .text	000000a0 memcpy
00001ee0 g     F .text	0000000c _cleanup_r
00004f98 g     F .text	00000078 alt_io_redirect
00005ad0 g       *ABS*	00000000 __DTOR_END__
00004a40 g     F .text	00000074 alt_up_rs232_read_data
000004fc g     F .text	00000014 puts
000054b4 g     F .text	00000020 altera_nios2_irq_init
00004320 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000414 g     F .text	00000008 __udivsi3
000031b8 g     F .text	000000c4 isatty
000093b4 g     O .bss	00000004 __malloc_top_pad
00000584 g     F .text	0000049c __sfvwrite_r
000019b8 g     F .text	00000070 _sbrk_r
00002d28 g     F .text	00000078 _read_r
000077c8 g     O .rwdata	00000004 alt_max_fd
000049a8 g     F .text	00000050 alt_up_rs232_check_parity
00002aa8 g     F .text	00000110 _fclose_r
00001d60 g     F .text	00000034 fflush
000093b8 g     O .bss	00000004 __malloc_max_sbrked_mem
00005010 g     F .text	000001c0 alt_irq_register
000033c8 g     F .text	000000f4 lseek
000077ac g     O .rwdata	00000004 _global_impure_ptr
000013c4 g     F .text	000005f4 _realloc_r
000096ac g       *ABS*	00000000 __bss_end
00003918 g     F .text	0000010c alt_tick
00001ec8 g     F .text	00000018 __fp_lock_all
00003880 g     F .text	00000098 alt_alarm_stop
000093d8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
00006414 g     O .rwdata	00000028 alt_dev_null
00004c18 g     F .text	0000001c alt_dcache_flush_all
000077e0 g       *ABS*	00000000 __ram_rwdata_end
000077c0 g     O .rwdata	00000008 alt_dev_list
00003a24 g     F .text	00000124 write
00005c0c g       *ABS*	00000000 __ram_rodata_end
00003080 g     F .text	000000d8 fstat
00004b44 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000041c g     F .text	00000008 __umodsi3
000096ac g       *ABS*	00000000 end
00003e24 g     F .text	000000b8 altera_avalon_jtag_uart_init
00005acc g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000047f8 g     F .text	00000088 alt_avalon_timer_sc_init
00004544 g     F .text	00000240 altera_avalon_jtag_uart_write
00001dec g     F .text	00000004 __sfp_lock_acquire
00001160 g     F .text	000000e4 memchr
000021b4 g     F .text	00000314 _free_r
000058bc g     F .text	000001b0 __call_exitprocs
000077b4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
000093d0 g     O .bss	00000004 _alt_tick_rate
000093d4 g     O .bss	00000004 _alt_nticks
000035c8 g     F .text	00000124 read
00003bdc g     F .text	000000c8 alt_sys_init
00005784 g     F .text	00000134 __register_exitproc
00004968 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
000041b8 g     F .text	00000074 altera_avalon_jtag_uart_close
00000424 g     F .text	00000038 __mulsi3
00005c0c g       *ABS*	00000000 __ram_rwdata_start
00005ad0 g       *ABS*	00000000 __ram_rodata_start
000093f4 g     O .bss	00000028 __malloc_current_mallinfo
00003cdc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000055f4 g     F .text	000000d0 alt_get_fd
00002a38 g     F .text	00000070 _close_r
00005710 g     F .text	00000074 memcmp
00003d8c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000096ac g       *ABS*	00000000 __alt_stack_base
00003dd4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001a28 g     F .text	0000013c __swsetup_r
00001f98 g     F .text	000000f0 __sfp
0000600c g     O .rwdata	00000408 __malloc_av_
00001df8 g     F .text	00000004 __sinit_lock_release
0000021c g     F .text	00000058 myinterrupt_handler
00002960 g     F .text	00000060 __sread
000048d4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
000054d4 g     F .text	00000120 alt_find_file
00004c34 g     F .text	000000b4 alt_dev_llist_insert
00003588 g     F .text	00000020 __malloc_lock
000037c4 g     F .text	000000bc sbrk
00001b64 g     F .text	000001fc _fflush_r
000093b4 g       *ABS*	00000000 __bss_start
000027dc g     F .text	00000098 memset
000001f4 g     F .text	00000028 main
000093cc g     O .bss	00000004 alt_envp
000093bc g     O .bss	00000004 __malloc_max_total_mem
00003d34 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00002874 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00002bb8 g     F .text	00000014 fclose
0000951c g     O .bss	00000190 _atexit0
00000a20 g     F .text	00000740 _malloc_r
000077cc g     O .rwdata	00000004 alt_errno
00002590 g     F .text	000000b8 _fwalk
00000354 g     F .text	00000060 __divsi3
00002088 g     F .text	0000012c _malloc_trim_r
00005ad0 g       *ABS*	00000000 __CTOR_END__
00005ad0 g       *ABS*	00000000 __flash_rodata_start
00005ad0 g       *ABS*	00000000 __DTOR_LIST__
00004bd8 g     F .text	00000040 alt_up_rs232_open_dev
00003ba8 g     F .text	00000034 alt_irq_init
0000374c g     F .text	00000078 alt_release_fd
000056c4 g     F .text	00000014 atexit
000029c0 g     F .text	00000078 _write_r
000077a8 g     O .rwdata	00000004 _impure_ptr
000093c4 g     O .bss	00000004 alt_argc
00004dac g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00001eb0 g     F .text	00000018 __fp_unlock_all
000077b8 g     O .rwdata	00000008 alt_fs_list
00004880 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
000049f8 g     F .text	00000048 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000077e0 g       *ABS*	00000000 _edata
000096ac g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000422c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000274 g     F .text	00000064 prototype_os
000028e4 g     F .text	0000007c __swrite
000077b0 g     O .rwdata	00000004 __malloc_trim_threshold
000056d8 g     F .text	00000038 exit
000024c8 g     F .text	000000c8 _fwalk_reent
000003b4 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001df0 g     F .text	00000004 __sfp_lock_release
00005aac g     F .text	00000020 _exit
00002da0 g     F .text	00000154 alt_alarm_start
00002648 g     F .text	00000194 __smakebuf_r
00000510 g     F .text	00000074 strlen
000052c8 g     F .text	0000018c open
08000000 g       *ABS*	00000000 __alt_mem_SRAM
00004ea4 g     F .text	0000001c alt_icache_flush_all
000077dc g     O .rwdata	00000004 alt_priority_mask
000077d4 g     O .rwdata	00000008 alt_alarm_list
00004d48 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
0000492c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00002ef4 g     F .text	00000100 close
000032dc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00001df4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e50704 	addi	r3,r3,-27620
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e50704 	addi	r3,r3,-27620
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6bdea14 	ori	gp,gp,63400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10a4ed14 	ori	r2,r2,37812

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18e5ab14 	ori	r3,r3,38572

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00032dc0 	call	32dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000351c0 	call	351c <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <main>:
alt_u32 myinterrupt_handler(void *);
void prototype_os();

//Main function to call our
//prototype OS
void main(){
     1f4:	defffe04 	addi	sp,sp,-8
     1f8:	dfc00115 	stw	ra,4(sp)
     1fc:	df000015 	stw	fp,0(sp)
     200:	d839883a 	mov	fp,sp
	prototype_os();
     204:	00002740 	call	274 <prototype_os>
	return;	
}
     208:	e037883a 	mov	sp,fp
     20c:	dfc00117 	ldw	ra,4(sp)
     210:	df000017 	ldw	fp,0(sp)
     214:	dec00204 	addi	sp,sp,8
     218:	f800283a 	ret

0000021c <myinterrupt_handler>:
//This function is what happens when
//the timer runs down and an interrupt
//is called
alt_u32 myinterrupt_handler (void * context)
{
     21c:	defffd04 	addi	sp,sp,-12
     220:	dfc00215 	stw	ra,8(sp)
     224:	df000115 	stw	fp,4(sp)
     228:	df000104 	addi	fp,sp,4
     22c:	e13fff15 	stw	r4,-4(fp)
	printf("Interrupted by the timer!\n");
     230:	01000034 	movhi	r4,0
     234:	2116b404 	addi	r4,r4,23248
     238:	00004fc0 	call	4fc <puts>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     23c:	00800074 	movhi	r2,1
     240:	10a4f404 	addi	r2,r2,-27696
     244:	10800017 	ldw	r2,0(r2)
     248:	1009883a 	mov	r4,r2
			//call this again in 5 seconds
	return ALARMTICKS(10); //Using the defined function above
     24c:	01400284 	movi	r5,10
     250:	00004240 	call	424 <__mulsi3>
     254:	1009883a 	mov	r4,r2
     258:	01400284 	movi	r5,10
     25c:	00004140 	call	414 <__udivsi3>
}
     260:	e037883a 	mov	sp,fp
     264:	dfc00117 	ldw	ra,4(sp)
     268:	df000017 	ldw	fp,0(sp)
     26c:	dec00204 	addi	sp,sp,8
     270:	f800283a 	ret

00000274 <prototype_os>:

//This function will set up a timer and then
//have a wait loop.  Every time the timer pops
//it will go to the interrupt handler
void prototype_os()
{
     274:	defffd04 	addi	sp,sp,-12
     278:	dfc00215 	stw	ra,8(sp)
     27c:	df000115 	stw	fp,4(sp)
     280:	df000104 	addi	fp,sp,4
	// Set up the timer with its interrupt handler
	static alt_alarm alarm;
	//Set the timer to be 1 second
	alt_alarm_start(&alarm, 1000, myinterrupt_handler, NULL);
     284:	01000074 	movhi	r4,1
     288:	2124f704 	addi	r4,r4,-27684
     28c:	0140fa04 	movi	r5,1000
     290:	01800034 	movhi	r6,0
     294:	31808704 	addi	r6,r6,540
     298:	000f883a 	mov	r7,zero
     29c:	0002da00 	call	2da0 <alt_alarm_start>

	while (1)
	{
		printf ("This is the prototype os for my exciting CSE351 course projects!\n");
     2a0:	01000034 	movhi	r4,0
     2a4:	2116bb04 	addi	r4,r4,23276
     2a8:	00004fc0 	call	4fc <puts>
		int j=0;
     2ac:	e03fff15 	stw	zero,-4(fp)
		//MAX is the amount of wait time before the next printf above
		for (j = 0 ; j < MAX; j++);
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000306 	br	2c4 <prototype_os+0x50>
     2b8:	e0bfff17 	ldw	r2,-4(fp)
     2bc:	10800044 	addi	r2,r2,1
     2c0:	e0bfff15 	stw	r2,-4(fp)
     2c4:	e0ffff17 	ldw	r3,-4(fp)
     2c8:	00817db4 	movhi	r2,1526
     2cc:	10b83fc4 	addi	r2,r2,-7937
     2d0:	10fff90e 	bge	r2,r3,2b8 <prototype_os+0x44>
	}
     2d4:	003ff206 	br	2a0 <prototype_os+0x2c>

000002d8 <udivmodsi4>:
     2d8:	29001b2e 	bgeu	r5,r4,348 <udivmodsi4+0x70>
     2dc:	28001a16 	blt	r5,zero,348 <udivmodsi4+0x70>
     2e0:	00800044 	movi	r2,1
     2e4:	0007883a 	mov	r3,zero
     2e8:	01c007c4 	movi	r7,31
     2ec:	00000306 	br	2fc <udivmodsi4+0x24>
     2f0:	19c01326 	beq	r3,r7,340 <udivmodsi4+0x68>
     2f4:	18c00044 	addi	r3,r3,1
     2f8:	28000416 	blt	r5,zero,30c <udivmodsi4+0x34>
     2fc:	294b883a 	add	r5,r5,r5
     300:	1085883a 	add	r2,r2,r2
     304:	293ffa36 	bltu	r5,r4,2f0 <udivmodsi4+0x18>
     308:	10000d26 	beq	r2,zero,340 <udivmodsi4+0x68>
     30c:	0007883a 	mov	r3,zero
     310:	21400236 	bltu	r4,r5,31c <udivmodsi4+0x44>
     314:	2149c83a 	sub	r4,r4,r5
     318:	1886b03a 	or	r3,r3,r2
     31c:	1004d07a 	srli	r2,r2,1
     320:	280ad07a 	srli	r5,r5,1
     324:	103ffa1e 	bne	r2,zero,310 <udivmodsi4+0x38>
     328:	30000226 	beq	r6,zero,334 <udivmodsi4+0x5c>
     32c:	2005883a 	mov	r2,r4
     330:	f800283a 	ret
     334:	1809883a 	mov	r4,r3
     338:	2005883a 	mov	r2,r4
     33c:	f800283a 	ret
     340:	0007883a 	mov	r3,zero
     344:	003ff806 	br	328 <udivmodsi4+0x50>
     348:	00800044 	movi	r2,1
     34c:	0007883a 	mov	r3,zero
     350:	003fef06 	br	310 <udivmodsi4+0x38>

00000354 <__divsi3>:
     354:	defffe04 	addi	sp,sp,-8
     358:	dc000015 	stw	r16,0(sp)
     35c:	dfc00115 	stw	ra,4(sp)
     360:	0021883a 	mov	r16,zero
     364:	20000c16 	blt	r4,zero,398 <__divsi3+0x44>
     368:	000d883a 	mov	r6,zero
     36c:	28000e16 	blt	r5,zero,3a8 <__divsi3+0x54>
     370:	00002d80 	call	2d8 <udivmodsi4>
     374:	1007883a 	mov	r3,r2
     378:	8005003a 	cmpeq	r2,r16,zero
     37c:	1000011e 	bne	r2,zero,384 <__divsi3+0x30>
     380:	00c7c83a 	sub	r3,zero,r3
     384:	1805883a 	mov	r2,r3
     388:	dfc00117 	ldw	ra,4(sp)
     38c:	dc000017 	ldw	r16,0(sp)
     390:	dec00204 	addi	sp,sp,8
     394:	f800283a 	ret
     398:	0109c83a 	sub	r4,zero,r4
     39c:	04000044 	movi	r16,1
     3a0:	000d883a 	mov	r6,zero
     3a4:	283ff20e 	bge	r5,zero,370 <__divsi3+0x1c>
     3a8:	014bc83a 	sub	r5,zero,r5
     3ac:	8021003a 	cmpeq	r16,r16,zero
     3b0:	003fef06 	br	370 <__divsi3+0x1c>

000003b4 <__modsi3>:
     3b4:	deffff04 	addi	sp,sp,-4
     3b8:	dfc00015 	stw	ra,0(sp)
     3bc:	01800044 	movi	r6,1
     3c0:	2807883a 	mov	r3,r5
     3c4:	20000416 	blt	r4,zero,3d8 <__modsi3+0x24>
     3c8:	28000c16 	blt	r5,zero,3fc <__modsi3+0x48>
     3cc:	dfc00017 	ldw	ra,0(sp)
     3d0:	dec00104 	addi	sp,sp,4
     3d4:	00002d81 	jmpi	2d8 <udivmodsi4>
     3d8:	0109c83a 	sub	r4,zero,r4
     3dc:	28000b16 	blt	r5,zero,40c <__modsi3+0x58>
     3e0:	180b883a 	mov	r5,r3
     3e4:	01800044 	movi	r6,1
     3e8:	00002d80 	call	2d8 <udivmodsi4>
     3ec:	0085c83a 	sub	r2,zero,r2
     3f0:	dfc00017 	ldw	ra,0(sp)
     3f4:	dec00104 	addi	sp,sp,4
     3f8:	f800283a 	ret
     3fc:	014bc83a 	sub	r5,zero,r5
     400:	dfc00017 	ldw	ra,0(sp)
     404:	dec00104 	addi	sp,sp,4
     408:	00002d81 	jmpi	2d8 <udivmodsi4>
     40c:	0147c83a 	sub	r3,zero,r5
     410:	003ff306 	br	3e0 <__modsi3+0x2c>

00000414 <__udivsi3>:
     414:	000d883a 	mov	r6,zero
     418:	00002d81 	jmpi	2d8 <udivmodsi4>

0000041c <__umodsi3>:
     41c:	01800044 	movi	r6,1
     420:	00002d81 	jmpi	2d8 <udivmodsi4>

00000424 <__mulsi3>:
     424:	20000a26 	beq	r4,zero,450 <__mulsi3+0x2c>
     428:	0007883a 	mov	r3,zero
     42c:	2080004c 	andi	r2,r4,1
     430:	1005003a 	cmpeq	r2,r2,zero
     434:	2008d07a 	srli	r4,r4,1
     438:	1000011e 	bne	r2,zero,440 <__mulsi3+0x1c>
     43c:	1947883a 	add	r3,r3,r5
     440:	294b883a 	add	r5,r5,r5
     444:	203ff91e 	bne	r4,zero,42c <__mulsi3+0x8>
     448:	1805883a 	mov	r2,r3
     44c:	f800283a 	ret
     450:	0007883a 	mov	r3,zero
     454:	1805883a 	mov	r2,r3
     458:	f800283a 	ret

0000045c <_puts_r>:
     45c:	defff604 	addi	sp,sp,-40
     460:	dc400715 	stw	r17,28(sp)
     464:	2023883a 	mov	r17,r4
     468:	2809883a 	mov	r4,r5
     46c:	dfc00915 	stw	ra,36(sp)
     470:	dcc00815 	stw	r19,32(sp)
     474:	2827883a 	mov	r19,r5
     478:	00005100 	call	510 <strlen>
     47c:	89400217 	ldw	r5,8(r17)
     480:	00c00034 	movhi	r3,0
     484:	18d6cc04 	addi	r3,r3,23344
     488:	01c00044 	movi	r7,1
     48c:	12000044 	addi	r8,r2,1
     490:	d8c00515 	stw	r3,20(sp)
     494:	d9c00615 	stw	r7,24(sp)
     498:	d8c00304 	addi	r3,sp,12
     49c:	01c00084 	movi	r7,2
     4a0:	8809883a 	mov	r4,r17
     4a4:	d80d883a 	mov	r6,sp
     4a8:	d8c00015 	stw	r3,0(sp)
     4ac:	dcc00315 	stw	r19,12(sp)
     4b0:	da000215 	stw	r8,8(sp)
     4b4:	d9c00115 	stw	r7,4(sp)
     4b8:	d8800415 	stw	r2,16(sp)
     4bc:	00005840 	call	584 <__sfvwrite_r>
     4c0:	00ffffc4 	movi	r3,-1
     4c4:	10000626 	beq	r2,zero,4e0 <_puts_r+0x84>
     4c8:	1805883a 	mov	r2,r3
     4cc:	dfc00917 	ldw	ra,36(sp)
     4d0:	dcc00817 	ldw	r19,32(sp)
     4d4:	dc400717 	ldw	r17,28(sp)
     4d8:	dec00a04 	addi	sp,sp,40
     4dc:	f800283a 	ret
     4e0:	00c00284 	movi	r3,10
     4e4:	1805883a 	mov	r2,r3
     4e8:	dfc00917 	ldw	ra,36(sp)
     4ec:	dcc00817 	ldw	r19,32(sp)
     4f0:	dc400717 	ldw	r17,28(sp)
     4f4:	dec00a04 	addi	sp,sp,40
     4f8:	f800283a 	ret

000004fc <puts>:
     4fc:	00800034 	movhi	r2,0
     500:	109dea04 	addi	r2,r2,30632
     504:	200b883a 	mov	r5,r4
     508:	11000017 	ldw	r4,0(r2)
     50c:	000045c1 	jmpi	45c <_puts_r>

00000510 <strlen>:
     510:	208000cc 	andi	r2,r4,3
     514:	2011883a 	mov	r8,r4
     518:	1000161e 	bne	r2,zero,574 <strlen+0x64>
     51c:	20c00017 	ldw	r3,0(r4)
     520:	017fbff4 	movhi	r5,65279
     524:	297fbfc4 	addi	r5,r5,-257
     528:	01e02074 	movhi	r7,32897
     52c:	39e02004 	addi	r7,r7,-32640
     530:	1945883a 	add	r2,r3,r5
     534:	11c4703a 	and	r2,r2,r7
     538:	00c6303a 	nor	r3,zero,r3
     53c:	1886703a 	and	r3,r3,r2
     540:	18000c1e 	bne	r3,zero,574 <strlen+0x64>
     544:	280d883a 	mov	r6,r5
     548:	380b883a 	mov	r5,r7
     54c:	21000104 	addi	r4,r4,4
     550:	20800017 	ldw	r2,0(r4)
     554:	1187883a 	add	r3,r2,r6
     558:	1946703a 	and	r3,r3,r5
     55c:	0084303a 	nor	r2,zero,r2
     560:	10c4703a 	and	r2,r2,r3
     564:	103ff926 	beq	r2,zero,54c <strlen+0x3c>
     568:	20800007 	ldb	r2,0(r4)
     56c:	10000326 	beq	r2,zero,57c <strlen+0x6c>
     570:	21000044 	addi	r4,r4,1
     574:	20800007 	ldb	r2,0(r4)
     578:	103ffd1e 	bne	r2,zero,570 <strlen+0x60>
     57c:	2205c83a 	sub	r2,r4,r8
     580:	f800283a 	ret

00000584 <__sfvwrite_r>:
     584:	30800217 	ldw	r2,8(r6)
     588:	defff504 	addi	sp,sp,-44
     58c:	df000915 	stw	fp,36(sp)
     590:	dd800715 	stw	r22,28(sp)
     594:	dc800315 	stw	r18,12(sp)
     598:	dfc00a15 	stw	ra,40(sp)
     59c:	ddc00815 	stw	r23,32(sp)
     5a0:	dd400615 	stw	r21,24(sp)
     5a4:	dd000515 	stw	r20,20(sp)
     5a8:	dcc00415 	stw	r19,16(sp)
     5ac:	dc400215 	stw	r17,8(sp)
     5b0:	dc000115 	stw	r16,4(sp)
     5b4:	302d883a 	mov	r22,r6
     5b8:	2039883a 	mov	fp,r4
     5bc:	2825883a 	mov	r18,r5
     5c0:	10001c26 	beq	r2,zero,634 <__sfvwrite_r+0xb0>
     5c4:	29c0030b 	ldhu	r7,12(r5)
     5c8:	3880020c 	andi	r2,r7,8
     5cc:	10002726 	beq	r2,zero,66c <__sfvwrite_r+0xe8>
     5d0:	28800417 	ldw	r2,16(r5)
     5d4:	10002526 	beq	r2,zero,66c <__sfvwrite_r+0xe8>
     5d8:	3880008c 	andi	r2,r7,2
     5dc:	b5400017 	ldw	r21,0(r22)
     5e0:	10002826 	beq	r2,zero,684 <__sfvwrite_r+0x100>
     5e4:	0021883a 	mov	r16,zero
     5e8:	0023883a 	mov	r17,zero
     5ec:	880d883a 	mov	r6,r17
     5f0:	e009883a 	mov	r4,fp
     5f4:	00810004 	movi	r2,1024
     5f8:	80006e26 	beq	r16,zero,7b4 <__sfvwrite_r+0x230>
     5fc:	800f883a 	mov	r7,r16
     600:	91400717 	ldw	r5,28(r18)
     604:	1400012e 	bgeu	r2,r16,60c <__sfvwrite_r+0x88>
     608:	100f883a 	mov	r7,r2
     60c:	90c00917 	ldw	r3,36(r18)
     610:	183ee83a 	callr	r3
     614:	1007883a 	mov	r3,r2
     618:	80a1c83a 	sub	r16,r16,r2
     61c:	88a3883a 	add	r17,r17,r2
     620:	00806d0e 	bge	zero,r2,7d8 <__sfvwrite_r+0x254>
     624:	b0800217 	ldw	r2,8(r22)
     628:	10c5c83a 	sub	r2,r2,r3
     62c:	b0800215 	stw	r2,8(r22)
     630:	103fee1e 	bne	r2,zero,5ec <__sfvwrite_r+0x68>
     634:	0009883a 	mov	r4,zero
     638:	2005883a 	mov	r2,r4
     63c:	dfc00a17 	ldw	ra,40(sp)
     640:	df000917 	ldw	fp,36(sp)
     644:	ddc00817 	ldw	r23,32(sp)
     648:	dd800717 	ldw	r22,28(sp)
     64c:	dd400617 	ldw	r21,24(sp)
     650:	dd000517 	ldw	r20,20(sp)
     654:	dcc00417 	ldw	r19,16(sp)
     658:	dc800317 	ldw	r18,12(sp)
     65c:	dc400217 	ldw	r17,8(sp)
     660:	dc000117 	ldw	r16,4(sp)
     664:	dec00b04 	addi	sp,sp,44
     668:	f800283a 	ret
     66c:	0001a280 	call	1a28 <__swsetup_r>
     670:	1000e41e 	bne	r2,zero,a04 <__sfvwrite_r+0x480>
     674:	91c0030b 	ldhu	r7,12(r18)
     678:	b5400017 	ldw	r21,0(r22)
     67c:	3880008c 	andi	r2,r7,2
     680:	103fd81e 	bne	r2,zero,5e4 <__sfvwrite_r+0x60>
     684:	3880004c 	andi	r2,r7,1
     688:	1005003a 	cmpeq	r2,r2,zero
     68c:	10005726 	beq	r2,zero,7ec <__sfvwrite_r+0x268>
     690:	0029883a 	mov	r20,zero
     694:	002f883a 	mov	r23,zero
     698:	a0004226 	beq	r20,zero,7a4 <__sfvwrite_r+0x220>
     69c:	3880800c 	andi	r2,r7,512
     6a0:	94000217 	ldw	r16,8(r18)
     6a4:	10008b26 	beq	r2,zero,8d4 <__sfvwrite_r+0x350>
     6a8:	800d883a 	mov	r6,r16
     6ac:	a400a536 	bltu	r20,r16,944 <__sfvwrite_r+0x3c0>
     6b0:	3881200c 	andi	r2,r7,1152
     6b4:	10002726 	beq	r2,zero,754 <__sfvwrite_r+0x1d0>
     6b8:	90800517 	ldw	r2,20(r18)
     6bc:	92000417 	ldw	r8,16(r18)
     6c0:	91400017 	ldw	r5,0(r18)
     6c4:	1087883a 	add	r3,r2,r2
     6c8:	1887883a 	add	r3,r3,r2
     6cc:	1808d7fa 	srli	r4,r3,31
     6d0:	2a21c83a 	sub	r16,r5,r8
     6d4:	80800044 	addi	r2,r16,1
     6d8:	20c9883a 	add	r4,r4,r3
     6dc:	2027d07a 	srai	r19,r4,1
     6e0:	a085883a 	add	r2,r20,r2
     6e4:	980d883a 	mov	r6,r19
     6e8:	9880022e 	bgeu	r19,r2,6f4 <__sfvwrite_r+0x170>
     6ec:	1027883a 	mov	r19,r2
     6f0:	100d883a 	mov	r6,r2
     6f4:	3881000c 	andi	r2,r7,1024
     6f8:	1000b826 	beq	r2,zero,9dc <__sfvwrite_r+0x458>
     6fc:	300b883a 	mov	r5,r6
     700:	e009883a 	mov	r4,fp
     704:	0000a200 	call	a20 <_malloc_r>
     708:	10003126 	beq	r2,zero,7d0 <__sfvwrite_r+0x24c>
     70c:	91400417 	ldw	r5,16(r18)
     710:	1009883a 	mov	r4,r2
     714:	800d883a 	mov	r6,r16
     718:	1023883a 	mov	r17,r2
     71c:	00012440 	call	1244 <memcpy>
     720:	90c0030b 	ldhu	r3,12(r18)
     724:	00beffc4 	movi	r2,-1025
     728:	1886703a 	and	r3,r3,r2
     72c:	18c02014 	ori	r3,r3,128
     730:	90c0030d 	sth	r3,12(r18)
     734:	9c07c83a 	sub	r3,r19,r16
     738:	8c05883a 	add	r2,r17,r16
     73c:	a00d883a 	mov	r6,r20
     740:	a021883a 	mov	r16,r20
     744:	90800015 	stw	r2,0(r18)
     748:	90c00215 	stw	r3,8(r18)
     74c:	94400415 	stw	r17,16(r18)
     750:	94c00515 	stw	r19,20(r18)
     754:	91000017 	ldw	r4,0(r18)
     758:	b80b883a 	mov	r5,r23
     75c:	a023883a 	mov	r17,r20
     760:	00012e40 	call	12e4 <memmove>
     764:	90c00217 	ldw	r3,8(r18)
     768:	90800017 	ldw	r2,0(r18)
     76c:	a027883a 	mov	r19,r20
     770:	1c07c83a 	sub	r3,r3,r16
     774:	1405883a 	add	r2,r2,r16
     778:	90c00215 	stw	r3,8(r18)
     77c:	a021883a 	mov	r16,r20
     780:	90800015 	stw	r2,0(r18)
     784:	b0800217 	ldw	r2,8(r22)
     788:	1405c83a 	sub	r2,r2,r16
     78c:	b0800215 	stw	r2,8(r22)
     790:	103fa826 	beq	r2,zero,634 <__sfvwrite_r+0xb0>
     794:	a469c83a 	sub	r20,r20,r17
     798:	91c0030b 	ldhu	r7,12(r18)
     79c:	bcef883a 	add	r23,r23,r19
     7a0:	a03fbe1e 	bne	r20,zero,69c <__sfvwrite_r+0x118>
     7a4:	adc00017 	ldw	r23,0(r21)
     7a8:	ad000117 	ldw	r20,4(r21)
     7ac:	ad400204 	addi	r21,r21,8
     7b0:	003fb906 	br	698 <__sfvwrite_r+0x114>
     7b4:	ac400017 	ldw	r17,0(r21)
     7b8:	ac000117 	ldw	r16,4(r21)
     7bc:	ad400204 	addi	r21,r21,8
     7c0:	003f8a06 	br	5ec <__sfvwrite_r+0x68>
     7c4:	91400417 	ldw	r5,16(r18)
     7c8:	e009883a 	mov	r4,fp
     7cc:	00021b40 	call	21b4 <_free_r>
     7d0:	00800304 	movi	r2,12
     7d4:	e0800015 	stw	r2,0(fp)
     7d8:	9080030b 	ldhu	r2,12(r18)
     7dc:	013fffc4 	movi	r4,-1
     7e0:	10801014 	ori	r2,r2,64
     7e4:	9080030d 	sth	r2,12(r18)
     7e8:	003f9306 	br	638 <__sfvwrite_r+0xb4>
     7ec:	0027883a 	mov	r19,zero
     7f0:	002f883a 	mov	r23,zero
     7f4:	d8000015 	stw	zero,0(sp)
     7f8:	0029883a 	mov	r20,zero
     7fc:	98001e26 	beq	r19,zero,878 <__sfvwrite_r+0x2f4>
     800:	d8c00017 	ldw	r3,0(sp)
     804:	1804c03a 	cmpne	r2,r3,zero
     808:	10005e26 	beq	r2,zero,984 <__sfvwrite_r+0x400>
     80c:	9821883a 	mov	r16,r19
     810:	a4c0012e 	bgeu	r20,r19,818 <__sfvwrite_r+0x294>
     814:	a021883a 	mov	r16,r20
     818:	91000017 	ldw	r4,0(r18)
     81c:	90800417 	ldw	r2,16(r18)
     820:	91800217 	ldw	r6,8(r18)
     824:	91c00517 	ldw	r7,20(r18)
     828:	1100022e 	bgeu	r2,r4,834 <__sfvwrite_r+0x2b0>
     82c:	31e3883a 	add	r17,r6,r7
     830:	8c001616 	blt	r17,r16,88c <__sfvwrite_r+0x308>
     834:	81c03816 	blt	r16,r7,918 <__sfvwrite_r+0x394>
     838:	90c00917 	ldw	r3,36(r18)
     83c:	91400717 	ldw	r5,28(r18)
     840:	e009883a 	mov	r4,fp
     844:	b80d883a 	mov	r6,r23
     848:	183ee83a 	callr	r3
     84c:	1023883a 	mov	r17,r2
     850:	00bfe10e 	bge	zero,r2,7d8 <__sfvwrite_r+0x254>
     854:	a469c83a 	sub	r20,r20,r17
     858:	a0001826 	beq	r20,zero,8bc <__sfvwrite_r+0x338>
     85c:	b0800217 	ldw	r2,8(r22)
     860:	1445c83a 	sub	r2,r2,r17
     864:	b0800215 	stw	r2,8(r22)
     868:	103f7226 	beq	r2,zero,634 <__sfvwrite_r+0xb0>
     86c:	9c67c83a 	sub	r19,r19,r17
     870:	bc6f883a 	add	r23,r23,r17
     874:	983fe21e 	bne	r19,zero,800 <__sfvwrite_r+0x27c>
     878:	adc00017 	ldw	r23,0(r21)
     87c:	acc00117 	ldw	r19,4(r21)
     880:	ad400204 	addi	r21,r21,8
     884:	d8000015 	stw	zero,0(sp)
     888:	003fdc06 	br	7fc <__sfvwrite_r+0x278>
     88c:	b80b883a 	mov	r5,r23
     890:	880d883a 	mov	r6,r17
     894:	00012e40 	call	12e4 <memmove>
     898:	90c00017 	ldw	r3,0(r18)
     89c:	e009883a 	mov	r4,fp
     8a0:	900b883a 	mov	r5,r18
     8a4:	1c47883a 	add	r3,r3,r17
     8a8:	90c00015 	stw	r3,0(r18)
     8ac:	0001b640 	call	1b64 <_fflush_r>
     8b0:	103fc91e 	bne	r2,zero,7d8 <__sfvwrite_r+0x254>
     8b4:	a469c83a 	sub	r20,r20,r17
     8b8:	a03fe81e 	bne	r20,zero,85c <__sfvwrite_r+0x2d8>
     8bc:	e009883a 	mov	r4,fp
     8c0:	900b883a 	mov	r5,r18
     8c4:	0001b640 	call	1b64 <_fflush_r>
     8c8:	103fc31e 	bne	r2,zero,7d8 <__sfvwrite_r+0x254>
     8cc:	d8000015 	stw	zero,0(sp)
     8d0:	003fe206 	br	85c <__sfvwrite_r+0x2d8>
     8d4:	91000017 	ldw	r4,0(r18)
     8d8:	90800417 	ldw	r2,16(r18)
     8dc:	1100022e 	bgeu	r2,r4,8e8 <__sfvwrite_r+0x364>
     8e0:	8023883a 	mov	r17,r16
     8e4:	85003136 	bltu	r16,r20,9ac <__sfvwrite_r+0x428>
     8e8:	91c00517 	ldw	r7,20(r18)
     8ec:	a1c01836 	bltu	r20,r7,950 <__sfvwrite_r+0x3cc>
     8f0:	90c00917 	ldw	r3,36(r18)
     8f4:	91400717 	ldw	r5,28(r18)
     8f8:	e009883a 	mov	r4,fp
     8fc:	b80d883a 	mov	r6,r23
     900:	183ee83a 	callr	r3
     904:	1021883a 	mov	r16,r2
     908:	00bfb30e 	bge	zero,r2,7d8 <__sfvwrite_r+0x254>
     90c:	1023883a 	mov	r17,r2
     910:	1027883a 	mov	r19,r2
     914:	003f9b06 	br	784 <__sfvwrite_r+0x200>
     918:	b80b883a 	mov	r5,r23
     91c:	800d883a 	mov	r6,r16
     920:	00012e40 	call	12e4 <memmove>
     924:	90c00217 	ldw	r3,8(r18)
     928:	90800017 	ldw	r2,0(r18)
     92c:	8023883a 	mov	r17,r16
     930:	1c07c83a 	sub	r3,r3,r16
     934:	1405883a 	add	r2,r2,r16
     938:	90c00215 	stw	r3,8(r18)
     93c:	90800015 	stw	r2,0(r18)
     940:	003fc406 	br	854 <__sfvwrite_r+0x2d0>
     944:	a00d883a 	mov	r6,r20
     948:	a021883a 	mov	r16,r20
     94c:	003f8106 	br	754 <__sfvwrite_r+0x1d0>
     950:	b80b883a 	mov	r5,r23
     954:	a00d883a 	mov	r6,r20
     958:	00012e40 	call	12e4 <memmove>
     95c:	90c00217 	ldw	r3,8(r18)
     960:	90800017 	ldw	r2,0(r18)
     964:	a021883a 	mov	r16,r20
     968:	1d07c83a 	sub	r3,r3,r20
     96c:	1505883a 	add	r2,r2,r20
     970:	a023883a 	mov	r17,r20
     974:	a027883a 	mov	r19,r20
     978:	90c00215 	stw	r3,8(r18)
     97c:	90800015 	stw	r2,0(r18)
     980:	003f8006 	br	784 <__sfvwrite_r+0x200>
     984:	b809883a 	mov	r4,r23
     988:	01400284 	movi	r5,10
     98c:	980d883a 	mov	r6,r19
     990:	00011600 	call	1160 <memchr>
     994:	10001726 	beq	r2,zero,9f4 <__sfvwrite_r+0x470>
     998:	15c5c83a 	sub	r2,r2,r23
     99c:	15000044 	addi	r20,r2,1
     9a0:	00800044 	movi	r2,1
     9a4:	d8800015 	stw	r2,0(sp)
     9a8:	003f9806 	br	80c <__sfvwrite_r+0x288>
     9ac:	b80b883a 	mov	r5,r23
     9b0:	800d883a 	mov	r6,r16
     9b4:	00012e40 	call	12e4 <memmove>
     9b8:	90c00017 	ldw	r3,0(r18)
     9bc:	e009883a 	mov	r4,fp
     9c0:	900b883a 	mov	r5,r18
     9c4:	1c07883a 	add	r3,r3,r16
     9c8:	90c00015 	stw	r3,0(r18)
     9cc:	8027883a 	mov	r19,r16
     9d0:	0001b640 	call	1b64 <_fflush_r>
     9d4:	103f6b26 	beq	r2,zero,784 <__sfvwrite_r+0x200>
     9d8:	003f7f06 	br	7d8 <__sfvwrite_r+0x254>
     9dc:	400b883a 	mov	r5,r8
     9e0:	e009883a 	mov	r4,fp
     9e4:	00013c40 	call	13c4 <_realloc_r>
     9e8:	103f7626 	beq	r2,zero,7c4 <__sfvwrite_r+0x240>
     9ec:	1023883a 	mov	r17,r2
     9f0:	003f5006 	br	734 <__sfvwrite_r+0x1b0>
     9f4:	00c00044 	movi	r3,1
     9f8:	9d000044 	addi	r20,r19,1
     9fc:	d8c00015 	stw	r3,0(sp)
     a00:	003f8206 	br	80c <__sfvwrite_r+0x288>
     a04:	9080030b 	ldhu	r2,12(r18)
     a08:	00c00244 	movi	r3,9
     a0c:	013fffc4 	movi	r4,-1
     a10:	10801014 	ori	r2,r2,64
     a14:	9080030d 	sth	r2,12(r18)
     a18:	e0c00015 	stw	r3,0(fp)
     a1c:	003f0606 	br	638 <__sfvwrite_r+0xb4>

00000a20 <_malloc_r>:
     a20:	defff604 	addi	sp,sp,-40
     a24:	28c002c4 	addi	r3,r5,11
     a28:	00800584 	movi	r2,22
     a2c:	dc800215 	stw	r18,8(sp)
     a30:	dfc00915 	stw	ra,36(sp)
     a34:	df000815 	stw	fp,32(sp)
     a38:	ddc00715 	stw	r23,28(sp)
     a3c:	dd800615 	stw	r22,24(sp)
     a40:	dd400515 	stw	r21,20(sp)
     a44:	dd000415 	stw	r20,16(sp)
     a48:	dcc00315 	stw	r19,12(sp)
     a4c:	dc400115 	stw	r17,4(sp)
     a50:	dc000015 	stw	r16,0(sp)
     a54:	2025883a 	mov	r18,r4
     a58:	10c01236 	bltu	r2,r3,aa4 <_malloc_r+0x84>
     a5c:	04400404 	movi	r17,16
     a60:	8940142e 	bgeu	r17,r5,ab4 <_malloc_r+0x94>
     a64:	00800304 	movi	r2,12
     a68:	0007883a 	mov	r3,zero
     a6c:	90800015 	stw	r2,0(r18)
     a70:	1805883a 	mov	r2,r3
     a74:	dfc00917 	ldw	ra,36(sp)
     a78:	df000817 	ldw	fp,32(sp)
     a7c:	ddc00717 	ldw	r23,28(sp)
     a80:	dd800617 	ldw	r22,24(sp)
     a84:	dd400517 	ldw	r21,20(sp)
     a88:	dd000417 	ldw	r20,16(sp)
     a8c:	dcc00317 	ldw	r19,12(sp)
     a90:	dc800217 	ldw	r18,8(sp)
     a94:	dc400117 	ldw	r17,4(sp)
     a98:	dc000017 	ldw	r16,0(sp)
     a9c:	dec00a04 	addi	sp,sp,40
     aa0:	f800283a 	ret
     aa4:	00bffe04 	movi	r2,-8
     aa8:	18a2703a 	and	r17,r3,r2
     aac:	883fed16 	blt	r17,zero,a64 <_malloc_r+0x44>
     ab0:	897fec36 	bltu	r17,r5,a64 <_malloc_r+0x44>
     ab4:	9009883a 	mov	r4,r18
     ab8:	00035880 	call	3588 <__malloc_lock>
     abc:	00807dc4 	movi	r2,503
     ac0:	14402b2e 	bgeu	r2,r17,b70 <_malloc_r+0x150>
     ac4:	8806d27a 	srli	r3,r17,9
     ac8:	18003f1e 	bne	r3,zero,bc8 <_malloc_r+0x1a8>
     acc:	880cd0fa 	srli	r6,r17,3
     ad0:	300490fa 	slli	r2,r6,3
     ad4:	02c00034 	movhi	r11,0
     ad8:	5ad80304 	addi	r11,r11,24588
     adc:	12cb883a 	add	r5,r2,r11
     ae0:	2c000317 	ldw	r16,12(r5)
     ae4:	580f883a 	mov	r7,r11
     ae8:	2c00041e 	bne	r5,r16,afc <_malloc_r+0xdc>
     aec:	00000a06 	br	b18 <_malloc_r+0xf8>
     af0:	1800860e 	bge	r3,zero,d0c <_malloc_r+0x2ec>
     af4:	84000317 	ldw	r16,12(r16)
     af8:	2c000726 	beq	r5,r16,b18 <_malloc_r+0xf8>
     afc:	80800117 	ldw	r2,4(r16)
     b00:	00ffff04 	movi	r3,-4
     b04:	10c8703a 	and	r4,r2,r3
     b08:	2447c83a 	sub	r3,r4,r17
     b0c:	008003c4 	movi	r2,15
     b10:	10fff70e 	bge	r2,r3,af0 <_malloc_r+0xd0>
     b14:	31bfffc4 	addi	r6,r6,-1
     b18:	32400044 	addi	r9,r6,1
     b1c:	02800034 	movhi	r10,0
     b20:	52980504 	addi	r10,r10,24596
     b24:	54000217 	ldw	r16,8(r10)
     b28:	8280a026 	beq	r16,r10,dac <_malloc_r+0x38c>
     b2c:	80800117 	ldw	r2,4(r16)
     b30:	00ffff04 	movi	r3,-4
     b34:	10ca703a 	and	r5,r2,r3
     b38:	2c4dc83a 	sub	r6,r5,r17
     b3c:	008003c4 	movi	r2,15
     b40:	11808316 	blt	r2,r6,d50 <_malloc_r+0x330>
     b44:	52800315 	stw	r10,12(r10)
     b48:	52800215 	stw	r10,8(r10)
     b4c:	30002916 	blt	r6,zero,bf4 <_malloc_r+0x1d4>
     b50:	8147883a 	add	r3,r16,r5
     b54:	18800117 	ldw	r2,4(r3)
     b58:	9009883a 	mov	r4,r18
     b5c:	10800054 	ori	r2,r2,1
     b60:	18800115 	stw	r2,4(r3)
     b64:	00035a80 	call	35a8 <__malloc_unlock>
     b68:	80c00204 	addi	r3,r16,8
     b6c:	003fc006 	br	a70 <_malloc_r+0x50>
     b70:	02c00034 	movhi	r11,0
     b74:	5ad80304 	addi	r11,r11,24588
     b78:	8ac5883a 	add	r2,r17,r11
     b7c:	14000317 	ldw	r16,12(r2)
     b80:	580f883a 	mov	r7,r11
     b84:	8806d0fa 	srli	r3,r17,3
     b88:	14006c26 	beq	r2,r16,d3c <_malloc_r+0x31c>
     b8c:	80c00117 	ldw	r3,4(r16)
     b90:	00bfff04 	movi	r2,-4
     b94:	81800317 	ldw	r6,12(r16)
     b98:	1886703a 	and	r3,r3,r2
     b9c:	80c7883a 	add	r3,r16,r3
     ba0:	18800117 	ldw	r2,4(r3)
     ba4:	81400217 	ldw	r5,8(r16)
     ba8:	9009883a 	mov	r4,r18
     bac:	10800054 	ori	r2,r2,1
     bb0:	18800115 	stw	r2,4(r3)
     bb4:	31400215 	stw	r5,8(r6)
     bb8:	29800315 	stw	r6,12(r5)
     bbc:	00035a80 	call	35a8 <__malloc_unlock>
     bc0:	80c00204 	addi	r3,r16,8
     bc4:	003faa06 	br	a70 <_malloc_r+0x50>
     bc8:	00800104 	movi	r2,4
     bcc:	10c0052e 	bgeu	r2,r3,be4 <_malloc_r+0x1c4>
     bd0:	00800504 	movi	r2,20
     bd4:	10c07836 	bltu	r2,r3,db8 <_malloc_r+0x398>
     bd8:	198016c4 	addi	r6,r3,91
     bdc:	300490fa 	slli	r2,r6,3
     be0:	003fbc06 	br	ad4 <_malloc_r+0xb4>
     be4:	8804d1ba 	srli	r2,r17,6
     be8:	11800e04 	addi	r6,r2,56
     bec:	300490fa 	slli	r2,r6,3
     bf0:	003fb806 	br	ad4 <_malloc_r+0xb4>
     bf4:	00807fc4 	movi	r2,511
     bf8:	1140bb36 	bltu	r2,r5,ee8 <_malloc_r+0x4c8>
     bfc:	2806d0fa 	srli	r3,r5,3
     c00:	573ffe04 	addi	fp,r10,-8
     c04:	00800044 	movi	r2,1
     c08:	180890fa 	slli	r4,r3,3
     c0c:	1807d0ba 	srai	r3,r3,2
     c10:	e1c00117 	ldw	r7,4(fp)
     c14:	5909883a 	add	r4,r11,r4
     c18:	21400217 	ldw	r5,8(r4)
     c1c:	10c4983a 	sll	r2,r2,r3
     c20:	81000315 	stw	r4,12(r16)
     c24:	81400215 	stw	r5,8(r16)
     c28:	388eb03a 	or	r7,r7,r2
     c2c:	2c000315 	stw	r16,12(r5)
     c30:	24000215 	stw	r16,8(r4)
     c34:	e1c00115 	stw	r7,4(fp)
     c38:	4807883a 	mov	r3,r9
     c3c:	4800cd16 	blt	r9,zero,f74 <_malloc_r+0x554>
     c40:	1807d0ba 	srai	r3,r3,2
     c44:	00800044 	movi	r2,1
     c48:	10c8983a 	sll	r4,r2,r3
     c4c:	39004436 	bltu	r7,r4,d60 <_malloc_r+0x340>
     c50:	21c4703a 	and	r2,r4,r7
     c54:	10000a1e 	bne	r2,zero,c80 <_malloc_r+0x260>
     c58:	2109883a 	add	r4,r4,r4
     c5c:	00bfff04 	movi	r2,-4
     c60:	4884703a 	and	r2,r9,r2
     c64:	3906703a 	and	r3,r7,r4
     c68:	12400104 	addi	r9,r2,4
     c6c:	1800041e 	bne	r3,zero,c80 <_malloc_r+0x260>
     c70:	2109883a 	add	r4,r4,r4
     c74:	3904703a 	and	r2,r7,r4
     c78:	4a400104 	addi	r9,r9,4
     c7c:	103ffc26 	beq	r2,zero,c70 <_malloc_r+0x250>
     c80:	480490fa 	slli	r2,r9,3
     c84:	4819883a 	mov	r12,r9
     c88:	023fff04 	movi	r8,-4
     c8c:	589b883a 	add	r13,r11,r2
     c90:	6807883a 	mov	r3,r13
     c94:	014003c4 	movi	r5,15
     c98:	1c000317 	ldw	r16,12(r3)
     c9c:	1c00041e 	bne	r3,r16,cb0 <_malloc_r+0x290>
     ca0:	0000a706 	br	f40 <_malloc_r+0x520>
     ca4:	3000ab0e 	bge	r6,zero,f54 <_malloc_r+0x534>
     ca8:	84000317 	ldw	r16,12(r16)
     cac:	1c00a426 	beq	r3,r16,f40 <_malloc_r+0x520>
     cb0:	80800117 	ldw	r2,4(r16)
     cb4:	1204703a 	and	r2,r2,r8
     cb8:	144dc83a 	sub	r6,r2,r17
     cbc:	29bff90e 	bge	r5,r6,ca4 <_malloc_r+0x284>
     cc0:	81000317 	ldw	r4,12(r16)
     cc4:	80c00217 	ldw	r3,8(r16)
     cc8:	89400054 	ori	r5,r17,1
     ccc:	8445883a 	add	r2,r16,r17
     cd0:	20c00215 	stw	r3,8(r4)
     cd4:	19000315 	stw	r4,12(r3)
     cd8:	81400115 	stw	r5,4(r16)
     cdc:	1187883a 	add	r3,r2,r6
     ce0:	31000054 	ori	r4,r6,1
     ce4:	50800315 	stw	r2,12(r10)
     ce8:	50800215 	stw	r2,8(r10)
     cec:	19800015 	stw	r6,0(r3)
     cf0:	11000115 	stw	r4,4(r2)
     cf4:	12800215 	stw	r10,8(r2)
     cf8:	12800315 	stw	r10,12(r2)
     cfc:	9009883a 	mov	r4,r18
     d00:	00035a80 	call	35a8 <__malloc_unlock>
     d04:	80c00204 	addi	r3,r16,8
     d08:	003f5906 	br	a70 <_malloc_r+0x50>
     d0c:	8109883a 	add	r4,r16,r4
     d10:	20800117 	ldw	r2,4(r4)
     d14:	80c00217 	ldw	r3,8(r16)
     d18:	81400317 	ldw	r5,12(r16)
     d1c:	10800054 	ori	r2,r2,1
     d20:	20800115 	stw	r2,4(r4)
     d24:	28c00215 	stw	r3,8(r5)
     d28:	19400315 	stw	r5,12(r3)
     d2c:	9009883a 	mov	r4,r18
     d30:	00035a80 	call	35a8 <__malloc_unlock>
     d34:	80c00204 	addi	r3,r16,8
     d38:	003f4d06 	br	a70 <_malloc_r+0x50>
     d3c:	80800204 	addi	r2,r16,8
     d40:	14000317 	ldw	r16,12(r2)
     d44:	143f911e 	bne	r2,r16,b8c <_malloc_r+0x16c>
     d48:	1a400084 	addi	r9,r3,2
     d4c:	003f7306 	br	b1c <_malloc_r+0xfc>
     d50:	88c00054 	ori	r3,r17,1
     d54:	8445883a 	add	r2,r16,r17
     d58:	80c00115 	stw	r3,4(r16)
     d5c:	003fdf06 	br	cdc <_malloc_r+0x2bc>
     d60:	e4000217 	ldw	r16,8(fp)
     d64:	00bfff04 	movi	r2,-4
     d68:	80c00117 	ldw	r3,4(r16)
     d6c:	802d883a 	mov	r22,r16
     d70:	18aa703a 	and	r21,r3,r2
     d74:	ac401636 	bltu	r21,r17,dd0 <_malloc_r+0x3b0>
     d78:	ac49c83a 	sub	r4,r21,r17
     d7c:	008003c4 	movi	r2,15
     d80:	1100130e 	bge	r2,r4,dd0 <_malloc_r+0x3b0>
     d84:	88800054 	ori	r2,r17,1
     d88:	8447883a 	add	r3,r16,r17
     d8c:	80800115 	stw	r2,4(r16)
     d90:	20800054 	ori	r2,r4,1
     d94:	18800115 	stw	r2,4(r3)
     d98:	e0c00215 	stw	r3,8(fp)
     d9c:	9009883a 	mov	r4,r18
     da0:	00035a80 	call	35a8 <__malloc_unlock>
     da4:	80c00204 	addi	r3,r16,8
     da8:	003f3106 	br	a70 <_malloc_r+0x50>
     dac:	39c00117 	ldw	r7,4(r7)
     db0:	573ffe04 	addi	fp,r10,-8
     db4:	003fa006 	br	c38 <_malloc_r+0x218>
     db8:	00801504 	movi	r2,84
     dbc:	10c06736 	bltu	r2,r3,f5c <_malloc_r+0x53c>
     dc0:	8804d33a 	srli	r2,r17,12
     dc4:	11801b84 	addi	r6,r2,110
     dc8:	300490fa 	slli	r2,r6,3
     dcc:	003f4106 	br	ad4 <_malloc_r+0xb4>
     dd0:	d0a70317 	ldw	r2,-25588(gp)
     dd4:	d0e00317 	ldw	r3,-32756(gp)
     dd8:	053fffc4 	movi	r20,-1
     ddc:	10800404 	addi	r2,r2,16
     de0:	88a7883a 	add	r19,r17,r2
     de4:	1d000326 	beq	r3,r20,df4 <_malloc_r+0x3d4>
     de8:	98c3ffc4 	addi	r3,r19,4095
     dec:	00bc0004 	movi	r2,-4096
     df0:	18a6703a 	and	r19,r3,r2
     df4:	9009883a 	mov	r4,r18
     df8:	980b883a 	mov	r5,r19
     dfc:	00019b80 	call	19b8 <_sbrk_r>
     e00:	1009883a 	mov	r4,r2
     e04:	15000426 	beq	r2,r20,e18 <_malloc_r+0x3f8>
     e08:	854b883a 	add	r5,r16,r21
     e0c:	1029883a 	mov	r20,r2
     e10:	11405a2e 	bgeu	r2,r5,f7c <_malloc_r+0x55c>
     e14:	87000c26 	beq	r16,fp,e48 <_malloc_r+0x428>
     e18:	e4000217 	ldw	r16,8(fp)
     e1c:	80c00117 	ldw	r3,4(r16)
     e20:	00bfff04 	movi	r2,-4
     e24:	1884703a 	and	r2,r3,r2
     e28:	14400336 	bltu	r2,r17,e38 <_malloc_r+0x418>
     e2c:	1449c83a 	sub	r4,r2,r17
     e30:	008003c4 	movi	r2,15
     e34:	113fd316 	blt	r2,r4,d84 <_malloc_r+0x364>
     e38:	9009883a 	mov	r4,r18
     e3c:	00035a80 	call	35a8 <__malloc_unlock>
     e40:	0007883a 	mov	r3,zero
     e44:	003f0a06 	br	a70 <_malloc_r+0x50>
     e48:	05c00074 	movhi	r23,1
     e4c:	bde4fd04 	addi	r23,r23,-27660
     e50:	b8800017 	ldw	r2,0(r23)
     e54:	988d883a 	add	r6,r19,r2
     e58:	b9800015 	stw	r6,0(r23)
     e5c:	d0e00317 	ldw	r3,-32756(gp)
     e60:	00bfffc4 	movi	r2,-1
     e64:	18808e26 	beq	r3,r2,10a0 <_malloc_r+0x680>
     e68:	2145c83a 	sub	r2,r4,r5
     e6c:	3085883a 	add	r2,r6,r2
     e70:	b8800015 	stw	r2,0(r23)
     e74:	20c001cc 	andi	r3,r4,7
     e78:	18005f1e 	bne	r3,zero,ff8 <_malloc_r+0x5d8>
     e7c:	000b883a 	mov	r5,zero
     e80:	a4c5883a 	add	r2,r20,r19
     e84:	1083ffcc 	andi	r2,r2,4095
     e88:	00c40004 	movi	r3,4096
     e8c:	1887c83a 	sub	r3,r3,r2
     e90:	28e7883a 	add	r19,r5,r3
     e94:	9009883a 	mov	r4,r18
     e98:	980b883a 	mov	r5,r19
     e9c:	00019b80 	call	19b8 <_sbrk_r>
     ea0:	1007883a 	mov	r3,r2
     ea4:	00bfffc4 	movi	r2,-1
     ea8:	18807a26 	beq	r3,r2,1094 <_malloc_r+0x674>
     eac:	1d05c83a 	sub	r2,r3,r20
     eb0:	9885883a 	add	r2,r19,r2
     eb4:	10c00054 	ori	r3,r2,1
     eb8:	b8800017 	ldw	r2,0(r23)
     ebc:	a021883a 	mov	r16,r20
     ec0:	a0c00115 	stw	r3,4(r20)
     ec4:	9885883a 	add	r2,r19,r2
     ec8:	b8800015 	stw	r2,0(r23)
     ecc:	e5000215 	stw	r20,8(fp)
     ed0:	b7003626 	beq	r22,fp,fac <_malloc_r+0x58c>
     ed4:	018003c4 	movi	r6,15
     ed8:	35404b36 	bltu	r6,r21,1008 <_malloc_r+0x5e8>
     edc:	00800044 	movi	r2,1
     ee0:	a0800115 	stw	r2,4(r20)
     ee4:	003fcd06 	br	e1c <_malloc_r+0x3fc>
     ee8:	2808d27a 	srli	r4,r5,9
     eec:	2000371e 	bne	r4,zero,fcc <_malloc_r+0x5ac>
     ef0:	2808d0fa 	srli	r4,r5,3
     ef4:	200690fa 	slli	r3,r4,3
     ef8:	1ad1883a 	add	r8,r3,r11
     efc:	41800217 	ldw	r6,8(r8)
     f00:	41805b26 	beq	r8,r6,1070 <_malloc_r+0x650>
     f04:	30800117 	ldw	r2,4(r6)
     f08:	00ffff04 	movi	r3,-4
     f0c:	10c4703a 	and	r2,r2,r3
     f10:	2880022e 	bgeu	r5,r2,f1c <_malloc_r+0x4fc>
     f14:	31800217 	ldw	r6,8(r6)
     f18:	41bffa1e 	bne	r8,r6,f04 <_malloc_r+0x4e4>
     f1c:	32000317 	ldw	r8,12(r6)
     f20:	39c00117 	ldw	r7,4(r7)
     f24:	82000315 	stw	r8,12(r16)
     f28:	81800215 	stw	r6,8(r16)
     f2c:	07000034 	movhi	fp,0
     f30:	e7180304 	addi	fp,fp,24588
     f34:	34000315 	stw	r16,12(r6)
     f38:	44000215 	stw	r16,8(r8)
     f3c:	003f3e06 	br	c38 <_malloc_r+0x218>
     f40:	63000044 	addi	r12,r12,1
     f44:	608000cc 	andi	r2,r12,3
     f48:	10005d26 	beq	r2,zero,10c0 <_malloc_r+0x6a0>
     f4c:	18c00204 	addi	r3,r3,8
     f50:	003f5106 	br	c98 <_malloc_r+0x278>
     f54:	8089883a 	add	r4,r16,r2
     f58:	003f6d06 	br	d10 <_malloc_r+0x2f0>
     f5c:	00805504 	movi	r2,340
     f60:	10c02036 	bltu	r2,r3,fe4 <_malloc_r+0x5c4>
     f64:	8804d3fa 	srli	r2,r17,15
     f68:	11801dc4 	addi	r6,r2,119
     f6c:	300490fa 	slli	r2,r6,3
     f70:	003ed806 	br	ad4 <_malloc_r+0xb4>
     f74:	48c000c4 	addi	r3,r9,3
     f78:	003f3106 	br	c40 <_malloc_r+0x220>
     f7c:	05c00074 	movhi	r23,1
     f80:	bde4fd04 	addi	r23,r23,-27660
     f84:	b8800017 	ldw	r2,0(r23)
     f88:	988d883a 	add	r6,r19,r2
     f8c:	b9800015 	stw	r6,0(r23)
     f90:	293fb21e 	bne	r5,r4,e5c <_malloc_r+0x43c>
     f94:	2083ffcc 	andi	r2,r4,4095
     f98:	103fb01e 	bne	r2,zero,e5c <_malloc_r+0x43c>
     f9c:	e4000217 	ldw	r16,8(fp)
     fa0:	9d45883a 	add	r2,r19,r21
     fa4:	10800054 	ori	r2,r2,1
     fa8:	80800115 	stw	r2,4(r16)
     fac:	b8c00017 	ldw	r3,0(r23)
     fb0:	d0a70417 	ldw	r2,-25584(gp)
     fb4:	10c0012e 	bgeu	r2,r3,fbc <_malloc_r+0x59c>
     fb8:	d0e70415 	stw	r3,-25584(gp)
     fbc:	d0a70517 	ldw	r2,-25580(gp)
     fc0:	10ff962e 	bgeu	r2,r3,e1c <_malloc_r+0x3fc>
     fc4:	d0e70515 	stw	r3,-25580(gp)
     fc8:	003f9406 	br	e1c <_malloc_r+0x3fc>
     fcc:	00800104 	movi	r2,4
     fd0:	11001e36 	bltu	r2,r4,104c <_malloc_r+0x62c>
     fd4:	2804d1ba 	srli	r2,r5,6
     fd8:	11000e04 	addi	r4,r2,56
     fdc:	200690fa 	slli	r3,r4,3
     fe0:	003fc506 	br	ef8 <_malloc_r+0x4d8>
     fe4:	00815504 	movi	r2,1364
     fe8:	10c01d2e 	bgeu	r2,r3,1060 <_malloc_r+0x640>
     fec:	01801f84 	movi	r6,126
     ff0:	0080fc04 	movi	r2,1008
     ff4:	003eb706 	br	ad4 <_malloc_r+0xb4>
     ff8:	00800204 	movi	r2,8
     ffc:	10cbc83a 	sub	r5,r2,r3
    1000:	2169883a 	add	r20,r4,r5
    1004:	003f9e06 	br	e80 <_malloc_r+0x460>
    1008:	00bffe04 	movi	r2,-8
    100c:	a93ffd04 	addi	r4,r21,-12
    1010:	2088703a 	and	r4,r4,r2
    1014:	b10b883a 	add	r5,r22,r4
    1018:	00c00144 	movi	r3,5
    101c:	28c00215 	stw	r3,8(r5)
    1020:	28c00115 	stw	r3,4(r5)
    1024:	b0800117 	ldw	r2,4(r22)
    1028:	1080004c 	andi	r2,r2,1
    102c:	2084b03a 	or	r2,r4,r2
    1030:	b0800115 	stw	r2,4(r22)
    1034:	313fdd2e 	bgeu	r6,r4,fac <_malloc_r+0x58c>
    1038:	b1400204 	addi	r5,r22,8
    103c:	9009883a 	mov	r4,r18
    1040:	00021b40 	call	21b4 <_free_r>
    1044:	e4000217 	ldw	r16,8(fp)
    1048:	003fd806 	br	fac <_malloc_r+0x58c>
    104c:	00800504 	movi	r2,20
    1050:	11001536 	bltu	r2,r4,10a8 <_malloc_r+0x688>
    1054:	210016c4 	addi	r4,r4,91
    1058:	200690fa 	slli	r3,r4,3
    105c:	003fa606 	br	ef8 <_malloc_r+0x4d8>
    1060:	8804d4ba 	srli	r2,r17,18
    1064:	11801f04 	addi	r6,r2,124
    1068:	300490fa 	slli	r2,r6,3
    106c:	003e9906 	br	ad4 <_malloc_r+0xb4>
    1070:	2009d0ba 	srai	r4,r4,2
    1074:	01400034 	movhi	r5,0
    1078:	29580304 	addi	r5,r5,24588
    107c:	00c00044 	movi	r3,1
    1080:	28800117 	ldw	r2,4(r5)
    1084:	1906983a 	sll	r3,r3,r4
    1088:	10c4b03a 	or	r2,r2,r3
    108c:	28800115 	stw	r2,4(r5)
    1090:	003fa306 	br	f20 <_malloc_r+0x500>
    1094:	0027883a 	mov	r19,zero
    1098:	00c00044 	movi	r3,1
    109c:	003f8606 	br	eb8 <_malloc_r+0x498>
    10a0:	d1200315 	stw	r4,-32756(gp)
    10a4:	003f7306 	br	e74 <_malloc_r+0x454>
    10a8:	00801504 	movi	r2,84
    10ac:	11001936 	bltu	r2,r4,1114 <_malloc_r+0x6f4>
    10b0:	2804d33a 	srli	r2,r5,12
    10b4:	11001b84 	addi	r4,r2,110
    10b8:	200690fa 	slli	r3,r4,3
    10bc:	003f8e06 	br	ef8 <_malloc_r+0x4d8>
    10c0:	480b883a 	mov	r5,r9
    10c4:	6807883a 	mov	r3,r13
    10c8:	288000cc 	andi	r2,r5,3
    10cc:	18fffe04 	addi	r3,r3,-8
    10d0:	297fffc4 	addi	r5,r5,-1
    10d4:	10001526 	beq	r2,zero,112c <_malloc_r+0x70c>
    10d8:	18800217 	ldw	r2,8(r3)
    10dc:	10fffa26 	beq	r2,r3,10c8 <_malloc_r+0x6a8>
    10e0:	2109883a 	add	r4,r4,r4
    10e4:	393f1e36 	bltu	r7,r4,d60 <_malloc_r+0x340>
    10e8:	203f1d26 	beq	r4,zero,d60 <_malloc_r+0x340>
    10ec:	21c4703a 	and	r2,r4,r7
    10f0:	10000226 	beq	r2,zero,10fc <_malloc_r+0x6dc>
    10f4:	6013883a 	mov	r9,r12
    10f8:	003ee106 	br	c80 <_malloc_r+0x260>
    10fc:	2109883a 	add	r4,r4,r4
    1100:	3904703a 	and	r2,r7,r4
    1104:	63000104 	addi	r12,r12,4
    1108:	103ffc26 	beq	r2,zero,10fc <_malloc_r+0x6dc>
    110c:	6013883a 	mov	r9,r12
    1110:	003edb06 	br	c80 <_malloc_r+0x260>
    1114:	00805504 	movi	r2,340
    1118:	11000836 	bltu	r2,r4,113c <_malloc_r+0x71c>
    111c:	2804d3fa 	srli	r2,r5,15
    1120:	11001dc4 	addi	r4,r2,119
    1124:	200690fa 	slli	r3,r4,3
    1128:	003f7306 	br	ef8 <_malloc_r+0x4d8>
    112c:	0104303a 	nor	r2,zero,r4
    1130:	388e703a 	and	r7,r7,r2
    1134:	e1c00115 	stw	r7,4(fp)
    1138:	003fe906 	br	10e0 <_malloc_r+0x6c0>
    113c:	00815504 	movi	r2,1364
    1140:	1100032e 	bgeu	r2,r4,1150 <_malloc_r+0x730>
    1144:	01001f84 	movi	r4,126
    1148:	00c0fc04 	movi	r3,1008
    114c:	003f6a06 	br	ef8 <_malloc_r+0x4d8>
    1150:	2804d4ba 	srli	r2,r5,18
    1154:	11001f04 	addi	r4,r2,124
    1158:	200690fa 	slli	r3,r4,3
    115c:	003f6606 	br	ef8 <_malloc_r+0x4d8>

00001160 <memchr>:
    1160:	008000c4 	movi	r2,3
    1164:	29403fcc 	andi	r5,r5,255
    1168:	2007883a 	mov	r3,r4
    116c:	1180022e 	bgeu	r2,r6,1178 <memchr+0x18>
    1170:	2084703a 	and	r2,r4,r2
    1174:	10000b26 	beq	r2,zero,11a4 <memchr+0x44>
    1178:	313fffc4 	addi	r4,r6,-1
    117c:	3000051e 	bne	r6,zero,1194 <memchr+0x34>
    1180:	00002c06 	br	1234 <memchr+0xd4>
    1184:	213fffc4 	addi	r4,r4,-1
    1188:	00bfffc4 	movi	r2,-1
    118c:	18c00044 	addi	r3,r3,1
    1190:	20802826 	beq	r4,r2,1234 <memchr+0xd4>
    1194:	18800003 	ldbu	r2,0(r3)
    1198:	28bffa1e 	bne	r5,r2,1184 <memchr+0x24>
    119c:	1805883a 	mov	r2,r3
    11a0:	f800283a 	ret
    11a4:	0011883a 	mov	r8,zero
    11a8:	0007883a 	mov	r3,zero
    11ac:	01c00104 	movi	r7,4
    11b0:	4004923a 	slli	r2,r8,8
    11b4:	18c00044 	addi	r3,r3,1
    11b8:	1151883a 	add	r8,r2,r5
    11bc:	19fffc1e 	bne	r3,r7,11b0 <memchr+0x50>
    11c0:	02bfbff4 	movhi	r10,65279
    11c4:	52bfbfc4 	addi	r10,r10,-257
    11c8:	02602074 	movhi	r9,32897
    11cc:	4a602004 	addi	r9,r9,-32640
    11d0:	02c000c4 	movi	r11,3
    11d4:	20800017 	ldw	r2,0(r4)
    11d8:	31bfff04 	addi	r6,r6,-4
    11dc:	200f883a 	mov	r7,r4
    11e0:	1204f03a 	xor	r2,r2,r8
    11e4:	1287883a 	add	r3,r2,r10
    11e8:	1a46703a 	and	r3,r3,r9
    11ec:	0084303a 	nor	r2,zero,r2
    11f0:	10c4703a 	and	r2,r2,r3
    11f4:	10000b26 	beq	r2,zero,1224 <memchr+0xc4>
    11f8:	20800003 	ldbu	r2,0(r4)
    11fc:	28800f26 	beq	r5,r2,123c <memchr+0xdc>
    1200:	20800043 	ldbu	r2,1(r4)
    1204:	21c00044 	addi	r7,r4,1
    1208:	28800c26 	beq	r5,r2,123c <memchr+0xdc>
    120c:	20800083 	ldbu	r2,2(r4)
    1210:	21c00084 	addi	r7,r4,2
    1214:	28800926 	beq	r5,r2,123c <memchr+0xdc>
    1218:	208000c3 	ldbu	r2,3(r4)
    121c:	21c000c4 	addi	r7,r4,3
    1220:	28800626 	beq	r5,r2,123c <memchr+0xdc>
    1224:	21000104 	addi	r4,r4,4
    1228:	59bfea36 	bltu	r11,r6,11d4 <memchr+0x74>
    122c:	2007883a 	mov	r3,r4
    1230:	003fd106 	br	1178 <memchr+0x18>
    1234:	0005883a 	mov	r2,zero
    1238:	f800283a 	ret
    123c:	3805883a 	mov	r2,r7
    1240:	f800283a 	ret

00001244 <memcpy>:
    1244:	01c003c4 	movi	r7,15
    1248:	2007883a 	mov	r3,r4
    124c:	3980032e 	bgeu	r7,r6,125c <memcpy+0x18>
    1250:	2904b03a 	or	r2,r5,r4
    1254:	108000cc 	andi	r2,r2,3
    1258:	10000926 	beq	r2,zero,1280 <memcpy+0x3c>
    125c:	30000626 	beq	r6,zero,1278 <memcpy+0x34>
    1260:	30cd883a 	add	r6,r6,r3
    1264:	28800003 	ldbu	r2,0(r5)
    1268:	29400044 	addi	r5,r5,1
    126c:	18800005 	stb	r2,0(r3)
    1270:	18c00044 	addi	r3,r3,1
    1274:	30fffb1e 	bne	r6,r3,1264 <memcpy+0x20>
    1278:	2005883a 	mov	r2,r4
    127c:	f800283a 	ret
    1280:	3811883a 	mov	r8,r7
    1284:	200f883a 	mov	r7,r4
    1288:	28c00017 	ldw	r3,0(r5)
    128c:	31bffc04 	addi	r6,r6,-16
    1290:	38c00015 	stw	r3,0(r7)
    1294:	28800117 	ldw	r2,4(r5)
    1298:	38800115 	stw	r2,4(r7)
    129c:	28c00217 	ldw	r3,8(r5)
    12a0:	38c00215 	stw	r3,8(r7)
    12a4:	28800317 	ldw	r2,12(r5)
    12a8:	29400404 	addi	r5,r5,16
    12ac:	38800315 	stw	r2,12(r7)
    12b0:	39c00404 	addi	r7,r7,16
    12b4:	41bff436 	bltu	r8,r6,1288 <memcpy+0x44>
    12b8:	008000c4 	movi	r2,3
    12bc:	1180072e 	bgeu	r2,r6,12dc <memcpy+0x98>
    12c0:	1007883a 	mov	r3,r2
    12c4:	28800017 	ldw	r2,0(r5)
    12c8:	31bfff04 	addi	r6,r6,-4
    12cc:	29400104 	addi	r5,r5,4
    12d0:	38800015 	stw	r2,0(r7)
    12d4:	39c00104 	addi	r7,r7,4
    12d8:	19bffa36 	bltu	r3,r6,12c4 <memcpy+0x80>
    12dc:	3807883a 	mov	r3,r7
    12e0:	003fde06 	br	125c <memcpy+0x18>

000012e4 <memmove>:
    12e4:	2807883a 	mov	r3,r5
    12e8:	2011883a 	mov	r8,r4
    12ec:	29000c2e 	bgeu	r5,r4,1320 <memmove+0x3c>
    12f0:	298f883a 	add	r7,r5,r6
    12f4:	21c00a2e 	bgeu	r4,r7,1320 <memmove+0x3c>
    12f8:	30000726 	beq	r6,zero,1318 <memmove+0x34>
    12fc:	2187883a 	add	r3,r4,r6
    1300:	198dc83a 	sub	r6,r3,r6
    1304:	39ffffc4 	addi	r7,r7,-1
    1308:	38800003 	ldbu	r2,0(r7)
    130c:	18ffffc4 	addi	r3,r3,-1
    1310:	18800005 	stb	r2,0(r3)
    1314:	19bffb1e 	bne	r3,r6,1304 <memmove+0x20>
    1318:	2005883a 	mov	r2,r4
    131c:	f800283a 	ret
    1320:	01c003c4 	movi	r7,15
    1324:	39800a36 	bltu	r7,r6,1350 <memmove+0x6c>
    1328:	303ffb26 	beq	r6,zero,1318 <memmove+0x34>
    132c:	400f883a 	mov	r7,r8
    1330:	320d883a 	add	r6,r6,r8
    1334:	28800003 	ldbu	r2,0(r5)
    1338:	29400044 	addi	r5,r5,1
    133c:	38800005 	stb	r2,0(r7)
    1340:	39c00044 	addi	r7,r7,1
    1344:	39bffb1e 	bne	r7,r6,1334 <memmove+0x50>
    1348:	2005883a 	mov	r2,r4
    134c:	f800283a 	ret
    1350:	1904b03a 	or	r2,r3,r4
    1354:	108000cc 	andi	r2,r2,3
    1358:	103ff31e 	bne	r2,zero,1328 <memmove+0x44>
    135c:	3811883a 	mov	r8,r7
    1360:	180b883a 	mov	r5,r3
    1364:	200f883a 	mov	r7,r4
    1368:	28c00017 	ldw	r3,0(r5)
    136c:	31bffc04 	addi	r6,r6,-16
    1370:	38c00015 	stw	r3,0(r7)
    1374:	28800117 	ldw	r2,4(r5)
    1378:	38800115 	stw	r2,4(r7)
    137c:	28c00217 	ldw	r3,8(r5)
    1380:	38c00215 	stw	r3,8(r7)
    1384:	28800317 	ldw	r2,12(r5)
    1388:	29400404 	addi	r5,r5,16
    138c:	38800315 	stw	r2,12(r7)
    1390:	39c00404 	addi	r7,r7,16
    1394:	41bff436 	bltu	r8,r6,1368 <memmove+0x84>
    1398:	008000c4 	movi	r2,3
    139c:	1180072e 	bgeu	r2,r6,13bc <memmove+0xd8>
    13a0:	1007883a 	mov	r3,r2
    13a4:	28800017 	ldw	r2,0(r5)
    13a8:	31bfff04 	addi	r6,r6,-4
    13ac:	29400104 	addi	r5,r5,4
    13b0:	38800015 	stw	r2,0(r7)
    13b4:	39c00104 	addi	r7,r7,4
    13b8:	19bffa36 	bltu	r3,r6,13a4 <memmove+0xc0>
    13bc:	3811883a 	mov	r8,r7
    13c0:	003fd906 	br	1328 <memmove+0x44>

000013c4 <_realloc_r>:
    13c4:	defff404 	addi	sp,sp,-48
    13c8:	dd800815 	stw	r22,32(sp)
    13cc:	dc800415 	stw	r18,16(sp)
    13d0:	dc400315 	stw	r17,12(sp)
    13d4:	dfc00b15 	stw	ra,44(sp)
    13d8:	df000a15 	stw	fp,40(sp)
    13dc:	ddc00915 	stw	r23,36(sp)
    13e0:	dd400715 	stw	r21,28(sp)
    13e4:	dd000615 	stw	r20,24(sp)
    13e8:	dcc00515 	stw	r19,20(sp)
    13ec:	dc000215 	stw	r16,8(sp)
    13f0:	2825883a 	mov	r18,r5
    13f4:	3023883a 	mov	r17,r6
    13f8:	202d883a 	mov	r22,r4
    13fc:	2800c926 	beq	r5,zero,1724 <_realloc_r+0x360>
    1400:	00035880 	call	3588 <__malloc_lock>
    1404:	943ffe04 	addi	r16,r18,-8
    1408:	88c002c4 	addi	r3,r17,11
    140c:	00800584 	movi	r2,22
    1410:	82000117 	ldw	r8,4(r16)
    1414:	10c01b2e 	bgeu	r2,r3,1484 <_realloc_r+0xc0>
    1418:	00bffe04 	movi	r2,-8
    141c:	188e703a 	and	r7,r3,r2
    1420:	3839883a 	mov	fp,r7
    1424:	38001a16 	blt	r7,zero,1490 <_realloc_r+0xcc>
    1428:	e4401936 	bltu	fp,r17,1490 <_realloc_r+0xcc>
    142c:	013fff04 	movi	r4,-4
    1430:	4126703a 	and	r19,r8,r4
    1434:	99c02616 	blt	r19,r7,14d0 <_realloc_r+0x10c>
    1438:	802b883a 	mov	r21,r16
    143c:	9829883a 	mov	r20,r19
    1440:	84000204 	addi	r16,r16,8
    1444:	a80f883a 	mov	r7,r21
    1448:	a70dc83a 	sub	r6,r20,fp
    144c:	008003c4 	movi	r2,15
    1450:	1180c136 	bltu	r2,r6,1758 <_realloc_r+0x394>
    1454:	38800117 	ldw	r2,4(r7)
    1458:	a549883a 	add	r4,r20,r21
    145c:	1080004c 	andi	r2,r2,1
    1460:	a084b03a 	or	r2,r20,r2
    1464:	38800115 	stw	r2,4(r7)
    1468:	20c00117 	ldw	r3,4(r4)
    146c:	18c00054 	ori	r3,r3,1
    1470:	20c00115 	stw	r3,4(r4)
    1474:	b009883a 	mov	r4,r22
    1478:	00035a80 	call	35a8 <__malloc_unlock>
    147c:	8023883a 	mov	r17,r16
    1480:	00000606 	br	149c <_realloc_r+0xd8>
    1484:	01c00404 	movi	r7,16
    1488:	3839883a 	mov	fp,r7
    148c:	e47fe72e 	bgeu	fp,r17,142c <_realloc_r+0x68>
    1490:	00800304 	movi	r2,12
    1494:	0023883a 	mov	r17,zero
    1498:	b0800015 	stw	r2,0(r22)
    149c:	8805883a 	mov	r2,r17
    14a0:	dfc00b17 	ldw	ra,44(sp)
    14a4:	df000a17 	ldw	fp,40(sp)
    14a8:	ddc00917 	ldw	r23,36(sp)
    14ac:	dd800817 	ldw	r22,32(sp)
    14b0:	dd400717 	ldw	r21,28(sp)
    14b4:	dd000617 	ldw	r20,24(sp)
    14b8:	dcc00517 	ldw	r19,20(sp)
    14bc:	dc800417 	ldw	r18,16(sp)
    14c0:	dc400317 	ldw	r17,12(sp)
    14c4:	dc000217 	ldw	r16,8(sp)
    14c8:	dec00c04 	addi	sp,sp,48
    14cc:	f800283a 	ret
    14d0:	00800034 	movhi	r2,0
    14d4:	10980304 	addi	r2,r2,24588
    14d8:	12400217 	ldw	r9,8(r2)
    14dc:	84cd883a 	add	r6,r16,r19
    14e0:	802b883a 	mov	r21,r16
    14e4:	3240b926 	beq	r6,r9,17cc <_realloc_r+0x408>
    14e8:	31400117 	ldw	r5,4(r6)
    14ec:	00bfff84 	movi	r2,-2
    14f0:	2884703a 	and	r2,r5,r2
    14f4:	1185883a 	add	r2,r2,r6
    14f8:	10c00117 	ldw	r3,4(r2)
    14fc:	18c0004c 	andi	r3,r3,1
    1500:	1807003a 	cmpeq	r3,r3,zero
    1504:	1800a326 	beq	r3,zero,1794 <_realloc_r+0x3d0>
    1508:	2908703a 	and	r4,r5,r4
    150c:	9929883a 	add	r20,r19,r4
    1510:	a1c0a30e 	bge	r20,r7,17a0 <_realloc_r+0x3dc>
    1514:	4080004c 	andi	r2,r8,1
    1518:	1000551e 	bne	r2,zero,1670 <_realloc_r+0x2ac>
    151c:	80800017 	ldw	r2,0(r16)
    1520:	80afc83a 	sub	r23,r16,r2
    1524:	b8c00117 	ldw	r3,4(r23)
    1528:	00bfff04 	movi	r2,-4
    152c:	1884703a 	and	r2,r3,r2
    1530:	30002e26 	beq	r6,zero,15ec <_realloc_r+0x228>
    1534:	3240b926 	beq	r6,r9,181c <_realloc_r+0x458>
    1538:	98a9883a 	add	r20,r19,r2
    153c:	2509883a 	add	r4,r4,r20
    1540:	d9000015 	stw	r4,0(sp)
    1544:	21c02a16 	blt	r4,r7,15f0 <_realloc_r+0x22c>
    1548:	30800317 	ldw	r2,12(r6)
    154c:	30c00217 	ldw	r3,8(r6)
    1550:	01400904 	movi	r5,36
    1554:	99bfff04 	addi	r6,r19,-4
    1558:	18800315 	stw	r2,12(r3)
    155c:	10c00215 	stw	r3,8(r2)
    1560:	b9000317 	ldw	r4,12(r23)
    1564:	b8800217 	ldw	r2,8(r23)
    1568:	b82b883a 	mov	r21,r23
    156c:	bc000204 	addi	r16,r23,8
    1570:	20800215 	stw	r2,8(r4)
    1574:	11000315 	stw	r4,12(r2)
    1578:	2980e436 	bltu	r5,r6,190c <_realloc_r+0x548>
    157c:	008004c4 	movi	r2,19
    1580:	9009883a 	mov	r4,r18
    1584:	8011883a 	mov	r8,r16
    1588:	11800f2e 	bgeu	r2,r6,15c8 <_realloc_r+0x204>
    158c:	90800017 	ldw	r2,0(r18)
    1590:	ba000404 	addi	r8,r23,16
    1594:	91000204 	addi	r4,r18,8
    1598:	b8800215 	stw	r2,8(r23)
    159c:	90c00117 	ldw	r3,4(r18)
    15a0:	008006c4 	movi	r2,27
    15a4:	b8c00315 	stw	r3,12(r23)
    15a8:	1180072e 	bgeu	r2,r6,15c8 <_realloc_r+0x204>
    15ac:	90c00217 	ldw	r3,8(r18)
    15b0:	ba000604 	addi	r8,r23,24
    15b4:	91000404 	addi	r4,r18,16
    15b8:	b8c00415 	stw	r3,16(r23)
    15bc:	90800317 	ldw	r2,12(r18)
    15c0:	b8800515 	stw	r2,20(r23)
    15c4:	3140e726 	beq	r6,r5,1964 <_realloc_r+0x5a0>
    15c8:	20800017 	ldw	r2,0(r4)
    15cc:	dd000017 	ldw	r20,0(sp)
    15d0:	b80f883a 	mov	r7,r23
    15d4:	40800015 	stw	r2,0(r8)
    15d8:	20c00117 	ldw	r3,4(r4)
    15dc:	40c00115 	stw	r3,4(r8)
    15e0:	20800217 	ldw	r2,8(r4)
    15e4:	40800215 	stw	r2,8(r8)
    15e8:	003f9706 	br	1448 <_realloc_r+0x84>
    15ec:	98a9883a 	add	r20,r19,r2
    15f0:	a1c01f16 	blt	r20,r7,1670 <_realloc_r+0x2ac>
    15f4:	b8c00317 	ldw	r3,12(r23)
    15f8:	b8800217 	ldw	r2,8(r23)
    15fc:	99bfff04 	addi	r6,r19,-4
    1600:	01400904 	movi	r5,36
    1604:	b82b883a 	mov	r21,r23
    1608:	18800215 	stw	r2,8(r3)
    160c:	10c00315 	stw	r3,12(r2)
    1610:	bc000204 	addi	r16,r23,8
    1614:	2980c336 	bltu	r5,r6,1924 <_realloc_r+0x560>
    1618:	008004c4 	movi	r2,19
    161c:	9009883a 	mov	r4,r18
    1620:	8011883a 	mov	r8,r16
    1624:	11800f2e 	bgeu	r2,r6,1664 <_realloc_r+0x2a0>
    1628:	90800017 	ldw	r2,0(r18)
    162c:	ba000404 	addi	r8,r23,16
    1630:	91000204 	addi	r4,r18,8
    1634:	b8800215 	stw	r2,8(r23)
    1638:	90c00117 	ldw	r3,4(r18)
    163c:	008006c4 	movi	r2,27
    1640:	b8c00315 	stw	r3,12(r23)
    1644:	1180072e 	bgeu	r2,r6,1664 <_realloc_r+0x2a0>
    1648:	90c00217 	ldw	r3,8(r18)
    164c:	ba000604 	addi	r8,r23,24
    1650:	91000404 	addi	r4,r18,16
    1654:	b8c00415 	stw	r3,16(r23)
    1658:	90800317 	ldw	r2,12(r18)
    165c:	b8800515 	stw	r2,20(r23)
    1660:	3140c726 	beq	r6,r5,1980 <_realloc_r+0x5bc>
    1664:	20800017 	ldw	r2,0(r4)
    1668:	b80f883a 	mov	r7,r23
    166c:	003fd906 	br	15d4 <_realloc_r+0x210>
    1670:	880b883a 	mov	r5,r17
    1674:	b009883a 	mov	r4,r22
    1678:	0000a200 	call	a20 <_malloc_r>
    167c:	1023883a 	mov	r17,r2
    1680:	10002526 	beq	r2,zero,1718 <_realloc_r+0x354>
    1684:	80800117 	ldw	r2,4(r16)
    1688:	00ffff84 	movi	r3,-2
    168c:	893ffe04 	addi	r4,r17,-8
    1690:	10c4703a 	and	r2,r2,r3
    1694:	8085883a 	add	r2,r16,r2
    1698:	20809526 	beq	r4,r2,18f0 <_realloc_r+0x52c>
    169c:	99bfff04 	addi	r6,r19,-4
    16a0:	01c00904 	movi	r7,36
    16a4:	39804536 	bltu	r7,r6,17bc <_realloc_r+0x3f8>
    16a8:	008004c4 	movi	r2,19
    16ac:	9009883a 	mov	r4,r18
    16b0:	880b883a 	mov	r5,r17
    16b4:	11800f2e 	bgeu	r2,r6,16f4 <_realloc_r+0x330>
    16b8:	90800017 	ldw	r2,0(r18)
    16bc:	89400204 	addi	r5,r17,8
    16c0:	91000204 	addi	r4,r18,8
    16c4:	88800015 	stw	r2,0(r17)
    16c8:	90c00117 	ldw	r3,4(r18)
    16cc:	008006c4 	movi	r2,27
    16d0:	88c00115 	stw	r3,4(r17)
    16d4:	1180072e 	bgeu	r2,r6,16f4 <_realloc_r+0x330>
    16d8:	90c00217 	ldw	r3,8(r18)
    16dc:	89400404 	addi	r5,r17,16
    16e0:	91000404 	addi	r4,r18,16
    16e4:	88c00215 	stw	r3,8(r17)
    16e8:	90800317 	ldw	r2,12(r18)
    16ec:	88800315 	stw	r2,12(r17)
    16f0:	31c09126 	beq	r6,r7,1938 <_realloc_r+0x574>
    16f4:	20800017 	ldw	r2,0(r4)
    16f8:	28800015 	stw	r2,0(r5)
    16fc:	20c00117 	ldw	r3,4(r4)
    1700:	28c00115 	stw	r3,4(r5)
    1704:	20800217 	ldw	r2,8(r4)
    1708:	28800215 	stw	r2,8(r5)
    170c:	900b883a 	mov	r5,r18
    1710:	b009883a 	mov	r4,r22
    1714:	00021b40 	call	21b4 <_free_r>
    1718:	b009883a 	mov	r4,r22
    171c:	00035a80 	call	35a8 <__malloc_unlock>
    1720:	003f5e06 	br	149c <_realloc_r+0xd8>
    1724:	300b883a 	mov	r5,r6
    1728:	dfc00b17 	ldw	ra,44(sp)
    172c:	df000a17 	ldw	fp,40(sp)
    1730:	ddc00917 	ldw	r23,36(sp)
    1734:	dd800817 	ldw	r22,32(sp)
    1738:	dd400717 	ldw	r21,28(sp)
    173c:	dd000617 	ldw	r20,24(sp)
    1740:	dcc00517 	ldw	r19,20(sp)
    1744:	dc800417 	ldw	r18,16(sp)
    1748:	dc400317 	ldw	r17,12(sp)
    174c:	dc000217 	ldw	r16,8(sp)
    1750:	dec00c04 	addi	sp,sp,48
    1754:	0000a201 	jmpi	a20 <_malloc_r>
    1758:	38800117 	ldw	r2,4(r7)
    175c:	e54b883a 	add	r5,fp,r21
    1760:	31000054 	ori	r4,r6,1
    1764:	1080004c 	andi	r2,r2,1
    1768:	1704b03a 	or	r2,r2,fp
    176c:	38800115 	stw	r2,4(r7)
    1770:	29000115 	stw	r4,4(r5)
    1774:	2987883a 	add	r3,r5,r6
    1778:	18800117 	ldw	r2,4(r3)
    177c:	29400204 	addi	r5,r5,8
    1780:	b009883a 	mov	r4,r22
    1784:	10800054 	ori	r2,r2,1
    1788:	18800115 	stw	r2,4(r3)
    178c:	00021b40 	call	21b4 <_free_r>
    1790:	003f3806 	br	1474 <_realloc_r+0xb0>
    1794:	000d883a 	mov	r6,zero
    1798:	0009883a 	mov	r4,zero
    179c:	003f5d06 	br	1514 <_realloc_r+0x150>
    17a0:	30c00217 	ldw	r3,8(r6)
    17a4:	30800317 	ldw	r2,12(r6)
    17a8:	800f883a 	mov	r7,r16
    17ac:	84000204 	addi	r16,r16,8
    17b0:	10c00215 	stw	r3,8(r2)
    17b4:	18800315 	stw	r2,12(r3)
    17b8:	003f2306 	br	1448 <_realloc_r+0x84>
    17bc:	8809883a 	mov	r4,r17
    17c0:	900b883a 	mov	r5,r18
    17c4:	00012e40 	call	12e4 <memmove>
    17c8:	003fd006 	br	170c <_realloc_r+0x348>
    17cc:	30800117 	ldw	r2,4(r6)
    17d0:	e0c00404 	addi	r3,fp,16
    17d4:	1108703a 	and	r4,r2,r4
    17d8:	9905883a 	add	r2,r19,r4
    17dc:	10ff4d16 	blt	r2,r3,1514 <_realloc_r+0x150>
    17e0:	1705c83a 	sub	r2,r2,fp
    17e4:	870b883a 	add	r5,r16,fp
    17e8:	10800054 	ori	r2,r2,1
    17ec:	28800115 	stw	r2,4(r5)
    17f0:	80c00117 	ldw	r3,4(r16)
    17f4:	00800034 	movhi	r2,0
    17f8:	10980304 	addi	r2,r2,24588
    17fc:	b009883a 	mov	r4,r22
    1800:	18c0004c 	andi	r3,r3,1
    1804:	e0c6b03a 	or	r3,fp,r3
    1808:	11400215 	stw	r5,8(r2)
    180c:	80c00115 	stw	r3,4(r16)
    1810:	00035a80 	call	35a8 <__malloc_unlock>
    1814:	84400204 	addi	r17,r16,8
    1818:	003f2006 	br	149c <_realloc_r+0xd8>
    181c:	98a9883a 	add	r20,r19,r2
    1820:	2509883a 	add	r4,r4,r20
    1824:	e0800404 	addi	r2,fp,16
    1828:	d9000115 	stw	r4,4(sp)
    182c:	20bf7016 	blt	r4,r2,15f0 <_realloc_r+0x22c>
    1830:	b8c00317 	ldw	r3,12(r23)
    1834:	b8800217 	ldw	r2,8(r23)
    1838:	99bfff04 	addi	r6,r19,-4
    183c:	01400904 	movi	r5,36
    1840:	18800215 	stw	r2,8(r3)
    1844:	10c00315 	stw	r3,12(r2)
    1848:	bc400204 	addi	r17,r23,8
    184c:	29804136 	bltu	r5,r6,1954 <_realloc_r+0x590>
    1850:	008004c4 	movi	r2,19
    1854:	9009883a 	mov	r4,r18
    1858:	880f883a 	mov	r7,r17
    185c:	11800f2e 	bgeu	r2,r6,189c <_realloc_r+0x4d8>
    1860:	90800017 	ldw	r2,0(r18)
    1864:	b9c00404 	addi	r7,r23,16
    1868:	91000204 	addi	r4,r18,8
    186c:	b8800215 	stw	r2,8(r23)
    1870:	90c00117 	ldw	r3,4(r18)
    1874:	008006c4 	movi	r2,27
    1878:	b8c00315 	stw	r3,12(r23)
    187c:	1180072e 	bgeu	r2,r6,189c <_realloc_r+0x4d8>
    1880:	90c00217 	ldw	r3,8(r18)
    1884:	b9c00604 	addi	r7,r23,24
    1888:	91000404 	addi	r4,r18,16
    188c:	b8c00415 	stw	r3,16(r23)
    1890:	90800317 	ldw	r2,12(r18)
    1894:	b8800515 	stw	r2,20(r23)
    1898:	31404026 	beq	r6,r5,199c <_realloc_r+0x5d8>
    189c:	20800017 	ldw	r2,0(r4)
    18a0:	38800015 	stw	r2,0(r7)
    18a4:	20c00117 	ldw	r3,4(r4)
    18a8:	38c00115 	stw	r3,4(r7)
    18ac:	20800217 	ldw	r2,8(r4)
    18b0:	38800215 	stw	r2,8(r7)
    18b4:	d8c00117 	ldw	r3,4(sp)
    18b8:	bf0b883a 	add	r5,r23,fp
    18bc:	b009883a 	mov	r4,r22
    18c0:	1f05c83a 	sub	r2,r3,fp
    18c4:	10800054 	ori	r2,r2,1
    18c8:	28800115 	stw	r2,4(r5)
    18cc:	b8c00117 	ldw	r3,4(r23)
    18d0:	00800034 	movhi	r2,0
    18d4:	10980304 	addi	r2,r2,24588
    18d8:	11400215 	stw	r5,8(r2)
    18dc:	18c0004c 	andi	r3,r3,1
    18e0:	e0c6b03a 	or	r3,fp,r3
    18e4:	b8c00115 	stw	r3,4(r23)
    18e8:	00035a80 	call	35a8 <__malloc_unlock>
    18ec:	003eeb06 	br	149c <_realloc_r+0xd8>
    18f0:	20800117 	ldw	r2,4(r4)
    18f4:	00ffff04 	movi	r3,-4
    18f8:	800f883a 	mov	r7,r16
    18fc:	10c4703a 	and	r2,r2,r3
    1900:	98a9883a 	add	r20,r19,r2
    1904:	84000204 	addi	r16,r16,8
    1908:	003ecf06 	br	1448 <_realloc_r+0x84>
    190c:	900b883a 	mov	r5,r18
    1910:	8009883a 	mov	r4,r16
    1914:	00012e40 	call	12e4 <memmove>
    1918:	dd000017 	ldw	r20,0(sp)
    191c:	b80f883a 	mov	r7,r23
    1920:	003ec906 	br	1448 <_realloc_r+0x84>
    1924:	900b883a 	mov	r5,r18
    1928:	8009883a 	mov	r4,r16
    192c:	00012e40 	call	12e4 <memmove>
    1930:	b80f883a 	mov	r7,r23
    1934:	003ec406 	br	1448 <_realloc_r+0x84>
    1938:	90c00417 	ldw	r3,16(r18)
    193c:	89400604 	addi	r5,r17,24
    1940:	91000604 	addi	r4,r18,24
    1944:	88c00415 	stw	r3,16(r17)
    1948:	90800517 	ldw	r2,20(r18)
    194c:	88800515 	stw	r2,20(r17)
    1950:	003f6806 	br	16f4 <_realloc_r+0x330>
    1954:	900b883a 	mov	r5,r18
    1958:	8809883a 	mov	r4,r17
    195c:	00012e40 	call	12e4 <memmove>
    1960:	003fd406 	br	18b4 <_realloc_r+0x4f0>
    1964:	90c00417 	ldw	r3,16(r18)
    1968:	91000604 	addi	r4,r18,24
    196c:	ba000804 	addi	r8,r23,32
    1970:	b8c00615 	stw	r3,24(r23)
    1974:	90800517 	ldw	r2,20(r18)
    1978:	b8800715 	stw	r2,28(r23)
    197c:	003f1206 	br	15c8 <_realloc_r+0x204>
    1980:	90c00417 	ldw	r3,16(r18)
    1984:	91000604 	addi	r4,r18,24
    1988:	ba000804 	addi	r8,r23,32
    198c:	b8c00615 	stw	r3,24(r23)
    1990:	90800517 	ldw	r2,20(r18)
    1994:	b8800715 	stw	r2,28(r23)
    1998:	003f3206 	br	1664 <_realloc_r+0x2a0>
    199c:	90c00417 	ldw	r3,16(r18)
    19a0:	91000604 	addi	r4,r18,24
    19a4:	b9c00804 	addi	r7,r23,32
    19a8:	b8c00615 	stw	r3,24(r23)
    19ac:	90800517 	ldw	r2,20(r18)
    19b0:	b8800715 	stw	r2,28(r23)
    19b4:	003fb906 	br	189c <_realloc_r+0x4d8>

000019b8 <_sbrk_r>:
    19b8:	defffd04 	addi	sp,sp,-12
    19bc:	dc000015 	stw	r16,0(sp)
    19c0:	04000074 	movhi	r16,1
    19c4:	8424f004 	addi	r16,r16,-27712
    19c8:	dc400115 	stw	r17,4(sp)
    19cc:	80000015 	stw	zero,0(r16)
    19d0:	2023883a 	mov	r17,r4
    19d4:	2809883a 	mov	r4,r5
    19d8:	dfc00215 	stw	ra,8(sp)
    19dc:	00037c40 	call	37c4 <sbrk>
    19e0:	1007883a 	mov	r3,r2
    19e4:	00bfffc4 	movi	r2,-1
    19e8:	18800626 	beq	r3,r2,1a04 <_sbrk_r+0x4c>
    19ec:	1805883a 	mov	r2,r3
    19f0:	dfc00217 	ldw	ra,8(sp)
    19f4:	dc400117 	ldw	r17,4(sp)
    19f8:	dc000017 	ldw	r16,0(sp)
    19fc:	dec00304 	addi	sp,sp,12
    1a00:	f800283a 	ret
    1a04:	80800017 	ldw	r2,0(r16)
    1a08:	103ff826 	beq	r2,zero,19ec <_sbrk_r+0x34>
    1a0c:	88800015 	stw	r2,0(r17)
    1a10:	1805883a 	mov	r2,r3
    1a14:	dfc00217 	ldw	ra,8(sp)
    1a18:	dc400117 	ldw	r17,4(sp)
    1a1c:	dc000017 	ldw	r16,0(sp)
    1a20:	dec00304 	addi	sp,sp,12
    1a24:	f800283a 	ret

00001a28 <__swsetup_r>:
    1a28:	00800034 	movhi	r2,0
    1a2c:	109dea04 	addi	r2,r2,30632
    1a30:	10c00017 	ldw	r3,0(r2)
    1a34:	defffd04 	addi	sp,sp,-12
    1a38:	dc400115 	stw	r17,4(sp)
    1a3c:	dc000015 	stw	r16,0(sp)
    1a40:	dfc00215 	stw	ra,8(sp)
    1a44:	2023883a 	mov	r17,r4
    1a48:	2821883a 	mov	r16,r5
    1a4c:	18000226 	beq	r3,zero,1a58 <__swsetup_r+0x30>
    1a50:	18800e17 	ldw	r2,56(r3)
    1a54:	10001f26 	beq	r2,zero,1ad4 <__swsetup_r+0xac>
    1a58:	8100030b 	ldhu	r4,12(r16)
    1a5c:	2080020c 	andi	r2,r4,8
    1a60:	10002826 	beq	r2,zero,1b04 <__swsetup_r+0xdc>
    1a64:	81400417 	ldw	r5,16(r16)
    1a68:	28001d26 	beq	r5,zero,1ae0 <__swsetup_r+0xb8>
    1a6c:	2080004c 	andi	r2,r4,1
    1a70:	1005003a 	cmpeq	r2,r2,zero
    1a74:	10000b26 	beq	r2,zero,1aa4 <__swsetup_r+0x7c>
    1a78:	2080008c 	andi	r2,r4,2
    1a7c:	10001226 	beq	r2,zero,1ac8 <__swsetup_r+0xa0>
    1a80:	0005883a 	mov	r2,zero
    1a84:	80800215 	stw	r2,8(r16)
    1a88:	28000b26 	beq	r5,zero,1ab8 <__swsetup_r+0x90>
    1a8c:	0005883a 	mov	r2,zero
    1a90:	dfc00217 	ldw	ra,8(sp)
    1a94:	dc400117 	ldw	r17,4(sp)
    1a98:	dc000017 	ldw	r16,0(sp)
    1a9c:	dec00304 	addi	sp,sp,12
    1aa0:	f800283a 	ret
    1aa4:	80800517 	ldw	r2,20(r16)
    1aa8:	80000215 	stw	zero,8(r16)
    1aac:	0085c83a 	sub	r2,zero,r2
    1ab0:	80800615 	stw	r2,24(r16)
    1ab4:	283ff51e 	bne	r5,zero,1a8c <__swsetup_r+0x64>
    1ab8:	2080200c 	andi	r2,r4,128
    1abc:	103ff326 	beq	r2,zero,1a8c <__swsetup_r+0x64>
    1ac0:	00bfffc4 	movi	r2,-1
    1ac4:	003ff206 	br	1a90 <__swsetup_r+0x68>
    1ac8:	80800517 	ldw	r2,20(r16)
    1acc:	80800215 	stw	r2,8(r16)
    1ad0:	003fed06 	br	1a88 <__swsetup_r+0x60>
    1ad4:	1809883a 	mov	r4,r3
    1ad8:	0001dfc0 	call	1dfc <__sinit>
    1adc:	003fde06 	br	1a58 <__swsetup_r+0x30>
    1ae0:	20c0a00c 	andi	r3,r4,640
    1ae4:	00808004 	movi	r2,512
    1ae8:	18bfe026 	beq	r3,r2,1a6c <__swsetup_r+0x44>
    1aec:	8809883a 	mov	r4,r17
    1af0:	800b883a 	mov	r5,r16
    1af4:	00026480 	call	2648 <__smakebuf_r>
    1af8:	8100030b 	ldhu	r4,12(r16)
    1afc:	81400417 	ldw	r5,16(r16)
    1b00:	003fda06 	br	1a6c <__swsetup_r+0x44>
    1b04:	2080040c 	andi	r2,r4,16
    1b08:	103fed26 	beq	r2,zero,1ac0 <__swsetup_r+0x98>
    1b0c:	2080010c 	andi	r2,r4,4
    1b10:	10001226 	beq	r2,zero,1b5c <__swsetup_r+0x134>
    1b14:	81400c17 	ldw	r5,48(r16)
    1b18:	28000526 	beq	r5,zero,1b30 <__swsetup_r+0x108>
    1b1c:	80801004 	addi	r2,r16,64
    1b20:	28800226 	beq	r5,r2,1b2c <__swsetup_r+0x104>
    1b24:	8809883a 	mov	r4,r17
    1b28:	00021b40 	call	21b4 <_free_r>
    1b2c:	80000c15 	stw	zero,48(r16)
    1b30:	8080030b 	ldhu	r2,12(r16)
    1b34:	81400417 	ldw	r5,16(r16)
    1b38:	80000115 	stw	zero,4(r16)
    1b3c:	10bff6cc 	andi	r2,r2,65499
    1b40:	8080030d 	sth	r2,12(r16)
    1b44:	81400015 	stw	r5,0(r16)
    1b48:	8080030b 	ldhu	r2,12(r16)
    1b4c:	10800214 	ori	r2,r2,8
    1b50:	113fffcc 	andi	r4,r2,65535
    1b54:	8080030d 	sth	r2,12(r16)
    1b58:	003fc306 	br	1a68 <__swsetup_r+0x40>
    1b5c:	81400417 	ldw	r5,16(r16)
    1b60:	003ff906 	br	1b48 <__swsetup_r+0x120>

00001b64 <_fflush_r>:
    1b64:	defffb04 	addi	sp,sp,-20
    1b68:	dcc00315 	stw	r19,12(sp)
    1b6c:	dc800215 	stw	r18,8(sp)
    1b70:	dfc00415 	stw	ra,16(sp)
    1b74:	dc400115 	stw	r17,4(sp)
    1b78:	dc000015 	stw	r16,0(sp)
    1b7c:	2027883a 	mov	r19,r4
    1b80:	2825883a 	mov	r18,r5
    1b84:	20000226 	beq	r4,zero,1b90 <_fflush_r+0x2c>
    1b88:	20800e17 	ldw	r2,56(r4)
    1b8c:	10005626 	beq	r2,zero,1ce8 <_fflush_r+0x184>
    1b90:	9100030b 	ldhu	r4,12(r18)
    1b94:	20ffffcc 	andi	r3,r4,65535
    1b98:	18e0001c 	xori	r3,r3,32768
    1b9c:	18e00004 	addi	r3,r3,-32768
    1ba0:	1880020c 	andi	r2,r3,8
    1ba4:	1000261e 	bne	r2,zero,1c40 <_fflush_r+0xdc>
    1ba8:	90c00117 	ldw	r3,4(r18)
    1bac:	20820014 	ori	r2,r4,2048
    1bb0:	9080030d 	sth	r2,12(r18)
    1bb4:	1009883a 	mov	r4,r2
    1bb8:	00c0400e 	bge	zero,r3,1cbc <_fflush_r+0x158>
    1bbc:	92000a17 	ldw	r8,40(r18)
    1bc0:	40004026 	beq	r8,zero,1cc4 <_fflush_r+0x160>
    1bc4:	2084000c 	andi	r2,r4,4096
    1bc8:	10005326 	beq	r2,zero,1d18 <_fflush_r+0x1b4>
    1bcc:	94001417 	ldw	r16,80(r18)
    1bd0:	9080030b 	ldhu	r2,12(r18)
    1bd4:	1080010c 	andi	r2,r2,4
    1bd8:	1000481e 	bne	r2,zero,1cfc <_fflush_r+0x198>
    1bdc:	91400717 	ldw	r5,28(r18)
    1be0:	9809883a 	mov	r4,r19
    1be4:	800d883a 	mov	r6,r16
    1be8:	000f883a 	mov	r7,zero
    1bec:	403ee83a 	callr	r8
    1bf0:	8080261e 	bne	r16,r2,1c8c <_fflush_r+0x128>
    1bf4:	9080030b 	ldhu	r2,12(r18)
    1bf8:	91000417 	ldw	r4,16(r18)
    1bfc:	90000115 	stw	zero,4(r18)
    1c00:	10bdffcc 	andi	r2,r2,63487
    1c04:	10ffffcc 	andi	r3,r2,65535
    1c08:	18c4000c 	andi	r3,r3,4096
    1c0c:	9080030d 	sth	r2,12(r18)
    1c10:	91000015 	stw	r4,0(r18)
    1c14:	18002b26 	beq	r3,zero,1cc4 <_fflush_r+0x160>
    1c18:	0007883a 	mov	r3,zero
    1c1c:	1805883a 	mov	r2,r3
    1c20:	94001415 	stw	r16,80(r18)
    1c24:	dfc00417 	ldw	ra,16(sp)
    1c28:	dcc00317 	ldw	r19,12(sp)
    1c2c:	dc800217 	ldw	r18,8(sp)
    1c30:	dc400117 	ldw	r17,4(sp)
    1c34:	dc000017 	ldw	r16,0(sp)
    1c38:	dec00504 	addi	sp,sp,20
    1c3c:	f800283a 	ret
    1c40:	94400417 	ldw	r17,16(r18)
    1c44:	88001f26 	beq	r17,zero,1cc4 <_fflush_r+0x160>
    1c48:	90800017 	ldw	r2,0(r18)
    1c4c:	18c000cc 	andi	r3,r3,3
    1c50:	94400015 	stw	r17,0(r18)
    1c54:	1461c83a 	sub	r16,r2,r17
    1c58:	18002526 	beq	r3,zero,1cf0 <_fflush_r+0x18c>
    1c5c:	0005883a 	mov	r2,zero
    1c60:	90800215 	stw	r2,8(r18)
    1c64:	0400170e 	bge	zero,r16,1cc4 <_fflush_r+0x160>
    1c68:	90c00917 	ldw	r3,36(r18)
    1c6c:	91400717 	ldw	r5,28(r18)
    1c70:	880d883a 	mov	r6,r17
    1c74:	800f883a 	mov	r7,r16
    1c78:	9809883a 	mov	r4,r19
    1c7c:	183ee83a 	callr	r3
    1c80:	88a3883a 	add	r17,r17,r2
    1c84:	80a1c83a 	sub	r16,r16,r2
    1c88:	00bff616 	blt	zero,r2,1c64 <_fflush_r+0x100>
    1c8c:	9080030b 	ldhu	r2,12(r18)
    1c90:	00ffffc4 	movi	r3,-1
    1c94:	10801014 	ori	r2,r2,64
    1c98:	9080030d 	sth	r2,12(r18)
    1c9c:	1805883a 	mov	r2,r3
    1ca0:	dfc00417 	ldw	ra,16(sp)
    1ca4:	dcc00317 	ldw	r19,12(sp)
    1ca8:	dc800217 	ldw	r18,8(sp)
    1cac:	dc400117 	ldw	r17,4(sp)
    1cb0:	dc000017 	ldw	r16,0(sp)
    1cb4:	dec00504 	addi	sp,sp,20
    1cb8:	f800283a 	ret
    1cbc:	90800f17 	ldw	r2,60(r18)
    1cc0:	00bfbe16 	blt	zero,r2,1bbc <_fflush_r+0x58>
    1cc4:	0007883a 	mov	r3,zero
    1cc8:	1805883a 	mov	r2,r3
    1ccc:	dfc00417 	ldw	ra,16(sp)
    1cd0:	dcc00317 	ldw	r19,12(sp)
    1cd4:	dc800217 	ldw	r18,8(sp)
    1cd8:	dc400117 	ldw	r17,4(sp)
    1cdc:	dc000017 	ldw	r16,0(sp)
    1ce0:	dec00504 	addi	sp,sp,20
    1ce4:	f800283a 	ret
    1ce8:	0001dfc0 	call	1dfc <__sinit>
    1cec:	003fa806 	br	1b90 <_fflush_r+0x2c>
    1cf0:	90800517 	ldw	r2,20(r18)
    1cf4:	90800215 	stw	r2,8(r18)
    1cf8:	003fda06 	br	1c64 <_fflush_r+0x100>
    1cfc:	90800117 	ldw	r2,4(r18)
    1d00:	90c00c17 	ldw	r3,48(r18)
    1d04:	80a1c83a 	sub	r16,r16,r2
    1d08:	183fb426 	beq	r3,zero,1bdc <_fflush_r+0x78>
    1d0c:	90800f17 	ldw	r2,60(r18)
    1d10:	80a1c83a 	sub	r16,r16,r2
    1d14:	003fb106 	br	1bdc <_fflush_r+0x78>
    1d18:	91400717 	ldw	r5,28(r18)
    1d1c:	9809883a 	mov	r4,r19
    1d20:	000d883a 	mov	r6,zero
    1d24:	01c00044 	movi	r7,1
    1d28:	403ee83a 	callr	r8
    1d2c:	1021883a 	mov	r16,r2
    1d30:	00bfffc4 	movi	r2,-1
    1d34:	80800226 	beq	r16,r2,1d40 <_fflush_r+0x1dc>
    1d38:	92000a17 	ldw	r8,40(r18)
    1d3c:	003fa406 	br	1bd0 <_fflush_r+0x6c>
    1d40:	98c00017 	ldw	r3,0(r19)
    1d44:	00800744 	movi	r2,29
    1d48:	18bfde26 	beq	r3,r2,1cc4 <_fflush_r+0x160>
    1d4c:	9080030b 	ldhu	r2,12(r18)
    1d50:	8007883a 	mov	r3,r16
    1d54:	10801014 	ori	r2,r2,64
    1d58:	9080030d 	sth	r2,12(r18)
    1d5c:	003fcf06 	br	1c9c <_fflush_r+0x138>

00001d60 <fflush>:
    1d60:	01400034 	movhi	r5,0
    1d64:	2946d904 	addi	r5,r5,7012
    1d68:	2007883a 	mov	r3,r4
    1d6c:	20000526 	beq	r4,zero,1d84 <fflush+0x24>
    1d70:	00800034 	movhi	r2,0
    1d74:	109dea04 	addi	r2,r2,30632
    1d78:	11000017 	ldw	r4,0(r2)
    1d7c:	180b883a 	mov	r5,r3
    1d80:	0001b641 	jmpi	1b64 <_fflush_r>
    1d84:	00800034 	movhi	r2,0
    1d88:	109deb04 	addi	r2,r2,30636
    1d8c:	11000017 	ldw	r4,0(r2)
    1d90:	00024c81 	jmpi	24c8 <_fwalk_reent>

00001d94 <std>:
    1d94:	00800034 	movhi	r2,0
    1d98:	108a1d04 	addi	r2,r2,10356
    1d9c:	20800b15 	stw	r2,44(r4)
    1da0:	00800034 	movhi	r2,0
    1da4:	108a5804 	addi	r2,r2,10592
    1da8:	20800815 	stw	r2,32(r4)
    1dac:	00c00034 	movhi	r3,0
    1db0:	18ca3904 	addi	r3,r3,10468
    1db4:	00800034 	movhi	r2,0
    1db8:	108a1f04 	addi	r2,r2,10364
    1dbc:	2140030d 	sth	r5,12(r4)
    1dc0:	2180038d 	sth	r6,14(r4)
    1dc4:	20c00915 	stw	r3,36(r4)
    1dc8:	20800a15 	stw	r2,40(r4)
    1dcc:	20000015 	stw	zero,0(r4)
    1dd0:	20000115 	stw	zero,4(r4)
    1dd4:	20000215 	stw	zero,8(r4)
    1dd8:	20000415 	stw	zero,16(r4)
    1ddc:	20000515 	stw	zero,20(r4)
    1de0:	20000615 	stw	zero,24(r4)
    1de4:	21000715 	stw	r4,28(r4)
    1de8:	f800283a 	ret

00001dec <__sfp_lock_acquire>:
    1dec:	f800283a 	ret

00001df0 <__sfp_lock_release>:
    1df0:	f800283a 	ret

00001df4 <__sinit_lock_acquire>:
    1df4:	f800283a 	ret

00001df8 <__sinit_lock_release>:
    1df8:	f800283a 	ret

00001dfc <__sinit>:
    1dfc:	20800e17 	ldw	r2,56(r4)
    1e00:	defffd04 	addi	sp,sp,-12
    1e04:	dc400115 	stw	r17,4(sp)
    1e08:	dc000015 	stw	r16,0(sp)
    1e0c:	dfc00215 	stw	ra,8(sp)
    1e10:	04400044 	movi	r17,1
    1e14:	01400104 	movi	r5,4
    1e18:	000d883a 	mov	r6,zero
    1e1c:	2021883a 	mov	r16,r4
    1e20:	2200bb04 	addi	r8,r4,748
    1e24:	200f883a 	mov	r7,r4
    1e28:	10000526 	beq	r2,zero,1e40 <__sinit+0x44>
    1e2c:	dfc00217 	ldw	ra,8(sp)
    1e30:	dc400117 	ldw	r17,4(sp)
    1e34:	dc000017 	ldw	r16,0(sp)
    1e38:	dec00304 	addi	sp,sp,12
    1e3c:	f800283a 	ret
    1e40:	21000117 	ldw	r4,4(r4)
    1e44:	00800034 	movhi	r2,0
    1e48:	1087b804 	addi	r2,r2,7904
    1e4c:	00c000c4 	movi	r3,3
    1e50:	80800f15 	stw	r2,60(r16)
    1e54:	80c0b915 	stw	r3,740(r16)
    1e58:	8200ba15 	stw	r8,744(r16)
    1e5c:	84400e15 	stw	r17,56(r16)
    1e60:	8000b815 	stw	zero,736(r16)
    1e64:	0001d940 	call	1d94 <std>
    1e68:	81000217 	ldw	r4,8(r16)
    1e6c:	880d883a 	mov	r6,r17
    1e70:	800f883a 	mov	r7,r16
    1e74:	01400284 	movi	r5,10
    1e78:	0001d940 	call	1d94 <std>
    1e7c:	81000317 	ldw	r4,12(r16)
    1e80:	800f883a 	mov	r7,r16
    1e84:	01400484 	movi	r5,18
    1e88:	01800084 	movi	r6,2
    1e8c:	dfc00217 	ldw	ra,8(sp)
    1e90:	dc400117 	ldw	r17,4(sp)
    1e94:	dc000017 	ldw	r16,0(sp)
    1e98:	dec00304 	addi	sp,sp,12
    1e9c:	0001d941 	jmpi	1d94 <std>

00001ea0 <__fp_lock>:
    1ea0:	0005883a 	mov	r2,zero
    1ea4:	f800283a 	ret

00001ea8 <__fp_unlock>:
    1ea8:	0005883a 	mov	r2,zero
    1eac:	f800283a 	ret

00001eb0 <__fp_unlock_all>:
    1eb0:	00800034 	movhi	r2,0
    1eb4:	109dea04 	addi	r2,r2,30632
    1eb8:	11000017 	ldw	r4,0(r2)
    1ebc:	01400034 	movhi	r5,0
    1ec0:	2947aa04 	addi	r5,r5,7848
    1ec4:	00025901 	jmpi	2590 <_fwalk>

00001ec8 <__fp_lock_all>:
    1ec8:	00800034 	movhi	r2,0
    1ecc:	109dea04 	addi	r2,r2,30632
    1ed0:	11000017 	ldw	r4,0(r2)
    1ed4:	01400034 	movhi	r5,0
    1ed8:	2947a804 	addi	r5,r5,7840
    1edc:	00025901 	jmpi	2590 <_fwalk>

00001ee0 <_cleanup_r>:
    1ee0:	01400034 	movhi	r5,0
    1ee4:	294aee04 	addi	r5,r5,11192
    1ee8:	00025901 	jmpi	2590 <_fwalk>

00001eec <_cleanup>:
    1eec:	00800034 	movhi	r2,0
    1ef0:	109deb04 	addi	r2,r2,30636
    1ef4:	11000017 	ldw	r4,0(r2)
    1ef8:	0001ee01 	jmpi	1ee0 <_cleanup_r>

00001efc <__sfmoreglue>:
    1efc:	defffc04 	addi	sp,sp,-16
    1f00:	dc000015 	stw	r16,0(sp)
    1f04:	2821883a 	mov	r16,r5
    1f08:	dc400115 	stw	r17,4(sp)
    1f0c:	01401704 	movi	r5,92
    1f10:	2023883a 	mov	r17,r4
    1f14:	8009883a 	mov	r4,r16
    1f18:	dfc00315 	stw	ra,12(sp)
    1f1c:	dcc00215 	stw	r19,8(sp)
    1f20:	00004240 	call	424 <__mulsi3>
    1f24:	11400304 	addi	r5,r2,12
    1f28:	8809883a 	mov	r4,r17
    1f2c:	1027883a 	mov	r19,r2
    1f30:	0000a200 	call	a20 <_malloc_r>
    1f34:	10c00304 	addi	r3,r2,12
    1f38:	1023883a 	mov	r17,r2
    1f3c:	1809883a 	mov	r4,r3
    1f40:	980d883a 	mov	r6,r19
    1f44:	000b883a 	mov	r5,zero
    1f48:	10000b26 	beq	r2,zero,1f78 <__sfmoreglue+0x7c>
    1f4c:	14000115 	stw	r16,4(r2)
    1f50:	10c00215 	stw	r3,8(r2)
    1f54:	10000015 	stw	zero,0(r2)
    1f58:	00027dc0 	call	27dc <memset>
    1f5c:	8805883a 	mov	r2,r17
    1f60:	dfc00317 	ldw	ra,12(sp)
    1f64:	dcc00217 	ldw	r19,8(sp)
    1f68:	dc400117 	ldw	r17,4(sp)
    1f6c:	dc000017 	ldw	r16,0(sp)
    1f70:	dec00404 	addi	sp,sp,16
    1f74:	f800283a 	ret
    1f78:	0023883a 	mov	r17,zero
    1f7c:	8805883a 	mov	r2,r17
    1f80:	dfc00317 	ldw	ra,12(sp)
    1f84:	dcc00217 	ldw	r19,8(sp)
    1f88:	dc400117 	ldw	r17,4(sp)
    1f8c:	dc000017 	ldw	r16,0(sp)
    1f90:	dec00404 	addi	sp,sp,16
    1f94:	f800283a 	ret

00001f98 <__sfp>:
    1f98:	defffd04 	addi	sp,sp,-12
    1f9c:	00800034 	movhi	r2,0
    1fa0:	109deb04 	addi	r2,r2,30636
    1fa4:	dc000015 	stw	r16,0(sp)
    1fa8:	14000017 	ldw	r16,0(r2)
    1fac:	dc400115 	stw	r17,4(sp)
    1fb0:	dfc00215 	stw	ra,8(sp)
    1fb4:	80800e17 	ldw	r2,56(r16)
    1fb8:	2023883a 	mov	r17,r4
    1fbc:	10002626 	beq	r2,zero,2058 <__sfp+0xc0>
    1fc0:	8400b804 	addi	r16,r16,736
    1fc4:	80800117 	ldw	r2,4(r16)
    1fc8:	81000217 	ldw	r4,8(r16)
    1fcc:	10ffffc4 	addi	r3,r2,-1
    1fd0:	18000916 	blt	r3,zero,1ff8 <__sfp+0x60>
    1fd4:	2080030f 	ldh	r2,12(r4)
    1fd8:	10000b26 	beq	r2,zero,2008 <__sfp+0x70>
    1fdc:	017fffc4 	movi	r5,-1
    1fe0:	00000206 	br	1fec <__sfp+0x54>
    1fe4:	2080030f 	ldh	r2,12(r4)
    1fe8:	10000726 	beq	r2,zero,2008 <__sfp+0x70>
    1fec:	18ffffc4 	addi	r3,r3,-1
    1ff0:	21001704 	addi	r4,r4,92
    1ff4:	197ffb1e 	bne	r3,r5,1fe4 <__sfp+0x4c>
    1ff8:	80800017 	ldw	r2,0(r16)
    1ffc:	10001926 	beq	r2,zero,2064 <__sfp+0xcc>
    2000:	1021883a 	mov	r16,r2
    2004:	003fef06 	br	1fc4 <__sfp+0x2c>
    2008:	00bfffc4 	movi	r2,-1
    200c:	00c00044 	movi	r3,1
    2010:	2080038d 	sth	r2,14(r4)
    2014:	20c0030d 	sth	r3,12(r4)
    2018:	20000015 	stw	zero,0(r4)
    201c:	20000215 	stw	zero,8(r4)
    2020:	20000115 	stw	zero,4(r4)
    2024:	20000415 	stw	zero,16(r4)
    2028:	20000515 	stw	zero,20(r4)
    202c:	20000615 	stw	zero,24(r4)
    2030:	20000c15 	stw	zero,48(r4)
    2034:	20000d15 	stw	zero,52(r4)
    2038:	20001115 	stw	zero,68(r4)
    203c:	20001215 	stw	zero,72(r4)
    2040:	2005883a 	mov	r2,r4
    2044:	dfc00217 	ldw	ra,8(sp)
    2048:	dc400117 	ldw	r17,4(sp)
    204c:	dc000017 	ldw	r16,0(sp)
    2050:	dec00304 	addi	sp,sp,12
    2054:	f800283a 	ret
    2058:	8009883a 	mov	r4,r16
    205c:	0001dfc0 	call	1dfc <__sinit>
    2060:	003fd706 	br	1fc0 <__sfp+0x28>
    2064:	8809883a 	mov	r4,r17
    2068:	01400104 	movi	r5,4
    206c:	0001efc0 	call	1efc <__sfmoreglue>
    2070:	80800015 	stw	r2,0(r16)
    2074:	103fe21e 	bne	r2,zero,2000 <__sfp+0x68>
    2078:	00800304 	movi	r2,12
    207c:	0009883a 	mov	r4,zero
    2080:	88800015 	stw	r2,0(r17)
    2084:	003fee06 	br	2040 <__sfp+0xa8>

00002088 <_malloc_trim_r>:
    2088:	defffb04 	addi	sp,sp,-20
    208c:	dcc00315 	stw	r19,12(sp)
    2090:	04c00034 	movhi	r19,0
    2094:	9cd80304 	addi	r19,r19,24588
    2098:	dc800215 	stw	r18,8(sp)
    209c:	dc400115 	stw	r17,4(sp)
    20a0:	dc000015 	stw	r16,0(sp)
    20a4:	2823883a 	mov	r17,r5
    20a8:	2025883a 	mov	r18,r4
    20ac:	dfc00415 	stw	ra,16(sp)
    20b0:	00035880 	call	3588 <__malloc_lock>
    20b4:	98800217 	ldw	r2,8(r19)
    20b8:	9009883a 	mov	r4,r18
    20bc:	000b883a 	mov	r5,zero
    20c0:	10c00117 	ldw	r3,4(r2)
    20c4:	00bfff04 	movi	r2,-4
    20c8:	18a0703a 	and	r16,r3,r2
    20cc:	8463c83a 	sub	r17,r16,r17
    20d0:	8c43fbc4 	addi	r17,r17,4079
    20d4:	8822d33a 	srli	r17,r17,12
    20d8:	0083ffc4 	movi	r2,4095
    20dc:	8c7fffc4 	addi	r17,r17,-1
    20e0:	8822933a 	slli	r17,r17,12
    20e4:	1440060e 	bge	r2,r17,2100 <_malloc_trim_r+0x78>
    20e8:	00019b80 	call	19b8 <_sbrk_r>
    20ec:	98c00217 	ldw	r3,8(r19)
    20f0:	9009883a 	mov	r4,r18
    20f4:	044bc83a 	sub	r5,zero,r17
    20f8:	80c7883a 	add	r3,r16,r3
    20fc:	10c00926 	beq	r2,r3,2124 <_malloc_trim_r+0x9c>
    2100:	00035a80 	call	35a8 <__malloc_unlock>
    2104:	0005883a 	mov	r2,zero
    2108:	dfc00417 	ldw	ra,16(sp)
    210c:	dcc00317 	ldw	r19,12(sp)
    2110:	dc800217 	ldw	r18,8(sp)
    2114:	dc400117 	ldw	r17,4(sp)
    2118:	dc000017 	ldw	r16,0(sp)
    211c:	dec00504 	addi	sp,sp,20
    2120:	f800283a 	ret
    2124:	9009883a 	mov	r4,r18
    2128:	00019b80 	call	19b8 <_sbrk_r>
    212c:	844dc83a 	sub	r6,r16,r17
    2130:	00ffffc4 	movi	r3,-1
    2134:	9009883a 	mov	r4,r18
    2138:	000b883a 	mov	r5,zero
    213c:	01c00074 	movhi	r7,1
    2140:	39e4fd04 	addi	r7,r7,-27660
    2144:	31800054 	ori	r6,r6,1
    2148:	10c00926 	beq	r2,r3,2170 <_malloc_trim_r+0xe8>
    214c:	38800017 	ldw	r2,0(r7)
    2150:	98c00217 	ldw	r3,8(r19)
    2154:	9009883a 	mov	r4,r18
    2158:	1445c83a 	sub	r2,r2,r17
    215c:	38800015 	stw	r2,0(r7)
    2160:	19800115 	stw	r6,4(r3)
    2164:	00035a80 	call	35a8 <__malloc_unlock>
    2168:	00800044 	movi	r2,1
    216c:	003fe606 	br	2108 <_malloc_trim_r+0x80>
    2170:	00019b80 	call	19b8 <_sbrk_r>
    2174:	99800217 	ldw	r6,8(r19)
    2178:	100f883a 	mov	r7,r2
    217c:	9009883a 	mov	r4,r18
    2180:	1187c83a 	sub	r3,r2,r6
    2184:	008003c4 	movi	r2,15
    2188:	19400054 	ori	r5,r3,1
    218c:	10ffdc0e 	bge	r2,r3,2100 <_malloc_trim_r+0x78>
    2190:	00800034 	movhi	r2,0
    2194:	109ded04 	addi	r2,r2,30644
    2198:	10c00017 	ldw	r3,0(r2)
    219c:	00800074 	movhi	r2,1
    21a0:	10a4fd04 	addi	r2,r2,-27660
    21a4:	31400115 	stw	r5,4(r6)
    21a8:	38c7c83a 	sub	r3,r7,r3
    21ac:	10c00015 	stw	r3,0(r2)
    21b0:	003fd306 	br	2100 <_malloc_trim_r+0x78>

000021b4 <_free_r>:
    21b4:	defffd04 	addi	sp,sp,-12
    21b8:	dc400115 	stw	r17,4(sp)
    21bc:	dc000015 	stw	r16,0(sp)
    21c0:	dfc00215 	stw	ra,8(sp)
    21c4:	2821883a 	mov	r16,r5
    21c8:	2023883a 	mov	r17,r4
    21cc:	28005a26 	beq	r5,zero,2338 <_free_r+0x184>
    21d0:	00035880 	call	3588 <__malloc_lock>
    21d4:	823ffe04 	addi	r8,r16,-8
    21d8:	41400117 	ldw	r5,4(r8)
    21dc:	00bfff84 	movi	r2,-2
    21e0:	02800034 	movhi	r10,0
    21e4:	52980304 	addi	r10,r10,24588
    21e8:	288e703a 	and	r7,r5,r2
    21ec:	41cd883a 	add	r6,r8,r7
    21f0:	30c00117 	ldw	r3,4(r6)
    21f4:	51000217 	ldw	r4,8(r10)
    21f8:	00bfff04 	movi	r2,-4
    21fc:	1892703a 	and	r9,r3,r2
    2200:	5017883a 	mov	r11,r10
    2204:	31006726 	beq	r6,r4,23a4 <_free_r+0x1f0>
    2208:	2880004c 	andi	r2,r5,1
    220c:	1005003a 	cmpeq	r2,r2,zero
    2210:	32400115 	stw	r9,4(r6)
    2214:	10001a1e 	bne	r2,zero,2280 <_free_r+0xcc>
    2218:	000b883a 	mov	r5,zero
    221c:	3247883a 	add	r3,r6,r9
    2220:	18800117 	ldw	r2,4(r3)
    2224:	1080004c 	andi	r2,r2,1
    2228:	1000231e 	bne	r2,zero,22b8 <_free_r+0x104>
    222c:	280ac03a 	cmpne	r5,r5,zero
    2230:	3a4f883a 	add	r7,r7,r9
    2234:	2800451e 	bne	r5,zero,234c <_free_r+0x198>
    2238:	31000217 	ldw	r4,8(r6)
    223c:	00800034 	movhi	r2,0
    2240:	10980504 	addi	r2,r2,24596
    2244:	20807b26 	beq	r4,r2,2434 <_free_r+0x280>
    2248:	30800317 	ldw	r2,12(r6)
    224c:	3a07883a 	add	r3,r7,r8
    2250:	19c00015 	stw	r7,0(r3)
    2254:	11000215 	stw	r4,8(r2)
    2258:	20800315 	stw	r2,12(r4)
    225c:	38800054 	ori	r2,r7,1
    2260:	40800115 	stw	r2,4(r8)
    2264:	28001a26 	beq	r5,zero,22d0 <_free_r+0x11c>
    2268:	8809883a 	mov	r4,r17
    226c:	dfc00217 	ldw	ra,8(sp)
    2270:	dc400117 	ldw	r17,4(sp)
    2274:	dc000017 	ldw	r16,0(sp)
    2278:	dec00304 	addi	sp,sp,12
    227c:	00035a81 	jmpi	35a8 <__malloc_unlock>
    2280:	80bffe17 	ldw	r2,-8(r16)
    2284:	50c00204 	addi	r3,r10,8
    2288:	4091c83a 	sub	r8,r8,r2
    228c:	41000217 	ldw	r4,8(r8)
    2290:	388f883a 	add	r7,r7,r2
    2294:	20c06126 	beq	r4,r3,241c <_free_r+0x268>
    2298:	40800317 	ldw	r2,12(r8)
    229c:	3247883a 	add	r3,r6,r9
    22a0:	000b883a 	mov	r5,zero
    22a4:	11000215 	stw	r4,8(r2)
    22a8:	20800315 	stw	r2,12(r4)
    22ac:	18800117 	ldw	r2,4(r3)
    22b0:	1080004c 	andi	r2,r2,1
    22b4:	103fdd26 	beq	r2,zero,222c <_free_r+0x78>
    22b8:	38800054 	ori	r2,r7,1
    22bc:	3a07883a 	add	r3,r7,r8
    22c0:	280ac03a 	cmpne	r5,r5,zero
    22c4:	40800115 	stw	r2,4(r8)
    22c8:	19c00015 	stw	r7,0(r3)
    22cc:	283fe61e 	bne	r5,zero,2268 <_free_r+0xb4>
    22d0:	00807fc4 	movi	r2,511
    22d4:	11c01f2e 	bgeu	r2,r7,2354 <_free_r+0x1a0>
    22d8:	3806d27a 	srli	r3,r7,9
    22dc:	1800481e 	bne	r3,zero,2400 <_free_r+0x24c>
    22e0:	3804d0fa 	srli	r2,r7,3
    22e4:	100690fa 	slli	r3,r2,3
    22e8:	1acd883a 	add	r6,r3,r11
    22ec:	31400217 	ldw	r5,8(r6)
    22f0:	31405926 	beq	r6,r5,2458 <_free_r+0x2a4>
    22f4:	28800117 	ldw	r2,4(r5)
    22f8:	00ffff04 	movi	r3,-4
    22fc:	10c4703a 	and	r2,r2,r3
    2300:	3880022e 	bgeu	r7,r2,230c <_free_r+0x158>
    2304:	29400217 	ldw	r5,8(r5)
    2308:	317ffa1e 	bne	r6,r5,22f4 <_free_r+0x140>
    230c:	29800317 	ldw	r6,12(r5)
    2310:	41800315 	stw	r6,12(r8)
    2314:	41400215 	stw	r5,8(r8)
    2318:	8809883a 	mov	r4,r17
    231c:	2a000315 	stw	r8,12(r5)
    2320:	32000215 	stw	r8,8(r6)
    2324:	dfc00217 	ldw	ra,8(sp)
    2328:	dc400117 	ldw	r17,4(sp)
    232c:	dc000017 	ldw	r16,0(sp)
    2330:	dec00304 	addi	sp,sp,12
    2334:	00035a81 	jmpi	35a8 <__malloc_unlock>
    2338:	dfc00217 	ldw	ra,8(sp)
    233c:	dc400117 	ldw	r17,4(sp)
    2340:	dc000017 	ldw	r16,0(sp)
    2344:	dec00304 	addi	sp,sp,12
    2348:	f800283a 	ret
    234c:	31000217 	ldw	r4,8(r6)
    2350:	003fbd06 	br	2248 <_free_r+0x94>
    2354:	3806d0fa 	srli	r3,r7,3
    2358:	00800044 	movi	r2,1
    235c:	51400117 	ldw	r5,4(r10)
    2360:	180890fa 	slli	r4,r3,3
    2364:	1807d0ba 	srai	r3,r3,2
    2368:	22c9883a 	add	r4,r4,r11
    236c:	21800217 	ldw	r6,8(r4)
    2370:	10c4983a 	sll	r2,r2,r3
    2374:	41000315 	stw	r4,12(r8)
    2378:	41800215 	stw	r6,8(r8)
    237c:	288ab03a 	or	r5,r5,r2
    2380:	22000215 	stw	r8,8(r4)
    2384:	8809883a 	mov	r4,r17
    2388:	51400115 	stw	r5,4(r10)
    238c:	32000315 	stw	r8,12(r6)
    2390:	dfc00217 	ldw	ra,8(sp)
    2394:	dc400117 	ldw	r17,4(sp)
    2398:	dc000017 	ldw	r16,0(sp)
    239c:	dec00304 	addi	sp,sp,12
    23a0:	00035a81 	jmpi	35a8 <__malloc_unlock>
    23a4:	2880004c 	andi	r2,r5,1
    23a8:	3a4d883a 	add	r6,r7,r9
    23ac:	1000071e 	bne	r2,zero,23cc <_free_r+0x218>
    23b0:	80bffe17 	ldw	r2,-8(r16)
    23b4:	4091c83a 	sub	r8,r8,r2
    23b8:	41000317 	ldw	r4,12(r8)
    23bc:	40c00217 	ldw	r3,8(r8)
    23c0:	308d883a 	add	r6,r6,r2
    23c4:	20c00215 	stw	r3,8(r4)
    23c8:	19000315 	stw	r4,12(r3)
    23cc:	00800034 	movhi	r2,0
    23d0:	109dec04 	addi	r2,r2,30640
    23d4:	11000017 	ldw	r4,0(r2)
    23d8:	30c00054 	ori	r3,r6,1
    23dc:	52000215 	stw	r8,8(r10)
    23e0:	40c00115 	stw	r3,4(r8)
    23e4:	313fa036 	bltu	r6,r4,2268 <_free_r+0xb4>
    23e8:	00800074 	movhi	r2,1
    23ec:	10a4ed04 	addi	r2,r2,-27724
    23f0:	11400017 	ldw	r5,0(r2)
    23f4:	8809883a 	mov	r4,r17
    23f8:	00020880 	call	2088 <_malloc_trim_r>
    23fc:	003f9a06 	br	2268 <_free_r+0xb4>
    2400:	00800104 	movi	r2,4
    2404:	10c0072e 	bgeu	r2,r3,2424 <_free_r+0x270>
    2408:	00800504 	movi	r2,20
    240c:	10c01936 	bltu	r2,r3,2474 <_free_r+0x2c0>
    2410:	188016c4 	addi	r2,r3,91
    2414:	100690fa 	slli	r3,r2,3
    2418:	003fb306 	br	22e8 <_free_r+0x134>
    241c:	01400044 	movi	r5,1
    2420:	003f7e06 	br	221c <_free_r+0x68>
    2424:	3804d1ba 	srli	r2,r7,6
    2428:	10800e04 	addi	r2,r2,56
    242c:	100690fa 	slli	r3,r2,3
    2430:	003fad06 	br	22e8 <_free_r+0x134>
    2434:	22000315 	stw	r8,12(r4)
    2438:	22000215 	stw	r8,8(r4)
    243c:	3a05883a 	add	r2,r7,r8
    2440:	38c00054 	ori	r3,r7,1
    2444:	11c00015 	stw	r7,0(r2)
    2448:	41000215 	stw	r4,8(r8)
    244c:	40c00115 	stw	r3,4(r8)
    2450:	41000315 	stw	r4,12(r8)
    2454:	003f8406 	br	2268 <_free_r+0xb4>
    2458:	1005d0ba 	srai	r2,r2,2
    245c:	00c00044 	movi	r3,1
    2460:	51000117 	ldw	r4,4(r10)
    2464:	1886983a 	sll	r3,r3,r2
    2468:	20c8b03a 	or	r4,r4,r3
    246c:	51000115 	stw	r4,4(r10)
    2470:	003fa706 	br	2310 <_free_r+0x15c>
    2474:	00801504 	movi	r2,84
    2478:	10c00436 	bltu	r2,r3,248c <_free_r+0x2d8>
    247c:	3804d33a 	srli	r2,r7,12
    2480:	10801b84 	addi	r2,r2,110
    2484:	100690fa 	slli	r3,r2,3
    2488:	003f9706 	br	22e8 <_free_r+0x134>
    248c:	00805504 	movi	r2,340
    2490:	10c00436 	bltu	r2,r3,24a4 <_free_r+0x2f0>
    2494:	3804d3fa 	srli	r2,r7,15
    2498:	10801dc4 	addi	r2,r2,119
    249c:	100690fa 	slli	r3,r2,3
    24a0:	003f9106 	br	22e8 <_free_r+0x134>
    24a4:	00815504 	movi	r2,1364
    24a8:	10c0032e 	bgeu	r2,r3,24b8 <_free_r+0x304>
    24ac:	00801f84 	movi	r2,126
    24b0:	00c0fc04 	movi	r3,1008
    24b4:	003f8c06 	br	22e8 <_free_r+0x134>
    24b8:	3804d4ba 	srli	r2,r7,18
    24bc:	10801f04 	addi	r2,r2,124
    24c0:	100690fa 	slli	r3,r2,3
    24c4:	003f8806 	br	22e8 <_free_r+0x134>

000024c8 <_fwalk_reent>:
    24c8:	defff704 	addi	sp,sp,-36
    24cc:	dcc00315 	stw	r19,12(sp)
    24d0:	24c0b804 	addi	r19,r4,736
    24d4:	dd800615 	stw	r22,24(sp)
    24d8:	dd400515 	stw	r21,20(sp)
    24dc:	dfc00815 	stw	ra,32(sp)
    24e0:	ddc00715 	stw	r23,28(sp)
    24e4:	dd000415 	stw	r20,16(sp)
    24e8:	dc800215 	stw	r18,8(sp)
    24ec:	dc400115 	stw	r17,4(sp)
    24f0:	dc000015 	stw	r16,0(sp)
    24f4:	202b883a 	mov	r21,r4
    24f8:	282d883a 	mov	r22,r5
    24fc:	0001dec0 	call	1dec <__sfp_lock_acquire>
    2500:	98002126 	beq	r19,zero,2588 <_fwalk_reent+0xc0>
    2504:	002f883a 	mov	r23,zero
    2508:	9c800117 	ldw	r18,4(r19)
    250c:	9c000217 	ldw	r16,8(r19)
    2510:	90bfffc4 	addi	r2,r18,-1
    2514:	10000d16 	blt	r2,zero,254c <_fwalk_reent+0x84>
    2518:	0023883a 	mov	r17,zero
    251c:	053fffc4 	movi	r20,-1
    2520:	8080030f 	ldh	r2,12(r16)
    2524:	8c400044 	addi	r17,r17,1
    2528:	10000626 	beq	r2,zero,2544 <_fwalk_reent+0x7c>
    252c:	8080038f 	ldh	r2,14(r16)
    2530:	800b883a 	mov	r5,r16
    2534:	a809883a 	mov	r4,r21
    2538:	15000226 	beq	r2,r20,2544 <_fwalk_reent+0x7c>
    253c:	b03ee83a 	callr	r22
    2540:	b8aeb03a 	or	r23,r23,r2
    2544:	84001704 	addi	r16,r16,92
    2548:	947ff51e 	bne	r18,r17,2520 <_fwalk_reent+0x58>
    254c:	9cc00017 	ldw	r19,0(r19)
    2550:	983fed1e 	bne	r19,zero,2508 <_fwalk_reent+0x40>
    2554:	0001df00 	call	1df0 <__sfp_lock_release>
    2558:	b805883a 	mov	r2,r23
    255c:	dfc00817 	ldw	ra,32(sp)
    2560:	ddc00717 	ldw	r23,28(sp)
    2564:	dd800617 	ldw	r22,24(sp)
    2568:	dd400517 	ldw	r21,20(sp)
    256c:	dd000417 	ldw	r20,16(sp)
    2570:	dcc00317 	ldw	r19,12(sp)
    2574:	dc800217 	ldw	r18,8(sp)
    2578:	dc400117 	ldw	r17,4(sp)
    257c:	dc000017 	ldw	r16,0(sp)
    2580:	dec00904 	addi	sp,sp,36
    2584:	f800283a 	ret
    2588:	002f883a 	mov	r23,zero
    258c:	003ff106 	br	2554 <_fwalk_reent+0x8c>

00002590 <_fwalk>:
    2590:	defff804 	addi	sp,sp,-32
    2594:	dcc00315 	stw	r19,12(sp)
    2598:	24c0b804 	addi	r19,r4,736
    259c:	dd400515 	stw	r21,20(sp)
    25a0:	dfc00715 	stw	ra,28(sp)
    25a4:	dd800615 	stw	r22,24(sp)
    25a8:	dd000415 	stw	r20,16(sp)
    25ac:	dc800215 	stw	r18,8(sp)
    25b0:	dc400115 	stw	r17,4(sp)
    25b4:	dc000015 	stw	r16,0(sp)
    25b8:	282b883a 	mov	r21,r5
    25bc:	0001dec0 	call	1dec <__sfp_lock_acquire>
    25c0:	98001f26 	beq	r19,zero,2640 <_fwalk+0xb0>
    25c4:	002d883a 	mov	r22,zero
    25c8:	9c800117 	ldw	r18,4(r19)
    25cc:	9c000217 	ldw	r16,8(r19)
    25d0:	90bfffc4 	addi	r2,r18,-1
    25d4:	10000c16 	blt	r2,zero,2608 <_fwalk+0x78>
    25d8:	0023883a 	mov	r17,zero
    25dc:	053fffc4 	movi	r20,-1
    25e0:	8080030f 	ldh	r2,12(r16)
    25e4:	8c400044 	addi	r17,r17,1
    25e8:	10000526 	beq	r2,zero,2600 <_fwalk+0x70>
    25ec:	8080038f 	ldh	r2,14(r16)
    25f0:	8009883a 	mov	r4,r16
    25f4:	15000226 	beq	r2,r20,2600 <_fwalk+0x70>
    25f8:	a83ee83a 	callr	r21
    25fc:	b0acb03a 	or	r22,r22,r2
    2600:	84001704 	addi	r16,r16,92
    2604:	947ff61e 	bne	r18,r17,25e0 <_fwalk+0x50>
    2608:	9cc00017 	ldw	r19,0(r19)
    260c:	983fee1e 	bne	r19,zero,25c8 <_fwalk+0x38>
    2610:	0001df00 	call	1df0 <__sfp_lock_release>
    2614:	b005883a 	mov	r2,r22
    2618:	dfc00717 	ldw	ra,28(sp)
    261c:	dd800617 	ldw	r22,24(sp)
    2620:	dd400517 	ldw	r21,20(sp)
    2624:	dd000417 	ldw	r20,16(sp)
    2628:	dcc00317 	ldw	r19,12(sp)
    262c:	dc800217 	ldw	r18,8(sp)
    2630:	dc400117 	ldw	r17,4(sp)
    2634:	dc000017 	ldw	r16,0(sp)
    2638:	dec00804 	addi	sp,sp,32
    263c:	f800283a 	ret
    2640:	002d883a 	mov	r22,zero
    2644:	003ff206 	br	2610 <_fwalk+0x80>

00002648 <__smakebuf_r>:
    2648:	2880030b 	ldhu	r2,12(r5)
    264c:	deffed04 	addi	sp,sp,-76
    2650:	dc401015 	stw	r17,64(sp)
    2654:	1080008c 	andi	r2,r2,2
    2658:	dc000f15 	stw	r16,60(sp)
    265c:	dfc01215 	stw	ra,72(sp)
    2660:	dc801115 	stw	r18,68(sp)
    2664:	2821883a 	mov	r16,r5
    2668:	2023883a 	mov	r17,r4
    266c:	10000b26 	beq	r2,zero,269c <__smakebuf_r+0x54>
    2670:	28c010c4 	addi	r3,r5,67
    2674:	00800044 	movi	r2,1
    2678:	28800515 	stw	r2,20(r5)
    267c:	28c00415 	stw	r3,16(r5)
    2680:	28c00015 	stw	r3,0(r5)
    2684:	dfc01217 	ldw	ra,72(sp)
    2688:	dc801117 	ldw	r18,68(sp)
    268c:	dc401017 	ldw	r17,64(sp)
    2690:	dc000f17 	ldw	r16,60(sp)
    2694:	dec01304 	addi	sp,sp,76
    2698:	f800283a 	ret
    269c:	2940038f 	ldh	r5,14(r5)
    26a0:	28002116 	blt	r5,zero,2728 <__smakebuf_r+0xe0>
    26a4:	d80d883a 	mov	r6,sp
    26a8:	0002bcc0 	call	2bcc <_fstat_r>
    26ac:	10001e16 	blt	r2,zero,2728 <__smakebuf_r+0xe0>
    26b0:	d8800117 	ldw	r2,4(sp)
    26b4:	00e00014 	movui	r3,32768
    26b8:	113c000c 	andi	r4,r2,61440
    26bc:	20c03126 	beq	r4,r3,2784 <__smakebuf_r+0x13c>
    26c0:	8080030b 	ldhu	r2,12(r16)
    26c4:	00c80004 	movi	r3,8192
    26c8:	10820014 	ori	r2,r2,2048
    26cc:	8080030d 	sth	r2,12(r16)
    26d0:	20c01e26 	beq	r4,r3,274c <__smakebuf_r+0x104>
    26d4:	04810004 	movi	r18,1024
    26d8:	8809883a 	mov	r4,r17
    26dc:	900b883a 	mov	r5,r18
    26e0:	0000a200 	call	a20 <_malloc_r>
    26e4:	1009883a 	mov	r4,r2
    26e8:	10003126 	beq	r2,zero,27b0 <__smakebuf_r+0x168>
    26ec:	80c0030b 	ldhu	r3,12(r16)
    26f0:	00800034 	movhi	r2,0
    26f4:	1087b804 	addi	r2,r2,7904
    26f8:	88800f15 	stw	r2,60(r17)
    26fc:	18c02014 	ori	r3,r3,128
    2700:	84800515 	stw	r18,20(r16)
    2704:	80c0030d 	sth	r3,12(r16)
    2708:	81000415 	stw	r4,16(r16)
    270c:	81000015 	stw	r4,0(r16)
    2710:	dfc01217 	ldw	ra,72(sp)
    2714:	dc801117 	ldw	r18,68(sp)
    2718:	dc401017 	ldw	r17,64(sp)
    271c:	dc000f17 	ldw	r16,60(sp)
    2720:	dec01304 	addi	sp,sp,76
    2724:	f800283a 	ret
    2728:	80c0030b 	ldhu	r3,12(r16)
    272c:	1880200c 	andi	r2,r3,128
    2730:	10000426 	beq	r2,zero,2744 <__smakebuf_r+0xfc>
    2734:	04801004 	movi	r18,64
    2738:	18820014 	ori	r2,r3,2048
    273c:	8080030d 	sth	r2,12(r16)
    2740:	003fe506 	br	26d8 <__smakebuf_r+0x90>
    2744:	04810004 	movi	r18,1024
    2748:	003ffb06 	br	2738 <__smakebuf_r+0xf0>
    274c:	8140038f 	ldh	r5,14(r16)
    2750:	8809883a 	mov	r4,r17
    2754:	0002c400 	call	2c40 <_isatty_r>
    2758:	103fde26 	beq	r2,zero,26d4 <__smakebuf_r+0x8c>
    275c:	8080030b 	ldhu	r2,12(r16)
    2760:	80c010c4 	addi	r3,r16,67
    2764:	04810004 	movi	r18,1024
    2768:	10800054 	ori	r2,r2,1
    276c:	8080030d 	sth	r2,12(r16)
    2770:	00800044 	movi	r2,1
    2774:	80c00415 	stw	r3,16(r16)
    2778:	80800515 	stw	r2,20(r16)
    277c:	80c00015 	stw	r3,0(r16)
    2780:	003fd506 	br	26d8 <__smakebuf_r+0x90>
    2784:	80c00a17 	ldw	r3,40(r16)
    2788:	00800034 	movhi	r2,0
    278c:	108a1f04 	addi	r2,r2,10364
    2790:	18bfcb1e 	bne	r3,r2,26c0 <__smakebuf_r+0x78>
    2794:	8080030b 	ldhu	r2,12(r16)
    2798:	00c10004 	movi	r3,1024
    279c:	1825883a 	mov	r18,r3
    27a0:	10c4b03a 	or	r2,r2,r3
    27a4:	8080030d 	sth	r2,12(r16)
    27a8:	80c01315 	stw	r3,76(r16)
    27ac:	003fca06 	br	26d8 <__smakebuf_r+0x90>
    27b0:	8100030b 	ldhu	r4,12(r16)
    27b4:	2080800c 	andi	r2,r4,512
    27b8:	103fb21e 	bne	r2,zero,2684 <__smakebuf_r+0x3c>
    27bc:	80c010c4 	addi	r3,r16,67
    27c0:	21000094 	ori	r4,r4,2
    27c4:	00800044 	movi	r2,1
    27c8:	80800515 	stw	r2,20(r16)
    27cc:	8100030d 	sth	r4,12(r16)
    27d0:	80c00415 	stw	r3,16(r16)
    27d4:	80c00015 	stw	r3,0(r16)
    27d8:	003faa06 	br	2684 <__smakebuf_r+0x3c>

000027dc <memset>:
    27dc:	008000c4 	movi	r2,3
    27e0:	29403fcc 	andi	r5,r5,255
    27e4:	2007883a 	mov	r3,r4
    27e8:	1180022e 	bgeu	r2,r6,27f4 <memset+0x18>
    27ec:	2084703a 	and	r2,r4,r2
    27f0:	10000826 	beq	r2,zero,2814 <memset+0x38>
    27f4:	30000526 	beq	r6,zero,280c <memset+0x30>
    27f8:	2805883a 	mov	r2,r5
    27fc:	30cd883a 	add	r6,r6,r3
    2800:	18800005 	stb	r2,0(r3)
    2804:	18c00044 	addi	r3,r3,1
    2808:	19bffd1e 	bne	r3,r6,2800 <memset+0x24>
    280c:	2005883a 	mov	r2,r4
    2810:	f800283a 	ret
    2814:	2804923a 	slli	r2,r5,8
    2818:	020003c4 	movi	r8,15
    281c:	200f883a 	mov	r7,r4
    2820:	2884b03a 	or	r2,r5,r2
    2824:	1006943a 	slli	r3,r2,16
    2828:	10c6b03a 	or	r3,r2,r3
    282c:	41800a2e 	bgeu	r8,r6,2858 <memset+0x7c>
    2830:	4005883a 	mov	r2,r8
    2834:	31bffc04 	addi	r6,r6,-16
    2838:	38c00015 	stw	r3,0(r7)
    283c:	38c00115 	stw	r3,4(r7)
    2840:	38c00215 	stw	r3,8(r7)
    2844:	38c00315 	stw	r3,12(r7)
    2848:	39c00404 	addi	r7,r7,16
    284c:	11bff936 	bltu	r2,r6,2834 <memset+0x58>
    2850:	008000c4 	movi	r2,3
    2854:	1180052e 	bgeu	r2,r6,286c <memset+0x90>
    2858:	31bfff04 	addi	r6,r6,-4
    285c:	008000c4 	movi	r2,3
    2860:	38c00015 	stw	r3,0(r7)
    2864:	39c00104 	addi	r7,r7,4
    2868:	11bffb36 	bltu	r2,r6,2858 <memset+0x7c>
    286c:	3807883a 	mov	r3,r7
    2870:	003fe006 	br	27f4 <memset+0x18>

00002874 <__sclose>:
    2874:	2940038f 	ldh	r5,14(r5)
    2878:	0002a381 	jmpi	2a38 <_close_r>

0000287c <__sseek>:
    287c:	defffe04 	addi	sp,sp,-8
    2880:	dc000015 	stw	r16,0(sp)
    2884:	2821883a 	mov	r16,r5
    2888:	2940038f 	ldh	r5,14(r5)
    288c:	dfc00115 	stw	ra,4(sp)
    2890:	0002cb00 	call	2cb0 <_lseek_r>
    2894:	1007883a 	mov	r3,r2
    2898:	00bfffc4 	movi	r2,-1
    289c:	18800926 	beq	r3,r2,28c4 <__sseek+0x48>
    28a0:	8080030b 	ldhu	r2,12(r16)
    28a4:	80c01415 	stw	r3,80(r16)
    28a8:	10840014 	ori	r2,r2,4096
    28ac:	8080030d 	sth	r2,12(r16)
    28b0:	1805883a 	mov	r2,r3
    28b4:	dfc00117 	ldw	ra,4(sp)
    28b8:	dc000017 	ldw	r16,0(sp)
    28bc:	dec00204 	addi	sp,sp,8
    28c0:	f800283a 	ret
    28c4:	8080030b 	ldhu	r2,12(r16)
    28c8:	10bbffcc 	andi	r2,r2,61439
    28cc:	8080030d 	sth	r2,12(r16)
    28d0:	1805883a 	mov	r2,r3
    28d4:	dfc00117 	ldw	ra,4(sp)
    28d8:	dc000017 	ldw	r16,0(sp)
    28dc:	dec00204 	addi	sp,sp,8
    28e0:	f800283a 	ret

000028e4 <__swrite>:
    28e4:	2880030b 	ldhu	r2,12(r5)
    28e8:	defffb04 	addi	sp,sp,-20
    28ec:	dcc00315 	stw	r19,12(sp)
    28f0:	1080400c 	andi	r2,r2,256
    28f4:	dc800215 	stw	r18,8(sp)
    28f8:	dc400115 	stw	r17,4(sp)
    28fc:	dc000015 	stw	r16,0(sp)
    2900:	3027883a 	mov	r19,r6
    2904:	3825883a 	mov	r18,r7
    2908:	dfc00415 	stw	ra,16(sp)
    290c:	2821883a 	mov	r16,r5
    2910:	000d883a 	mov	r6,zero
    2914:	01c00084 	movi	r7,2
    2918:	2023883a 	mov	r17,r4
    291c:	10000226 	beq	r2,zero,2928 <__swrite+0x44>
    2920:	2940038f 	ldh	r5,14(r5)
    2924:	0002cb00 	call	2cb0 <_lseek_r>
    2928:	8080030b 	ldhu	r2,12(r16)
    292c:	8140038f 	ldh	r5,14(r16)
    2930:	8809883a 	mov	r4,r17
    2934:	10bbffcc 	andi	r2,r2,61439
    2938:	980d883a 	mov	r6,r19
    293c:	900f883a 	mov	r7,r18
    2940:	8080030d 	sth	r2,12(r16)
    2944:	dfc00417 	ldw	ra,16(sp)
    2948:	dcc00317 	ldw	r19,12(sp)
    294c:	dc800217 	ldw	r18,8(sp)
    2950:	dc400117 	ldw	r17,4(sp)
    2954:	dc000017 	ldw	r16,0(sp)
    2958:	dec00504 	addi	sp,sp,20
    295c:	00029c01 	jmpi	29c0 <_write_r>

00002960 <__sread>:
    2960:	defffe04 	addi	sp,sp,-8
    2964:	dc000015 	stw	r16,0(sp)
    2968:	2821883a 	mov	r16,r5
    296c:	2940038f 	ldh	r5,14(r5)
    2970:	dfc00115 	stw	ra,4(sp)
    2974:	0002d280 	call	2d28 <_read_r>
    2978:	1007883a 	mov	r3,r2
    297c:	10000816 	blt	r2,zero,29a0 <__sread+0x40>
    2980:	80801417 	ldw	r2,80(r16)
    2984:	10c5883a 	add	r2,r2,r3
    2988:	80801415 	stw	r2,80(r16)
    298c:	1805883a 	mov	r2,r3
    2990:	dfc00117 	ldw	ra,4(sp)
    2994:	dc000017 	ldw	r16,0(sp)
    2998:	dec00204 	addi	sp,sp,8
    299c:	f800283a 	ret
    29a0:	8080030b 	ldhu	r2,12(r16)
    29a4:	10bbffcc 	andi	r2,r2,61439
    29a8:	8080030d 	sth	r2,12(r16)
    29ac:	1805883a 	mov	r2,r3
    29b0:	dfc00117 	ldw	ra,4(sp)
    29b4:	dc000017 	ldw	r16,0(sp)
    29b8:	dec00204 	addi	sp,sp,8
    29bc:	f800283a 	ret

000029c0 <_write_r>:
    29c0:	defffd04 	addi	sp,sp,-12
    29c4:	dc000015 	stw	r16,0(sp)
    29c8:	04000074 	movhi	r16,1
    29cc:	8424f004 	addi	r16,r16,-27712
    29d0:	dc400115 	stw	r17,4(sp)
    29d4:	80000015 	stw	zero,0(r16)
    29d8:	2023883a 	mov	r17,r4
    29dc:	2809883a 	mov	r4,r5
    29e0:	300b883a 	mov	r5,r6
    29e4:	380d883a 	mov	r6,r7
    29e8:	dfc00215 	stw	ra,8(sp)
    29ec:	0003a240 	call	3a24 <write>
    29f0:	1007883a 	mov	r3,r2
    29f4:	00bfffc4 	movi	r2,-1
    29f8:	18800626 	beq	r3,r2,2a14 <_write_r+0x54>
    29fc:	1805883a 	mov	r2,r3
    2a00:	dfc00217 	ldw	ra,8(sp)
    2a04:	dc400117 	ldw	r17,4(sp)
    2a08:	dc000017 	ldw	r16,0(sp)
    2a0c:	dec00304 	addi	sp,sp,12
    2a10:	f800283a 	ret
    2a14:	80800017 	ldw	r2,0(r16)
    2a18:	103ff826 	beq	r2,zero,29fc <_write_r+0x3c>
    2a1c:	88800015 	stw	r2,0(r17)
    2a20:	1805883a 	mov	r2,r3
    2a24:	dfc00217 	ldw	ra,8(sp)
    2a28:	dc400117 	ldw	r17,4(sp)
    2a2c:	dc000017 	ldw	r16,0(sp)
    2a30:	dec00304 	addi	sp,sp,12
    2a34:	f800283a 	ret

00002a38 <_close_r>:
    2a38:	defffd04 	addi	sp,sp,-12
    2a3c:	dc000015 	stw	r16,0(sp)
    2a40:	04000074 	movhi	r16,1
    2a44:	8424f004 	addi	r16,r16,-27712
    2a48:	dc400115 	stw	r17,4(sp)
    2a4c:	80000015 	stw	zero,0(r16)
    2a50:	2023883a 	mov	r17,r4
    2a54:	2809883a 	mov	r4,r5
    2a58:	dfc00215 	stw	ra,8(sp)
    2a5c:	0002ef40 	call	2ef4 <close>
    2a60:	1007883a 	mov	r3,r2
    2a64:	00bfffc4 	movi	r2,-1
    2a68:	18800626 	beq	r3,r2,2a84 <_close_r+0x4c>
    2a6c:	1805883a 	mov	r2,r3
    2a70:	dfc00217 	ldw	ra,8(sp)
    2a74:	dc400117 	ldw	r17,4(sp)
    2a78:	dc000017 	ldw	r16,0(sp)
    2a7c:	dec00304 	addi	sp,sp,12
    2a80:	f800283a 	ret
    2a84:	80800017 	ldw	r2,0(r16)
    2a88:	103ff826 	beq	r2,zero,2a6c <_close_r+0x34>
    2a8c:	88800015 	stw	r2,0(r17)
    2a90:	1805883a 	mov	r2,r3
    2a94:	dfc00217 	ldw	ra,8(sp)
    2a98:	dc400117 	ldw	r17,4(sp)
    2a9c:	dc000017 	ldw	r16,0(sp)
    2aa0:	dec00304 	addi	sp,sp,12
    2aa4:	f800283a 	ret

00002aa8 <_fclose_r>:
    2aa8:	defffc04 	addi	sp,sp,-16
    2aac:	dc400115 	stw	r17,4(sp)
    2ab0:	dc000015 	stw	r16,0(sp)
    2ab4:	dfc00315 	stw	ra,12(sp)
    2ab8:	dc800215 	stw	r18,8(sp)
    2abc:	2821883a 	mov	r16,r5
    2ac0:	2023883a 	mov	r17,r4
    2ac4:	28002926 	beq	r5,zero,2b6c <_fclose_r+0xc4>
    2ac8:	0001dec0 	call	1dec <__sfp_lock_acquire>
    2acc:	88000226 	beq	r17,zero,2ad8 <_fclose_r+0x30>
    2ad0:	88800e17 	ldw	r2,56(r17)
    2ad4:	10002d26 	beq	r2,zero,2b8c <_fclose_r+0xe4>
    2ad8:	8080030f 	ldh	r2,12(r16)
    2adc:	10002226 	beq	r2,zero,2b68 <_fclose_r+0xc0>
    2ae0:	8809883a 	mov	r4,r17
    2ae4:	800b883a 	mov	r5,r16
    2ae8:	0001b640 	call	1b64 <_fflush_r>
    2aec:	1025883a 	mov	r18,r2
    2af0:	80800b17 	ldw	r2,44(r16)
    2af4:	10000426 	beq	r2,zero,2b08 <_fclose_r+0x60>
    2af8:	81400717 	ldw	r5,28(r16)
    2afc:	8809883a 	mov	r4,r17
    2b00:	103ee83a 	callr	r2
    2b04:	10002a16 	blt	r2,zero,2bb0 <_fclose_r+0x108>
    2b08:	8080030b 	ldhu	r2,12(r16)
    2b0c:	1080200c 	andi	r2,r2,128
    2b10:	1000231e 	bne	r2,zero,2ba0 <_fclose_r+0xf8>
    2b14:	81400c17 	ldw	r5,48(r16)
    2b18:	28000526 	beq	r5,zero,2b30 <_fclose_r+0x88>
    2b1c:	80801004 	addi	r2,r16,64
    2b20:	28800226 	beq	r5,r2,2b2c <_fclose_r+0x84>
    2b24:	8809883a 	mov	r4,r17
    2b28:	00021b40 	call	21b4 <_free_r>
    2b2c:	80000c15 	stw	zero,48(r16)
    2b30:	81401117 	ldw	r5,68(r16)
    2b34:	28000326 	beq	r5,zero,2b44 <_fclose_r+0x9c>
    2b38:	8809883a 	mov	r4,r17
    2b3c:	00021b40 	call	21b4 <_free_r>
    2b40:	80001115 	stw	zero,68(r16)
    2b44:	8000030d 	sth	zero,12(r16)
    2b48:	0001df00 	call	1df0 <__sfp_lock_release>
    2b4c:	9005883a 	mov	r2,r18
    2b50:	dfc00317 	ldw	ra,12(sp)
    2b54:	dc800217 	ldw	r18,8(sp)
    2b58:	dc400117 	ldw	r17,4(sp)
    2b5c:	dc000017 	ldw	r16,0(sp)
    2b60:	dec00404 	addi	sp,sp,16
    2b64:	f800283a 	ret
    2b68:	0001df00 	call	1df0 <__sfp_lock_release>
    2b6c:	0025883a 	mov	r18,zero
    2b70:	9005883a 	mov	r2,r18
    2b74:	dfc00317 	ldw	ra,12(sp)
    2b78:	dc800217 	ldw	r18,8(sp)
    2b7c:	dc400117 	ldw	r17,4(sp)
    2b80:	dc000017 	ldw	r16,0(sp)
    2b84:	dec00404 	addi	sp,sp,16
    2b88:	f800283a 	ret
    2b8c:	8809883a 	mov	r4,r17
    2b90:	0001dfc0 	call	1dfc <__sinit>
    2b94:	8080030f 	ldh	r2,12(r16)
    2b98:	103fd11e 	bne	r2,zero,2ae0 <_fclose_r+0x38>
    2b9c:	003ff206 	br	2b68 <_fclose_r+0xc0>
    2ba0:	81400417 	ldw	r5,16(r16)
    2ba4:	8809883a 	mov	r4,r17
    2ba8:	00021b40 	call	21b4 <_free_r>
    2bac:	003fd906 	br	2b14 <_fclose_r+0x6c>
    2bb0:	04bfffc4 	movi	r18,-1
    2bb4:	003fd406 	br	2b08 <_fclose_r+0x60>

00002bb8 <fclose>:
    2bb8:	00800034 	movhi	r2,0
    2bbc:	109dea04 	addi	r2,r2,30632
    2bc0:	200b883a 	mov	r5,r4
    2bc4:	11000017 	ldw	r4,0(r2)
    2bc8:	0002aa81 	jmpi	2aa8 <_fclose_r>

00002bcc <_fstat_r>:
    2bcc:	defffd04 	addi	sp,sp,-12
    2bd0:	dc000015 	stw	r16,0(sp)
    2bd4:	04000074 	movhi	r16,1
    2bd8:	8424f004 	addi	r16,r16,-27712
    2bdc:	dc400115 	stw	r17,4(sp)
    2be0:	80000015 	stw	zero,0(r16)
    2be4:	2023883a 	mov	r17,r4
    2be8:	2809883a 	mov	r4,r5
    2bec:	300b883a 	mov	r5,r6
    2bf0:	dfc00215 	stw	ra,8(sp)
    2bf4:	00030800 	call	3080 <fstat>
    2bf8:	1007883a 	mov	r3,r2
    2bfc:	00bfffc4 	movi	r2,-1
    2c00:	18800626 	beq	r3,r2,2c1c <_fstat_r+0x50>
    2c04:	1805883a 	mov	r2,r3
    2c08:	dfc00217 	ldw	ra,8(sp)
    2c0c:	dc400117 	ldw	r17,4(sp)
    2c10:	dc000017 	ldw	r16,0(sp)
    2c14:	dec00304 	addi	sp,sp,12
    2c18:	f800283a 	ret
    2c1c:	80800017 	ldw	r2,0(r16)
    2c20:	103ff826 	beq	r2,zero,2c04 <_fstat_r+0x38>
    2c24:	88800015 	stw	r2,0(r17)
    2c28:	1805883a 	mov	r2,r3
    2c2c:	dfc00217 	ldw	ra,8(sp)
    2c30:	dc400117 	ldw	r17,4(sp)
    2c34:	dc000017 	ldw	r16,0(sp)
    2c38:	dec00304 	addi	sp,sp,12
    2c3c:	f800283a 	ret

00002c40 <_isatty_r>:
    2c40:	defffd04 	addi	sp,sp,-12
    2c44:	dc000015 	stw	r16,0(sp)
    2c48:	04000074 	movhi	r16,1
    2c4c:	8424f004 	addi	r16,r16,-27712
    2c50:	dc400115 	stw	r17,4(sp)
    2c54:	80000015 	stw	zero,0(r16)
    2c58:	2023883a 	mov	r17,r4
    2c5c:	2809883a 	mov	r4,r5
    2c60:	dfc00215 	stw	ra,8(sp)
    2c64:	00031b80 	call	31b8 <isatty>
    2c68:	1007883a 	mov	r3,r2
    2c6c:	00bfffc4 	movi	r2,-1
    2c70:	18800626 	beq	r3,r2,2c8c <_isatty_r+0x4c>
    2c74:	1805883a 	mov	r2,r3
    2c78:	dfc00217 	ldw	ra,8(sp)
    2c7c:	dc400117 	ldw	r17,4(sp)
    2c80:	dc000017 	ldw	r16,0(sp)
    2c84:	dec00304 	addi	sp,sp,12
    2c88:	f800283a 	ret
    2c8c:	80800017 	ldw	r2,0(r16)
    2c90:	103ff826 	beq	r2,zero,2c74 <_isatty_r+0x34>
    2c94:	88800015 	stw	r2,0(r17)
    2c98:	1805883a 	mov	r2,r3
    2c9c:	dfc00217 	ldw	ra,8(sp)
    2ca0:	dc400117 	ldw	r17,4(sp)
    2ca4:	dc000017 	ldw	r16,0(sp)
    2ca8:	dec00304 	addi	sp,sp,12
    2cac:	f800283a 	ret

00002cb0 <_lseek_r>:
    2cb0:	defffd04 	addi	sp,sp,-12
    2cb4:	dc000015 	stw	r16,0(sp)
    2cb8:	04000074 	movhi	r16,1
    2cbc:	8424f004 	addi	r16,r16,-27712
    2cc0:	dc400115 	stw	r17,4(sp)
    2cc4:	80000015 	stw	zero,0(r16)
    2cc8:	2023883a 	mov	r17,r4
    2ccc:	2809883a 	mov	r4,r5
    2cd0:	300b883a 	mov	r5,r6
    2cd4:	380d883a 	mov	r6,r7
    2cd8:	dfc00215 	stw	ra,8(sp)
    2cdc:	00033c80 	call	33c8 <lseek>
    2ce0:	1007883a 	mov	r3,r2
    2ce4:	00bfffc4 	movi	r2,-1
    2ce8:	18800626 	beq	r3,r2,2d04 <_lseek_r+0x54>
    2cec:	1805883a 	mov	r2,r3
    2cf0:	dfc00217 	ldw	ra,8(sp)
    2cf4:	dc400117 	ldw	r17,4(sp)
    2cf8:	dc000017 	ldw	r16,0(sp)
    2cfc:	dec00304 	addi	sp,sp,12
    2d00:	f800283a 	ret
    2d04:	80800017 	ldw	r2,0(r16)
    2d08:	103ff826 	beq	r2,zero,2cec <_lseek_r+0x3c>
    2d0c:	88800015 	stw	r2,0(r17)
    2d10:	1805883a 	mov	r2,r3
    2d14:	dfc00217 	ldw	ra,8(sp)
    2d18:	dc400117 	ldw	r17,4(sp)
    2d1c:	dc000017 	ldw	r16,0(sp)
    2d20:	dec00304 	addi	sp,sp,12
    2d24:	f800283a 	ret

00002d28 <_read_r>:
    2d28:	defffd04 	addi	sp,sp,-12
    2d2c:	dc000015 	stw	r16,0(sp)
    2d30:	04000074 	movhi	r16,1
    2d34:	8424f004 	addi	r16,r16,-27712
    2d38:	dc400115 	stw	r17,4(sp)
    2d3c:	80000015 	stw	zero,0(r16)
    2d40:	2023883a 	mov	r17,r4
    2d44:	2809883a 	mov	r4,r5
    2d48:	300b883a 	mov	r5,r6
    2d4c:	380d883a 	mov	r6,r7
    2d50:	dfc00215 	stw	ra,8(sp)
    2d54:	00035c80 	call	35c8 <read>
    2d58:	1007883a 	mov	r3,r2
    2d5c:	00bfffc4 	movi	r2,-1
    2d60:	18800626 	beq	r3,r2,2d7c <_read_r+0x54>
    2d64:	1805883a 	mov	r2,r3
    2d68:	dfc00217 	ldw	ra,8(sp)
    2d6c:	dc400117 	ldw	r17,4(sp)
    2d70:	dc000017 	ldw	r16,0(sp)
    2d74:	dec00304 	addi	sp,sp,12
    2d78:	f800283a 	ret
    2d7c:	80800017 	ldw	r2,0(r16)
    2d80:	103ff826 	beq	r2,zero,2d64 <_read_r+0x3c>
    2d84:	88800015 	stw	r2,0(r17)
    2d88:	1805883a 	mov	r2,r3
    2d8c:	dfc00217 	ldw	ra,8(sp)
    2d90:	dc400117 	ldw	r17,4(sp)
    2d94:	dc000017 	ldw	r16,0(sp)
    2d98:	dec00304 	addi	sp,sp,12
    2d9c:	f800283a 	ret

00002da0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2da0:	defff404 	addi	sp,sp,-48
    2da4:	df000b15 	stw	fp,44(sp)
    2da8:	df000b04 	addi	fp,sp,44
    2dac:	e13ffb15 	stw	r4,-20(fp)
    2db0:	e17ffc15 	stw	r5,-16(fp)
    2db4:	e1bffd15 	stw	r6,-12(fp)
    2db8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2dbc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2dc0:	00800074 	movhi	r2,1
    2dc4:	10a4f404 	addi	r2,r2,-27696
    2dc8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    2dcc:	1005003a 	cmpeq	r2,r2,zero
    2dd0:	1000411e 	bne	r2,zero,2ed8 <alt_alarm_start+0x138>
  {
    if (alarm)
    2dd4:	e0bffb17 	ldw	r2,-20(fp)
    2dd8:	1005003a 	cmpeq	r2,r2,zero
    2ddc:	10003b1e 	bne	r2,zero,2ecc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    2de0:	e0fffb17 	ldw	r3,-20(fp)
    2de4:	e0bffd17 	ldw	r2,-12(fp)
    2de8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    2dec:	e0fffb17 	ldw	r3,-20(fp)
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2df8:	0005303a 	rdctl	r2,status
    2dfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e00:	e0fff817 	ldw	r3,-32(fp)
    2e04:	00bfff84 	movi	r2,-2
    2e08:	1884703a 	and	r2,r3,r2
    2e0c:	1001703a 	wrctl	status,r2
  
  return context;
    2e10:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    2e14:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2e18:	00800074 	movhi	r2,1
    2e1c:	10a4f504 	addi	r2,r2,-27692
    2e20:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2e24:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    2e28:	e0fffc17 	ldw	r3,-16(fp)
    2e2c:	e0bff917 	ldw	r2,-28(fp)
    2e30:	1885883a 	add	r2,r3,r2
    2e34:	10c00044 	addi	r3,r2,1
    2e38:	e0bffb17 	ldw	r2,-20(fp)
    2e3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2e40:	e0bffb17 	ldw	r2,-20(fp)
    2e44:	10c00217 	ldw	r3,8(r2)
    2e48:	e0bff917 	ldw	r2,-28(fp)
    2e4c:	1880042e 	bgeu	r3,r2,2e60 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    2e50:	e0fffb17 	ldw	r3,-20(fp)
    2e54:	00800044 	movi	r2,1
    2e58:	18800405 	stb	r2,16(r3)
    2e5c:	00000206 	br	2e68 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    2e60:	e0bffb17 	ldw	r2,-20(fp)
    2e64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2e68:	e0fffb17 	ldw	r3,-20(fp)
    2e6c:	00800034 	movhi	r2,0
    2e70:	109df504 	addi	r2,r2,30676
    2e74:	e0bff615 	stw	r2,-40(fp)
    2e78:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2e7c:	e0fff717 	ldw	r3,-36(fp)
    2e80:	e0bff617 	ldw	r2,-40(fp)
    2e84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2e88:	e0bff617 	ldw	r2,-40(fp)
    2e8c:	10c00017 	ldw	r3,0(r2)
    2e90:	e0bff717 	ldw	r2,-36(fp)
    2e94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2e98:	e0bff617 	ldw	r2,-40(fp)
    2e9c:	10c00017 	ldw	r3,0(r2)
    2ea0:	e0bff717 	ldw	r2,-36(fp)
    2ea4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2ea8:	e0fff617 	ldw	r3,-40(fp)
    2eac:	e0bff717 	ldw	r2,-36(fp)
    2eb0:	18800015 	stw	r2,0(r3)
    2eb4:	e0bffa17 	ldw	r2,-24(fp)
    2eb8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ebc:	e0bff517 	ldw	r2,-44(fp)
    2ec0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2ec4:	e03fff15 	stw	zero,-4(fp)
    2ec8:	00000506 	br	2ee0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    2ecc:	00bffa84 	movi	r2,-22
    2ed0:	e0bfff15 	stw	r2,-4(fp)
    2ed4:	00000206 	br	2ee0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    2ed8:	00bfde84 	movi	r2,-134
    2edc:	e0bfff15 	stw	r2,-4(fp)
    2ee0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2ee4:	e037883a 	mov	sp,fp
    2ee8:	df000017 	ldw	fp,0(sp)
    2eec:	dec00104 	addi	sp,sp,4
    2ef0:	f800283a 	ret

00002ef4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2ef4:	defff804 	addi	sp,sp,-32
    2ef8:	dfc00715 	stw	ra,28(sp)
    2efc:	df000615 	stw	fp,24(sp)
    2f00:	df000604 	addi	fp,sp,24
    2f04:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2f08:	e0bffc17 	ldw	r2,-16(fp)
    2f0c:	1004803a 	cmplt	r2,r2,zero
    2f10:	1000091e 	bne	r2,zero,2f38 <close+0x44>
    2f14:	e13ffc17 	ldw	r4,-16(fp)
    2f18:	01400304 	movi	r5,12
    2f1c:	00004240 	call	424 <__mulsi3>
    2f20:	1007883a 	mov	r3,r2
    2f24:	00800034 	movhi	r2,0
    2f28:	10990f04 	addi	r2,r2,25660
    2f2c:	1887883a 	add	r3,r3,r2
    2f30:	e0ffff15 	stw	r3,-4(fp)
    2f34:	00000106 	br	2f3c <close+0x48>
    2f38:	e03fff15 	stw	zero,-4(fp)
    2f3c:	e0bfff17 	ldw	r2,-4(fp)
    2f40:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2f44:	e0bffb17 	ldw	r2,-20(fp)
    2f48:	1005003a 	cmpeq	r2,r2,zero
    2f4c:	10001d1e 	bne	r2,zero,2fc4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2f50:	e0bffb17 	ldw	r2,-20(fp)
    2f54:	10800017 	ldw	r2,0(r2)
    2f58:	10800417 	ldw	r2,16(r2)
    2f5c:	1005003a 	cmpeq	r2,r2,zero
    2f60:	1000071e 	bne	r2,zero,2f80 <close+0x8c>
    2f64:	e0bffb17 	ldw	r2,-20(fp)
    2f68:	10800017 	ldw	r2,0(r2)
    2f6c:	10800417 	ldw	r2,16(r2)
    2f70:	e13ffb17 	ldw	r4,-20(fp)
    2f74:	103ee83a 	callr	r2
    2f78:	e0bffe15 	stw	r2,-8(fp)
    2f7c:	00000106 	br	2f84 <close+0x90>
    2f80:	e03ffe15 	stw	zero,-8(fp)
    2f84:	e0bffe17 	ldw	r2,-8(fp)
    2f88:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2f8c:	e13ffc17 	ldw	r4,-16(fp)
    2f90:	000374c0 	call	374c <alt_release_fd>
    if (rval < 0)
    2f94:	e0bffa17 	ldw	r2,-24(fp)
    2f98:	1004403a 	cmpge	r2,r2,zero
    2f9c:	1000071e 	bne	r2,zero,2fbc <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2fa0:	0002ff40 	call	2ff4 <alt_get_errno>
    2fa4:	e0fffa17 	ldw	r3,-24(fp)
    2fa8:	00c7c83a 	sub	r3,zero,r3
    2fac:	10c00015 	stw	r3,0(r2)
      return -1;
    2fb0:	00bfffc4 	movi	r2,-1
    2fb4:	e0bffd15 	stw	r2,-12(fp)
    2fb8:	00000806 	br	2fdc <close+0xe8>
    }
    return 0;
    2fbc:	e03ffd15 	stw	zero,-12(fp)
    2fc0:	00000606 	br	2fdc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2fc4:	0002ff40 	call	2ff4 <alt_get_errno>
    2fc8:	1007883a 	mov	r3,r2
    2fcc:	00801444 	movi	r2,81
    2fd0:	18800015 	stw	r2,0(r3)
    return -1;
    2fd4:	00bfffc4 	movi	r2,-1
    2fd8:	e0bffd15 	stw	r2,-12(fp)
    2fdc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2fe0:	e037883a 	mov	sp,fp
    2fe4:	dfc00117 	ldw	ra,4(sp)
    2fe8:	df000017 	ldw	fp,0(sp)
    2fec:	dec00204 	addi	sp,sp,8
    2ff0:	f800283a 	ret

00002ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2ff4:	defffd04 	addi	sp,sp,-12
    2ff8:	dfc00215 	stw	ra,8(sp)
    2ffc:	df000115 	stw	fp,4(sp)
    3000:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3004:	00800034 	movhi	r2,0
    3008:	109df304 	addi	r2,r2,30668
    300c:	10800017 	ldw	r2,0(r2)
    3010:	1005003a 	cmpeq	r2,r2,zero
    3014:	1000061e 	bne	r2,zero,3030 <alt_get_errno+0x3c>
    3018:	00800034 	movhi	r2,0
    301c:	109df304 	addi	r2,r2,30668
    3020:	10800017 	ldw	r2,0(r2)
    3024:	103ee83a 	callr	r2
    3028:	e0bfff15 	stw	r2,-4(fp)
    302c:	00000306 	br	303c <alt_get_errno+0x48>
    3030:	00800074 	movhi	r2,1
    3034:	10a4f004 	addi	r2,r2,-27712
    3038:	e0bfff15 	stw	r2,-4(fp)
    303c:	e0bfff17 	ldw	r2,-4(fp)
}
    3040:	e037883a 	mov	sp,fp
    3044:	dfc00117 	ldw	ra,4(sp)
    3048:	df000017 	ldw	fp,0(sp)
    304c:	dec00204 	addi	sp,sp,8
    3050:	f800283a 	ret

00003054 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3054:	defffc04 	addi	sp,sp,-16
    3058:	df000315 	stw	fp,12(sp)
    305c:	df000304 	addi	fp,sp,12
    3060:	e13ffd15 	stw	r4,-12(fp)
    3064:	e17ffe15 	stw	r5,-8(fp)
    3068:	e1bfff15 	stw	r6,-4(fp)
  return len;
    306c:	e0bfff17 	ldw	r2,-4(fp)
}
    3070:	e037883a 	mov	sp,fp
    3074:	df000017 	ldw	fp,0(sp)
    3078:	dec00104 	addi	sp,sp,4
    307c:	f800283a 	ret

00003080 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3080:	defff904 	addi	sp,sp,-28
    3084:	dfc00615 	stw	ra,24(sp)
    3088:	df000515 	stw	fp,20(sp)
    308c:	df000504 	addi	fp,sp,20
    3090:	e13ffc15 	stw	r4,-16(fp)
    3094:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3098:	e0bffc17 	ldw	r2,-16(fp)
    309c:	1004803a 	cmplt	r2,r2,zero
    30a0:	1000091e 	bne	r2,zero,30c8 <fstat+0x48>
    30a4:	e13ffc17 	ldw	r4,-16(fp)
    30a8:	01400304 	movi	r5,12
    30ac:	00004240 	call	424 <__mulsi3>
    30b0:	1007883a 	mov	r3,r2
    30b4:	00800034 	movhi	r2,0
    30b8:	10990f04 	addi	r2,r2,25660
    30bc:	1887883a 	add	r3,r3,r2
    30c0:	e0ffff15 	stw	r3,-4(fp)
    30c4:	00000106 	br	30cc <fstat+0x4c>
    30c8:	e03fff15 	stw	zero,-4(fp)
    30cc:	e0bfff17 	ldw	r2,-4(fp)
    30d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    30d4:	e0bffb17 	ldw	r2,-20(fp)
    30d8:	1005003a 	cmpeq	r2,r2,zero
    30dc:	1000121e 	bne	r2,zero,3128 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    30e0:	e0bffb17 	ldw	r2,-20(fp)
    30e4:	10800017 	ldw	r2,0(r2)
    30e8:	10800817 	ldw	r2,32(r2)
    30ec:	1005003a 	cmpeq	r2,r2,zero
    30f0:	1000081e 	bne	r2,zero,3114 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    30f4:	e0bffb17 	ldw	r2,-20(fp)
    30f8:	10800017 	ldw	r2,0(r2)
    30fc:	10800817 	ldw	r2,32(r2)
    3100:	e13ffb17 	ldw	r4,-20(fp)
    3104:	e17ffd17 	ldw	r5,-12(fp)
    3108:	103ee83a 	callr	r2
    310c:	e0bffe15 	stw	r2,-8(fp)
    3110:	00000b06 	br	3140 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3114:	e0fffd17 	ldw	r3,-12(fp)
    3118:	00880004 	movi	r2,8192
    311c:	18800115 	stw	r2,4(r3)
      return 0;
    3120:	e03ffe15 	stw	zero,-8(fp)
    3124:	00000606 	br	3140 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3128:	00031580 	call	3158 <alt_get_errno>
    312c:	1007883a 	mov	r3,r2
    3130:	00801444 	movi	r2,81
    3134:	18800015 	stw	r2,0(r3)
    return -1;
    3138:	00bfffc4 	movi	r2,-1
    313c:	e0bffe15 	stw	r2,-8(fp)
    3140:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    3144:	e037883a 	mov	sp,fp
    3148:	dfc00117 	ldw	ra,4(sp)
    314c:	df000017 	ldw	fp,0(sp)
    3150:	dec00204 	addi	sp,sp,8
    3154:	f800283a 	ret

00003158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3158:	defffd04 	addi	sp,sp,-12
    315c:	dfc00215 	stw	ra,8(sp)
    3160:	df000115 	stw	fp,4(sp)
    3164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3168:	00800034 	movhi	r2,0
    316c:	109df304 	addi	r2,r2,30668
    3170:	10800017 	ldw	r2,0(r2)
    3174:	1005003a 	cmpeq	r2,r2,zero
    3178:	1000061e 	bne	r2,zero,3194 <alt_get_errno+0x3c>
    317c:	00800034 	movhi	r2,0
    3180:	109df304 	addi	r2,r2,30668
    3184:	10800017 	ldw	r2,0(r2)
    3188:	103ee83a 	callr	r2
    318c:	e0bfff15 	stw	r2,-4(fp)
    3190:	00000306 	br	31a0 <alt_get_errno+0x48>
    3194:	00800074 	movhi	r2,1
    3198:	10a4f004 	addi	r2,r2,-27712
    319c:	e0bfff15 	stw	r2,-4(fp)
    31a0:	e0bfff17 	ldw	r2,-4(fp)
}
    31a4:	e037883a 	mov	sp,fp
    31a8:	dfc00117 	ldw	ra,4(sp)
    31ac:	df000017 	ldw	fp,0(sp)
    31b0:	dec00204 	addi	sp,sp,8
    31b4:	f800283a 	ret

000031b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    31b8:	deffeb04 	addi	sp,sp,-84
    31bc:	dfc01415 	stw	ra,80(sp)
    31c0:	df001315 	stw	fp,76(sp)
    31c4:	df001304 	addi	fp,sp,76
    31c8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    31cc:	e0bffd17 	ldw	r2,-12(fp)
    31d0:	1004803a 	cmplt	r2,r2,zero
    31d4:	1000091e 	bne	r2,zero,31fc <isatty+0x44>
    31d8:	e13ffd17 	ldw	r4,-12(fp)
    31dc:	01400304 	movi	r5,12
    31e0:	00004240 	call	424 <__mulsi3>
    31e4:	1007883a 	mov	r3,r2
    31e8:	00800034 	movhi	r2,0
    31ec:	10990f04 	addi	r2,r2,25660
    31f0:	1887883a 	add	r3,r3,r2
    31f4:	e0ffff15 	stw	r3,-4(fp)
    31f8:	00000106 	br	3200 <isatty+0x48>
    31fc:	e03fff15 	stw	zero,-4(fp)
    3200:	e0bfff17 	ldw	r2,-4(fp)
    3204:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    3208:	e0bfed17 	ldw	r2,-76(fp)
    320c:	1005003a 	cmpeq	r2,r2,zero
    3210:	10000f1e 	bne	r2,zero,3250 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3214:	e0bfed17 	ldw	r2,-76(fp)
    3218:	10800017 	ldw	r2,0(r2)
    321c:	10800817 	ldw	r2,32(r2)
    3220:	1004c03a 	cmpne	r2,r2,zero
    3224:	1000031e 	bne	r2,zero,3234 <isatty+0x7c>
    {
      return 1;
    3228:	00800044 	movi	r2,1
    322c:	e0bffe15 	stw	r2,-8(fp)
    3230:	00000c06 	br	3264 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3234:	e17fee04 	addi	r5,fp,-72
    3238:	e13ffd17 	ldw	r4,-12(fp)
    323c:	00030800 	call	3080 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3240:	e0bfef17 	ldw	r2,-68(fp)
    3244:	10880020 	cmpeqi	r2,r2,8192
    3248:	e0bffe15 	stw	r2,-8(fp)
    324c:	00000506 	br	3264 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3250:	000327c0 	call	327c <alt_get_errno>
    3254:	1007883a 	mov	r3,r2
    3258:	00801444 	movi	r2,81
    325c:	18800015 	stw	r2,0(r3)
    return 0;
    3260:	e03ffe15 	stw	zero,-8(fp)
    3264:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    3268:	e037883a 	mov	sp,fp
    326c:	dfc00117 	ldw	ra,4(sp)
    3270:	df000017 	ldw	fp,0(sp)
    3274:	dec00204 	addi	sp,sp,8
    3278:	f800283a 	ret

0000327c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    327c:	defffd04 	addi	sp,sp,-12
    3280:	dfc00215 	stw	ra,8(sp)
    3284:	df000115 	stw	fp,4(sp)
    3288:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    328c:	00800034 	movhi	r2,0
    3290:	109df304 	addi	r2,r2,30668
    3294:	10800017 	ldw	r2,0(r2)
    3298:	1005003a 	cmpeq	r2,r2,zero
    329c:	1000061e 	bne	r2,zero,32b8 <alt_get_errno+0x3c>
    32a0:	00800034 	movhi	r2,0
    32a4:	109df304 	addi	r2,r2,30668
    32a8:	10800017 	ldw	r2,0(r2)
    32ac:	103ee83a 	callr	r2
    32b0:	e0bfff15 	stw	r2,-4(fp)
    32b4:	00000306 	br	32c4 <alt_get_errno+0x48>
    32b8:	00800074 	movhi	r2,1
    32bc:	10a4f004 	addi	r2,r2,-27712
    32c0:	e0bfff15 	stw	r2,-4(fp)
    32c4:	e0bfff17 	ldw	r2,-4(fp)
}
    32c8:	e037883a 	mov	sp,fp
    32cc:	dfc00117 	ldw	ra,4(sp)
    32d0:	df000017 	ldw	fp,0(sp)
    32d4:	dec00204 	addi	sp,sp,8
    32d8:	f800283a 	ret

000032dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    32dc:	defffe04 	addi	sp,sp,-8
    32e0:	dfc00115 	stw	ra,4(sp)
    32e4:	df000015 	stw	fp,0(sp)
    32e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    32ec:	01000034 	movhi	r4,0
    32f0:	211df804 	addi	r4,r4,30688
    32f4:	01400034 	movhi	r5,0
    32f8:	29570304 	addi	r5,r5,23564
    32fc:	01800034 	movhi	r6,0
    3300:	319df804 	addi	r6,r6,30688
    3304:	000335c0 	call	335c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3308:	01000034 	movhi	r4,0
    330c:	21000804 	addi	r4,r4,32
    3310:	01400034 	movhi	r5,0
    3314:	29400804 	addi	r5,r5,32
    3318:	01800034 	movhi	r6,0
    331c:	31806e04 	addi	r6,r6,440
    3320:	000335c0 	call	335c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3324:	01000034 	movhi	r4,0
    3328:	2116b404 	addi	r4,r4,23248
    332c:	01400034 	movhi	r5,0
    3330:	2956b404 	addi	r5,r5,23248
    3334:	01800034 	movhi	r6,0
    3338:	31970304 	addi	r6,r6,23564
    333c:	000335c0 	call	335c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3340:	0004c180 	call	4c18 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3344:	0004ea40 	call	4ea4 <alt_icache_flush_all>
}
    3348:	e037883a 	mov	sp,fp
    334c:	dfc00117 	ldw	ra,4(sp)
    3350:	df000017 	ldw	fp,0(sp)
    3354:	dec00204 	addi	sp,sp,8
    3358:	f800283a 	ret

0000335c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    335c:	defffc04 	addi	sp,sp,-16
    3360:	df000315 	stw	fp,12(sp)
    3364:	df000304 	addi	fp,sp,12
    3368:	e13ffd15 	stw	r4,-12(fp)
    336c:	e17ffe15 	stw	r5,-8(fp)
    3370:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3374:	e0fffe17 	ldw	r3,-8(fp)
    3378:	e0bffd17 	ldw	r2,-12(fp)
    337c:	18800e26 	beq	r3,r2,33b8 <alt_load_section+0x5c>
  {
    while( to != end )
    3380:	00000a06 	br	33ac <alt_load_section+0x50>
    {
      *to++ = *from++;
    3384:	e0bffd17 	ldw	r2,-12(fp)
    3388:	10c00017 	ldw	r3,0(r2)
    338c:	e0bffe17 	ldw	r2,-8(fp)
    3390:	10c00015 	stw	r3,0(r2)
    3394:	e0bffe17 	ldw	r2,-8(fp)
    3398:	10800104 	addi	r2,r2,4
    339c:	e0bffe15 	stw	r2,-8(fp)
    33a0:	e0bffd17 	ldw	r2,-12(fp)
    33a4:	10800104 	addi	r2,r2,4
    33a8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    33ac:	e0fffe17 	ldw	r3,-8(fp)
    33b0:	e0bfff17 	ldw	r2,-4(fp)
    33b4:	18bff31e 	bne	r3,r2,3384 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    33b8:	e037883a 	mov	sp,fp
    33bc:	df000017 	ldw	fp,0(sp)
    33c0:	dec00104 	addi	sp,sp,4
    33c4:	f800283a 	ret

000033c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    33c8:	defff804 	addi	sp,sp,-32
    33cc:	dfc00715 	stw	ra,28(sp)
    33d0:	df000615 	stw	fp,24(sp)
    33d4:	df000604 	addi	fp,sp,24
    33d8:	e13ffc15 	stw	r4,-16(fp)
    33dc:	e17ffd15 	stw	r5,-12(fp)
    33e0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    33e4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33e8:	e0bffc17 	ldw	r2,-16(fp)
    33ec:	1004803a 	cmplt	r2,r2,zero
    33f0:	1000091e 	bne	r2,zero,3418 <lseek+0x50>
    33f4:	e13ffc17 	ldw	r4,-16(fp)
    33f8:	01400304 	movi	r5,12
    33fc:	00004240 	call	424 <__mulsi3>
    3400:	1007883a 	mov	r3,r2
    3404:	00800034 	movhi	r2,0
    3408:	10990f04 	addi	r2,r2,25660
    340c:	1887883a 	add	r3,r3,r2
    3410:	e0ffff15 	stw	r3,-4(fp)
    3414:	00000106 	br	341c <lseek+0x54>
    3418:	e03fff15 	stw	zero,-4(fp)
    341c:	e0bfff17 	ldw	r2,-4(fp)
    3420:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    3424:	e0bffb17 	ldw	r2,-20(fp)
    3428:	1005003a 	cmpeq	r2,r2,zero
    342c:	1000111e 	bne	r2,zero,3474 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3430:	e0bffb17 	ldw	r2,-20(fp)
    3434:	10800017 	ldw	r2,0(r2)
    3438:	10800717 	ldw	r2,28(r2)
    343c:	1005003a 	cmpeq	r2,r2,zero
    3440:	1000091e 	bne	r2,zero,3468 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3444:	e0bffb17 	ldw	r2,-20(fp)
    3448:	10800017 	ldw	r2,0(r2)
    344c:	10800717 	ldw	r2,28(r2)
    3450:	e13ffb17 	ldw	r4,-20(fp)
    3454:	e17ffd17 	ldw	r5,-12(fp)
    3458:	e1bffe17 	ldw	r6,-8(fp)
    345c:	103ee83a 	callr	r2
    3460:	e0bffa15 	stw	r2,-24(fp)
    3464:	00000506 	br	347c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3468:	00bfde84 	movi	r2,-134
    346c:	e0bffa15 	stw	r2,-24(fp)
    3470:	00000206 	br	347c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    3474:	00bfebc4 	movi	r2,-81
    3478:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    347c:	e0bffa17 	ldw	r2,-24(fp)
    3480:	1004403a 	cmpge	r2,r2,zero
    3484:	1000071e 	bne	r2,zero,34a4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    3488:	00034bc0 	call	34bc <alt_get_errno>
    348c:	1007883a 	mov	r3,r2
    3490:	e0bffa17 	ldw	r2,-24(fp)
    3494:	0085c83a 	sub	r2,zero,r2
    3498:	18800015 	stw	r2,0(r3)
    rc = -1;
    349c:	00bfffc4 	movi	r2,-1
    34a0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    34a4:	e0bffa17 	ldw	r2,-24(fp)
}
    34a8:	e037883a 	mov	sp,fp
    34ac:	dfc00117 	ldw	ra,4(sp)
    34b0:	df000017 	ldw	fp,0(sp)
    34b4:	dec00204 	addi	sp,sp,8
    34b8:	f800283a 	ret

000034bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34bc:	defffd04 	addi	sp,sp,-12
    34c0:	dfc00215 	stw	ra,8(sp)
    34c4:	df000115 	stw	fp,4(sp)
    34c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    34cc:	00800034 	movhi	r2,0
    34d0:	109df304 	addi	r2,r2,30668
    34d4:	10800017 	ldw	r2,0(r2)
    34d8:	1005003a 	cmpeq	r2,r2,zero
    34dc:	1000061e 	bne	r2,zero,34f8 <alt_get_errno+0x3c>
    34e0:	00800034 	movhi	r2,0
    34e4:	109df304 	addi	r2,r2,30668
    34e8:	10800017 	ldw	r2,0(r2)
    34ec:	103ee83a 	callr	r2
    34f0:	e0bfff15 	stw	r2,-4(fp)
    34f4:	00000306 	br	3504 <alt_get_errno+0x48>
    34f8:	00800074 	movhi	r2,1
    34fc:	10a4f004 	addi	r2,r2,-27712
    3500:	e0bfff15 	stw	r2,-4(fp)
    3504:	e0bfff17 	ldw	r2,-4(fp)
}
    3508:	e037883a 	mov	sp,fp
    350c:	dfc00117 	ldw	ra,4(sp)
    3510:	df000017 	ldw	fp,0(sp)
    3514:	dec00204 	addi	sp,sp,8
    3518:	f800283a 	ret

0000351c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    351c:	defffd04 	addi	sp,sp,-12
    3520:	dfc00215 	stw	ra,8(sp)
    3524:	df000115 	stw	fp,4(sp)
    3528:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    352c:	0009883a 	mov	r4,zero
    3530:	0003ba80 	call	3ba8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3534:	0003bdc0 	call	3bdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3538:	01000034 	movhi	r4,0
    353c:	2116d104 	addi	r4,r4,23364
    3540:	01400034 	movhi	r5,0
    3544:	2956d104 	addi	r5,r5,23364
    3548:	01800034 	movhi	r6,0
    354c:	3196d104 	addi	r6,r6,23364
    3550:	0004f980 	call	4f98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3554:	0004d480 	call	4d48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3558:	01000034 	movhi	r4,0
    355c:	21136b04 	addi	r4,r4,19884
    3560:	00056c40 	call	56c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3564:	d1270717 	ldw	r4,-25572(gp)
    3568:	d1670817 	ldw	r5,-25568(gp)
    356c:	d1a70917 	ldw	r6,-25564(gp)
    3570:	00001f40 	call	1f4 <main>
    3574:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3578:	01000044 	movi	r4,1
    357c:	0002ef40 	call	2ef4 <close>
  exit (result);
    3580:	e13fff17 	ldw	r4,-4(fp)
    3584:	00056d80 	call	56d8 <exit>

00003588 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3588:	defffe04 	addi	sp,sp,-8
    358c:	df000115 	stw	fp,4(sp)
    3590:	df000104 	addi	fp,sp,4
    3594:	e13fff15 	stw	r4,-4(fp)
}
    3598:	e037883a 	mov	sp,fp
    359c:	df000017 	ldw	fp,0(sp)
    35a0:	dec00104 	addi	sp,sp,4
    35a4:	f800283a 	ret

000035a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    35a8:	defffe04 	addi	sp,sp,-8
    35ac:	df000115 	stw	fp,4(sp)
    35b0:	df000104 	addi	fp,sp,4
    35b4:	e13fff15 	stw	r4,-4(fp)
}
    35b8:	e037883a 	mov	sp,fp
    35bc:	df000017 	ldw	fp,0(sp)
    35c0:	dec00104 	addi	sp,sp,4
    35c4:	f800283a 	ret

000035c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    35c8:	defff704 	addi	sp,sp,-36
    35cc:	dfc00815 	stw	ra,32(sp)
    35d0:	df000715 	stw	fp,28(sp)
    35d4:	df000704 	addi	fp,sp,28
    35d8:	e13ffb15 	stw	r4,-20(fp)
    35dc:	e17ffc15 	stw	r5,-16(fp)
    35e0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35e4:	e0bffb17 	ldw	r2,-20(fp)
    35e8:	1004803a 	cmplt	r2,r2,zero
    35ec:	1000091e 	bne	r2,zero,3614 <read+0x4c>
    35f0:	e13ffb17 	ldw	r4,-20(fp)
    35f4:	01400304 	movi	r5,12
    35f8:	00004240 	call	424 <__mulsi3>
    35fc:	1007883a 	mov	r3,r2
    3600:	00800034 	movhi	r2,0
    3604:	10990f04 	addi	r2,r2,25660
    3608:	1887883a 	add	r3,r3,r2
    360c:	e0ffff15 	stw	r3,-4(fp)
    3610:	00000106 	br	3618 <read+0x50>
    3614:	e03fff15 	stw	zero,-4(fp)
    3618:	e0bfff17 	ldw	r2,-4(fp)
    361c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3620:	e0bffa17 	ldw	r2,-24(fp)
    3624:	1005003a 	cmpeq	r2,r2,zero
    3628:	1000241e 	bne	r2,zero,36bc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    362c:	e0bffa17 	ldw	r2,-24(fp)
    3630:	10800217 	ldw	r2,8(r2)
    3634:	108000cc 	andi	r2,r2,3
    3638:	10800060 	cmpeqi	r2,r2,1
    363c:	10001a1e 	bne	r2,zero,36a8 <read+0xe0>
    3640:	e0bffa17 	ldw	r2,-24(fp)
    3644:	10800017 	ldw	r2,0(r2)
    3648:	10800517 	ldw	r2,20(r2)
    364c:	1005003a 	cmpeq	r2,r2,zero
    3650:	1000151e 	bne	r2,zero,36a8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3654:	e0bffa17 	ldw	r2,-24(fp)
    3658:	10800017 	ldw	r2,0(r2)
    365c:	10800517 	ldw	r2,20(r2)
    3660:	e17ffc17 	ldw	r5,-16(fp)
    3664:	e1bffd17 	ldw	r6,-12(fp)
    3668:	e13ffa17 	ldw	r4,-24(fp)
    366c:	103ee83a 	callr	r2
    3670:	e0bff915 	stw	r2,-28(fp)
    3674:	e0bff917 	ldw	r2,-28(fp)
    3678:	1004403a 	cmpge	r2,r2,zero
    367c:	1000071e 	bne	r2,zero,369c <read+0xd4>
        {
          ALT_ERRNO = -rval;
    3680:	00036ec0 	call	36ec <alt_get_errno>
    3684:	e0fff917 	ldw	r3,-28(fp)
    3688:	00c7c83a 	sub	r3,zero,r3
    368c:	10c00015 	stw	r3,0(r2)
          return -1;
    3690:	00bfffc4 	movi	r2,-1
    3694:	e0bffe15 	stw	r2,-8(fp)
    3698:	00000e06 	br	36d4 <read+0x10c>
        }
        return rval;
    369c:	e0bff917 	ldw	r2,-28(fp)
    36a0:	e0bffe15 	stw	r2,-8(fp)
    36a4:	00000b06 	br	36d4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    36a8:	00036ec0 	call	36ec <alt_get_errno>
    36ac:	1007883a 	mov	r3,r2
    36b0:	00800344 	movi	r2,13
    36b4:	18800015 	stw	r2,0(r3)
    36b8:	00000406 	br	36cc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    36bc:	00036ec0 	call	36ec <alt_get_errno>
    36c0:	1007883a 	mov	r3,r2
    36c4:	00801444 	movi	r2,81
    36c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    36cc:	00bfffc4 	movi	r2,-1
    36d0:	e0bffe15 	stw	r2,-8(fp)
    36d4:	e0bffe17 	ldw	r2,-8(fp)
}
    36d8:	e037883a 	mov	sp,fp
    36dc:	dfc00117 	ldw	ra,4(sp)
    36e0:	df000017 	ldw	fp,0(sp)
    36e4:	dec00204 	addi	sp,sp,8
    36e8:	f800283a 	ret

000036ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    36ec:	defffd04 	addi	sp,sp,-12
    36f0:	dfc00215 	stw	ra,8(sp)
    36f4:	df000115 	stw	fp,4(sp)
    36f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    36fc:	00800034 	movhi	r2,0
    3700:	109df304 	addi	r2,r2,30668
    3704:	10800017 	ldw	r2,0(r2)
    3708:	1005003a 	cmpeq	r2,r2,zero
    370c:	1000061e 	bne	r2,zero,3728 <alt_get_errno+0x3c>
    3710:	00800034 	movhi	r2,0
    3714:	109df304 	addi	r2,r2,30668
    3718:	10800017 	ldw	r2,0(r2)
    371c:	103ee83a 	callr	r2
    3720:	e0bfff15 	stw	r2,-4(fp)
    3724:	00000306 	br	3734 <alt_get_errno+0x48>
    3728:	00800074 	movhi	r2,1
    372c:	10a4f004 	addi	r2,r2,-27712
    3730:	e0bfff15 	stw	r2,-4(fp)
    3734:	e0bfff17 	ldw	r2,-4(fp)
}
    3738:	e037883a 	mov	sp,fp
    373c:	dfc00117 	ldw	ra,4(sp)
    3740:	df000017 	ldw	fp,0(sp)
    3744:	dec00204 	addi	sp,sp,8
    3748:	f800283a 	ret

0000374c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    374c:	defffc04 	addi	sp,sp,-16
    3750:	dfc00315 	stw	ra,12(sp)
    3754:	df000215 	stw	fp,8(sp)
    3758:	dc000115 	stw	r16,4(sp)
    375c:	df000104 	addi	fp,sp,4
    3760:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3764:	e0bfff17 	ldw	r2,-4(fp)
    3768:	108000d0 	cmplti	r2,r2,3
    376c:	10000f1e 	bne	r2,zero,37ac <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    3770:	e13fff17 	ldw	r4,-4(fp)
    3774:	04000034 	movhi	r16,0
    3778:	84190f04 	addi	r16,r16,25660
    377c:	01400304 	movi	r5,12
    3780:	00004240 	call	424 <__mulsi3>
    3784:	1405883a 	add	r2,r2,r16
    3788:	10800204 	addi	r2,r2,8
    378c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3790:	e13fff17 	ldw	r4,-4(fp)
    3794:	04000034 	movhi	r16,0
    3798:	84190f04 	addi	r16,r16,25660
    379c:	01400304 	movi	r5,12
    37a0:	00004240 	call	424 <__mulsi3>
    37a4:	1405883a 	add	r2,r2,r16
    37a8:	10000015 	stw	zero,0(r2)
  }
}
    37ac:	e037883a 	mov	sp,fp
    37b0:	dfc00217 	ldw	ra,8(sp)
    37b4:	df000117 	ldw	fp,4(sp)
    37b8:	dc000017 	ldw	r16,0(sp)
    37bc:	dec00304 	addi	sp,sp,12
    37c0:	f800283a 	ret

000037c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    37c4:	defff804 	addi	sp,sp,-32
    37c8:	df000715 	stw	fp,28(sp)
    37cc:	df000704 	addi	fp,sp,28
    37d0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37d4:	0005303a 	rdctl	r2,status
    37d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37dc:	e0fffb17 	ldw	r3,-20(fp)
    37e0:	00bfff84 	movi	r2,-2
    37e4:	1884703a 	and	r2,r3,r2
    37e8:	1001703a 	wrctl	status,r2
  
  return context;
    37ec:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    37f0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    37f4:	d0a00a17 	ldw	r2,-32728(gp)
    37f8:	10c000c4 	addi	r3,r2,3
    37fc:	00bfff04 	movi	r2,-4
    3800:	1884703a 	and	r2,r3,r2
    3804:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3808:	d0e00a17 	ldw	r3,-32728(gp)
    380c:	e0bffe17 	ldw	r2,-8(fp)
    3810:	1887883a 	add	r3,r3,r2
    3814:	00802034 	movhi	r2,128
    3818:	10800004 	addi	r2,r2,0
    381c:	10c0072e 	bgeu	r2,r3,383c <sbrk+0x78>
    3820:	e0bffd17 	ldw	r2,-12(fp)
    3824:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3828:	e0bffa17 	ldw	r2,-24(fp)
    382c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3830:	00bfffc4 	movi	r2,-1
    3834:	e0bfff15 	stw	r2,-4(fp)
    3838:	00000c06 	br	386c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    383c:	d0a00a17 	ldw	r2,-32728(gp)
    3840:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    3844:	d0e00a17 	ldw	r3,-32728(gp)
    3848:	e0bffe17 	ldw	r2,-8(fp)
    384c:	1885883a 	add	r2,r3,r2
    3850:	d0a00a15 	stw	r2,-32728(gp)
    3854:	e0bffd17 	ldw	r2,-12(fp)
    3858:	e0bff915 	stw	r2,-28(fp)
    385c:	e0bff917 	ldw	r2,-28(fp)
    3860:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3864:	e0bffc17 	ldw	r2,-16(fp)
    3868:	e0bfff15 	stw	r2,-4(fp)
    386c:	e0bfff17 	ldw	r2,-4(fp)
} 
    3870:	e037883a 	mov	sp,fp
    3874:	df000017 	ldw	fp,0(sp)
    3878:	dec00104 	addi	sp,sp,4
    387c:	f800283a 	ret

00003880 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3880:	defffa04 	addi	sp,sp,-24
    3884:	df000515 	stw	fp,20(sp)
    3888:	df000504 	addi	fp,sp,20
    388c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3890:	0005303a 	rdctl	r2,status
    3894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3898:	e0fffd17 	ldw	r3,-12(fp)
    389c:	00bfff84 	movi	r2,-2
    38a0:	1884703a 	and	r2,r3,r2
    38a4:	1001703a 	wrctl	status,r2
  
  return context;
    38a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    38ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    38b0:	e0bfff17 	ldw	r2,-4(fp)
    38b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    38b8:	e0bffc17 	ldw	r2,-16(fp)
    38bc:	10c00017 	ldw	r3,0(r2)
    38c0:	e0bffc17 	ldw	r2,-16(fp)
    38c4:	10800117 	ldw	r2,4(r2)
    38c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    38cc:	e0bffc17 	ldw	r2,-16(fp)
    38d0:	10c00117 	ldw	r3,4(r2)
    38d4:	e0bffc17 	ldw	r2,-16(fp)
    38d8:	10800017 	ldw	r2,0(r2)
    38dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    38e0:	e0fffc17 	ldw	r3,-16(fp)
    38e4:	e0bffc17 	ldw	r2,-16(fp)
    38e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    38ec:	e0fffc17 	ldw	r3,-16(fp)
    38f0:	e0bffc17 	ldw	r2,-16(fp)
    38f4:	18800015 	stw	r2,0(r3)
    38f8:	e0bffe17 	ldw	r2,-8(fp)
    38fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3900:	e0bffb17 	ldw	r2,-20(fp)
    3904:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3908:	e037883a 	mov	sp,fp
    390c:	df000017 	ldw	fp,0(sp)
    3910:	dec00104 	addi	sp,sp,4
    3914:	f800283a 	ret

00003918 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3918:	defffb04 	addi	sp,sp,-20
    391c:	dfc00415 	stw	ra,16(sp)
    3920:	df000315 	stw	fp,12(sp)
    3924:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3928:	d0a00b17 	ldw	r2,-32724(gp)
    392c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3930:	d0a70b17 	ldw	r2,-25556(gp)
    3934:	10800044 	addi	r2,r2,1
    3938:	d0a70b15 	stw	r2,-25556(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    393c:	00003106 	br	3a04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    3940:	e0bffe17 	ldw	r2,-8(fp)
    3944:	10800017 	ldw	r2,0(r2)
    3948:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    394c:	e0bffe17 	ldw	r2,-8(fp)
    3950:	10800403 	ldbu	r2,16(r2)
    3954:	10803fcc 	andi	r2,r2,255
    3958:	1005003a 	cmpeq	r2,r2,zero
    395c:	1000051e 	bne	r2,zero,3974 <alt_tick+0x5c>
    3960:	d0a70b17 	ldw	r2,-25556(gp)
    3964:	1004c03a 	cmpne	r2,r2,zero
    3968:	1000021e 	bne	r2,zero,3974 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    396c:	e0bffe17 	ldw	r2,-8(fp)
    3970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3974:	e0bffe17 	ldw	r2,-8(fp)
    3978:	10c00217 	ldw	r3,8(r2)
    397c:	d0a70b17 	ldw	r2,-25556(gp)
    3980:	10c01e36 	bltu	r2,r3,39fc <alt_tick+0xe4>
    3984:	e0bffe17 	ldw	r2,-8(fp)
    3988:	10800403 	ldbu	r2,16(r2)
    398c:	10803fcc 	andi	r2,r2,255
    3990:	1004c03a 	cmpne	r2,r2,zero
    3994:	1000191e 	bne	r2,zero,39fc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    3998:	e0bffe17 	ldw	r2,-8(fp)
    399c:	10c00317 	ldw	r3,12(r2)
    39a0:	e0bffe17 	ldw	r2,-8(fp)
    39a4:	11000517 	ldw	r4,20(r2)
    39a8:	183ee83a 	callr	r3
    39ac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    39b0:	e0bffd17 	ldw	r2,-12(fp)
    39b4:	1004c03a 	cmpne	r2,r2,zero
    39b8:	1000031e 	bne	r2,zero,39c8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    39bc:	e13ffe17 	ldw	r4,-8(fp)
    39c0:	00038800 	call	3880 <alt_alarm_stop>
    39c4:	00000d06 	br	39fc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    39c8:	e0bffe17 	ldw	r2,-8(fp)
    39cc:	10c00217 	ldw	r3,8(r2)
    39d0:	e0bffd17 	ldw	r2,-12(fp)
    39d4:	1887883a 	add	r3,r3,r2
    39d8:	e0bffe17 	ldw	r2,-8(fp)
    39dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    39e0:	e0bffe17 	ldw	r2,-8(fp)
    39e4:	10c00217 	ldw	r3,8(r2)
    39e8:	d0a70b17 	ldw	r2,-25556(gp)
    39ec:	1880032e 	bgeu	r3,r2,39fc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    39f0:	e0fffe17 	ldw	r3,-8(fp)
    39f4:	00800044 	movi	r2,1
    39f8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    39fc:	e0bfff17 	ldw	r2,-4(fp)
    3a00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3a04:	d0e00b04 	addi	r3,gp,-32724
    3a08:	e0bffe17 	ldw	r2,-8(fp)
    3a0c:	10ffcc1e 	bne	r2,r3,3940 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    3a10:	e037883a 	mov	sp,fp
    3a14:	dfc00117 	ldw	ra,4(sp)
    3a18:	df000017 	ldw	fp,0(sp)
    3a1c:	dec00204 	addi	sp,sp,8
    3a20:	f800283a 	ret

00003a24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3a24:	defff704 	addi	sp,sp,-36
    3a28:	dfc00815 	stw	ra,32(sp)
    3a2c:	df000715 	stw	fp,28(sp)
    3a30:	df000704 	addi	fp,sp,28
    3a34:	e13ffb15 	stw	r4,-20(fp)
    3a38:	e17ffc15 	stw	r5,-16(fp)
    3a3c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a40:	e0bffb17 	ldw	r2,-20(fp)
    3a44:	1004803a 	cmplt	r2,r2,zero
    3a48:	1000091e 	bne	r2,zero,3a70 <write+0x4c>
    3a4c:	e13ffb17 	ldw	r4,-20(fp)
    3a50:	01400304 	movi	r5,12
    3a54:	00004240 	call	424 <__mulsi3>
    3a58:	1007883a 	mov	r3,r2
    3a5c:	00800034 	movhi	r2,0
    3a60:	10990f04 	addi	r2,r2,25660
    3a64:	1887883a 	add	r3,r3,r2
    3a68:	e0ffff15 	stw	r3,-4(fp)
    3a6c:	00000106 	br	3a74 <write+0x50>
    3a70:	e03fff15 	stw	zero,-4(fp)
    3a74:	e0bfff17 	ldw	r2,-4(fp)
    3a78:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3a7c:	e0bffa17 	ldw	r2,-24(fp)
    3a80:	1005003a 	cmpeq	r2,r2,zero
    3a84:	1000241e 	bne	r2,zero,3b18 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3a88:	e0bffa17 	ldw	r2,-24(fp)
    3a8c:	10800217 	ldw	r2,8(r2)
    3a90:	108000cc 	andi	r2,r2,3
    3a94:	1005003a 	cmpeq	r2,r2,zero
    3a98:	10001a1e 	bne	r2,zero,3b04 <write+0xe0>
    3a9c:	e0bffa17 	ldw	r2,-24(fp)
    3aa0:	10800017 	ldw	r2,0(r2)
    3aa4:	10800617 	ldw	r2,24(r2)
    3aa8:	1005003a 	cmpeq	r2,r2,zero
    3aac:	1000151e 	bne	r2,zero,3b04 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3ab0:	e0bffa17 	ldw	r2,-24(fp)
    3ab4:	10800017 	ldw	r2,0(r2)
    3ab8:	10800617 	ldw	r2,24(r2)
    3abc:	e17ffc17 	ldw	r5,-16(fp)
    3ac0:	e1bffd17 	ldw	r6,-12(fp)
    3ac4:	e13ffa17 	ldw	r4,-24(fp)
    3ac8:	103ee83a 	callr	r2
    3acc:	e0bff915 	stw	r2,-28(fp)
    3ad0:	e0bff917 	ldw	r2,-28(fp)
    3ad4:	1004403a 	cmpge	r2,r2,zero
    3ad8:	1000071e 	bne	r2,zero,3af8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    3adc:	0003b480 	call	3b48 <alt_get_errno>
    3ae0:	e0fff917 	ldw	r3,-28(fp)
    3ae4:	00c7c83a 	sub	r3,zero,r3
    3ae8:	10c00015 	stw	r3,0(r2)
        return -1;
    3aec:	00bfffc4 	movi	r2,-1
    3af0:	e0bffe15 	stw	r2,-8(fp)
    3af4:	00000e06 	br	3b30 <write+0x10c>
      }
      return rval;
    3af8:	e0bff917 	ldw	r2,-28(fp)
    3afc:	e0bffe15 	stw	r2,-8(fp)
    3b00:	00000b06 	br	3b30 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3b04:	0003b480 	call	3b48 <alt_get_errno>
    3b08:	1007883a 	mov	r3,r2
    3b0c:	00800344 	movi	r2,13
    3b10:	18800015 	stw	r2,0(r3)
    3b14:	00000406 	br	3b28 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3b18:	0003b480 	call	3b48 <alt_get_errno>
    3b1c:	1007883a 	mov	r3,r2
    3b20:	00801444 	movi	r2,81
    3b24:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3b28:	00bfffc4 	movi	r2,-1
    3b2c:	e0bffe15 	stw	r2,-8(fp)
    3b30:	e0bffe17 	ldw	r2,-8(fp)
}
    3b34:	e037883a 	mov	sp,fp
    3b38:	dfc00117 	ldw	ra,4(sp)
    3b3c:	df000017 	ldw	fp,0(sp)
    3b40:	dec00204 	addi	sp,sp,8
    3b44:	f800283a 	ret

00003b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3b48:	defffd04 	addi	sp,sp,-12
    3b4c:	dfc00215 	stw	ra,8(sp)
    3b50:	df000115 	stw	fp,4(sp)
    3b54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3b58:	00800034 	movhi	r2,0
    3b5c:	109df304 	addi	r2,r2,30668
    3b60:	10800017 	ldw	r2,0(r2)
    3b64:	1005003a 	cmpeq	r2,r2,zero
    3b68:	1000061e 	bne	r2,zero,3b84 <alt_get_errno+0x3c>
    3b6c:	00800034 	movhi	r2,0
    3b70:	109df304 	addi	r2,r2,30668
    3b74:	10800017 	ldw	r2,0(r2)
    3b78:	103ee83a 	callr	r2
    3b7c:	e0bfff15 	stw	r2,-4(fp)
    3b80:	00000306 	br	3b90 <alt_get_errno+0x48>
    3b84:	00800074 	movhi	r2,1
    3b88:	10a4f004 	addi	r2,r2,-27712
    3b8c:	e0bfff15 	stw	r2,-4(fp)
    3b90:	e0bfff17 	ldw	r2,-4(fp)
}
    3b94:	e037883a 	mov	sp,fp
    3b98:	dfc00117 	ldw	ra,4(sp)
    3b9c:	df000017 	ldw	fp,0(sp)
    3ba0:	dec00204 	addi	sp,sp,8
    3ba4:	f800283a 	ret

00003ba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3ba8:	defffd04 	addi	sp,sp,-12
    3bac:	dfc00215 	stw	ra,8(sp)
    3bb0:	df000115 	stw	fp,4(sp)
    3bb4:	df000104 	addi	fp,sp,4
    3bb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, CPU);
    3bbc:	00054b40 	call	54b4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3bc0:	00800044 	movi	r2,1
    3bc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3bdc:	defffe04 	addi	sp,sp,-8
    3be0:	dfc00115 	stw	ra,4(sp)
    3be4:	df000015 	stw	fp,0(sp)
    3be8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    3bec:	01040034 	movhi	r4,4096
    3bf0:	21080004 	addi	r4,r4,8192
    3bf4:	000b883a 	mov	r5,zero
    3bf8:	000d883a 	mov	r6,zero
    3bfc:	01c00204 	movi	r7,8
    3c00:	00047f80 	call	47f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3c04:	01000034 	movhi	r4,0
    3c08:	21197904 	addi	r4,r4,26084
    3c0c:	000b883a 	mov	r5,zero
    3c10:	01800204 	movi	r6,8
    3c14:	0003e240 	call	3e24 <altera_avalon_jtag_uart_init>
    3c18:	01000034 	movhi	r4,0
    3c1c:	21196f04 	addi	r4,r4,26044
    3c20:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    3c24:	01000034 	movhi	r4,0
    3c28:	211d8704 	addi	r4,r4,30236
    3c2c:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    3c30:	01000034 	movhi	r4,0
    3c34:	211d9204 	addi	r4,r4,30280
    3c38:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    3c3c:	01000034 	movhi	r4,0
    3c40:	211d9d04 	addi	r4,r4,30324
    3c44:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    3c48:	01000034 	movhi	r4,0
    3c4c:	211da804 	addi	r4,r4,30368
    3c50:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    3c54:	01000034 	movhi	r4,0
    3c58:	211db304 	addi	r4,r4,30412
    3c5c:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    3c60:	01000034 	movhi	r4,0
    3c64:	211dbe04 	addi	r4,r4,30456
    3c68:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    3c6c:	01000034 	movhi	r4,0
    3c70:	211dc904 	addi	r4,r4,30500
    3c74:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_switches);
    3c78:	01000034 	movhi	r4,0
    3c7c:	211dd404 	addi	r4,r4,30544
    3c80:	0003ca40 	call	3ca4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_port);
    3c84:	01000034 	movhi	r4,0
    3c88:	211ddf04 	addi	r4,r4,30588
    3c8c:	0003ca40 	call	3ca4 <alt_dev_reg>
}
    3c90:	e037883a 	mov	sp,fp
    3c94:	dfc00117 	ldw	ra,4(sp)
    3c98:	df000017 	ldw	fp,0(sp)
    3c9c:	dec00204 	addi	sp,sp,8
    3ca0:	f800283a 	ret

00003ca4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3ca4:	defffd04 	addi	sp,sp,-12
    3ca8:	dfc00215 	stw	ra,8(sp)
    3cac:	df000115 	stw	fp,4(sp)
    3cb0:	df000104 	addi	fp,sp,4
    3cb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3cb8:	e13fff17 	ldw	r4,-4(fp)
    3cbc:	01400034 	movhi	r5,0
    3cc0:	295df004 	addi	r5,r5,30656
    3cc4:	0004c340 	call	4c34 <alt_dev_llist_insert>
}
    3cc8:	e037883a 	mov	sp,fp
    3ccc:	dfc00117 	ldw	ra,4(sp)
    3cd0:	df000017 	ldw	fp,0(sp)
    3cd4:	dec00204 	addi	sp,sp,8
    3cd8:	f800283a 	ret

00003cdc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3cdc:	defffa04 	addi	sp,sp,-24
    3ce0:	dfc00515 	stw	ra,20(sp)
    3ce4:	df000415 	stw	fp,16(sp)
    3ce8:	df000404 	addi	fp,sp,16
    3cec:	e13ffd15 	stw	r4,-12(fp)
    3cf0:	e17ffe15 	stw	r5,-8(fp)
    3cf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3cf8:	e0bffd17 	ldw	r2,-12(fp)
    3cfc:	10800017 	ldw	r2,0(r2)
    3d00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3d04:	e0bffc17 	ldw	r2,-16(fp)
    3d08:	11000a04 	addi	r4,r2,40
    3d0c:	e0bffd17 	ldw	r2,-12(fp)
    3d10:	11c00217 	ldw	r7,8(r2)
    3d14:	e17ffe17 	ldw	r5,-8(fp)
    3d18:	e1bfff17 	ldw	r6,-4(fp)
    3d1c:	00043200 	call	4320 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3d20:	e037883a 	mov	sp,fp
    3d24:	dfc00117 	ldw	ra,4(sp)
    3d28:	df000017 	ldw	fp,0(sp)
    3d2c:	dec00204 	addi	sp,sp,8
    3d30:	f800283a 	ret

00003d34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3d34:	defffa04 	addi	sp,sp,-24
    3d38:	dfc00515 	stw	ra,20(sp)
    3d3c:	df000415 	stw	fp,16(sp)
    3d40:	df000404 	addi	fp,sp,16
    3d44:	e13ffd15 	stw	r4,-12(fp)
    3d48:	e17ffe15 	stw	r5,-8(fp)
    3d4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3d50:	e0bffd17 	ldw	r2,-12(fp)
    3d54:	10800017 	ldw	r2,0(r2)
    3d58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3d5c:	e0bffc17 	ldw	r2,-16(fp)
    3d60:	11000a04 	addi	r4,r2,40
    3d64:	e0bffd17 	ldw	r2,-12(fp)
    3d68:	11c00217 	ldw	r7,8(r2)
    3d6c:	e17ffe17 	ldw	r5,-8(fp)
    3d70:	e1bfff17 	ldw	r6,-4(fp)
    3d74:	00045440 	call	4544 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3d78:	e037883a 	mov	sp,fp
    3d7c:	dfc00117 	ldw	ra,4(sp)
    3d80:	df000017 	ldw	fp,0(sp)
    3d84:	dec00204 	addi	sp,sp,8
    3d88:	f800283a 	ret

00003d8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3d8c:	defffc04 	addi	sp,sp,-16
    3d90:	dfc00315 	stw	ra,12(sp)
    3d94:	df000215 	stw	fp,8(sp)
    3d98:	df000204 	addi	fp,sp,8
    3d9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3da0:	e0bfff17 	ldw	r2,-4(fp)
    3da4:	10800017 	ldw	r2,0(r2)
    3da8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3dac:	e0bffe17 	ldw	r2,-8(fp)
    3db0:	11000a04 	addi	r4,r2,40
    3db4:	e0bfff17 	ldw	r2,-4(fp)
    3db8:	11400217 	ldw	r5,8(r2)
    3dbc:	00041b80 	call	41b8 <altera_avalon_jtag_uart_close>
}
    3dc0:	e037883a 	mov	sp,fp
    3dc4:	dfc00117 	ldw	ra,4(sp)
    3dc8:	df000017 	ldw	fp,0(sp)
    3dcc:	dec00204 	addi	sp,sp,8
    3dd0:	f800283a 	ret

00003dd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3dd4:	defffa04 	addi	sp,sp,-24
    3dd8:	dfc00515 	stw	ra,20(sp)
    3ddc:	df000415 	stw	fp,16(sp)
    3de0:	df000404 	addi	fp,sp,16
    3de4:	e13ffd15 	stw	r4,-12(fp)
    3de8:	e17ffe15 	stw	r5,-8(fp)
    3dec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3df0:	e0bffd17 	ldw	r2,-12(fp)
    3df4:	10800017 	ldw	r2,0(r2)
    3df8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3dfc:	e0bffc17 	ldw	r2,-16(fp)
    3e00:	11000a04 	addi	r4,r2,40
    3e04:	e17ffe17 	ldw	r5,-8(fp)
    3e08:	e1bfff17 	ldw	r6,-4(fp)
    3e0c:	000422c0 	call	422c <altera_avalon_jtag_uart_ioctl>
}
    3e10:	e037883a 	mov	sp,fp
    3e14:	dfc00117 	ldw	ra,4(sp)
    3e18:	df000017 	ldw	fp,0(sp)
    3e1c:	dec00204 	addi	sp,sp,8
    3e20:	f800283a 	ret

00003e24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3e24:	defffb04 	addi	sp,sp,-20
    3e28:	dfc00415 	stw	ra,16(sp)
    3e2c:	df000315 	stw	fp,12(sp)
    3e30:	df000304 	addi	fp,sp,12
    3e34:	e13ffd15 	stw	r4,-12(fp)
    3e38:	e17ffe15 	stw	r5,-8(fp)
    3e3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3e40:	e0fffd17 	ldw	r3,-12(fp)
    3e44:	00800044 	movi	r2,1
    3e48:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3e4c:	e0bffd17 	ldw	r2,-12(fp)
    3e50:	10800017 	ldw	r2,0(r2)
    3e54:	11000104 	addi	r4,r2,4
    3e58:	e0bffd17 	ldw	r2,-12(fp)
    3e5c:	10800817 	ldw	r2,32(r2)
    3e60:	1007883a 	mov	r3,r2
    3e64:	2005883a 	mov	r2,r4
    3e68:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    3e6c:	e13fff17 	ldw	r4,-4(fp)
    3e70:	e17ffd17 	ldw	r5,-12(fp)
    3e74:	01800034 	movhi	r6,0
    3e78:	318fb704 	addi	r6,r6,16092
    3e7c:	00050100 	call	5010 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3e80:	e0bffd17 	ldw	r2,-12(fp)
    3e84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3e88:	e0bffd17 	ldw	r2,-12(fp)
    3e8c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3e90:	00800074 	movhi	r2,1
    3e94:	10a4f404 	addi	r2,r2,-27696
    3e98:	10800017 	ldw	r2,0(r2)
    3e9c:	100b883a 	mov	r5,r2
    3ea0:	01800034 	movhi	r6,0
    3ea4:	31904204 	addi	r6,r6,16648
    3ea8:	e1fffd17 	ldw	r7,-12(fp)
    3eac:	0002da00 	call	2da0 <alt_alarm_start>
    3eb0:	1004403a 	cmpge	r2,r2,zero
    3eb4:	1000041e 	bne	r2,zero,3ec8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3eb8:	e0fffd17 	ldw	r3,-12(fp)
    3ebc:	00a00034 	movhi	r2,32768
    3ec0:	10bfffc4 	addi	r2,r2,-1
    3ec4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3ec8:	e037883a 	mov	sp,fp
    3ecc:	dfc00117 	ldw	ra,4(sp)
    3ed0:	df000017 	ldw	fp,0(sp)
    3ed4:	dec00204 	addi	sp,sp,8
    3ed8:	f800283a 	ret

00003edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3edc:	defff704 	addi	sp,sp,-36
    3ee0:	df000815 	stw	fp,32(sp)
    3ee4:	df000804 	addi	fp,sp,32
    3ee8:	e13ffe15 	stw	r4,-8(fp)
    3eec:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3ef0:	e0bffe17 	ldw	r2,-8(fp)
    3ef4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    3ef8:	e0bffd17 	ldw	r2,-12(fp)
    3efc:	10800017 	ldw	r2,0(r2)
    3f00:	e0bffc15 	stw	r2,-16(fp)
    3f04:	00000006 	br	3f08 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3f08:	e0bffc17 	ldw	r2,-16(fp)
    3f0c:	10800104 	addi	r2,r2,4
    3f10:	10800037 	ldwio	r2,0(r2)
    3f14:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3f18:	e0bffb17 	ldw	r2,-20(fp)
    3f1c:	1080c00c 	andi	r2,r2,768
    3f20:	1005003a 	cmpeq	r2,r2,zero
    3f24:	1000741e 	bne	r2,zero,40f8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3f28:	e0bffb17 	ldw	r2,-20(fp)
    3f2c:	1080400c 	andi	r2,r2,256
    3f30:	1005003a 	cmpeq	r2,r2,zero
    3f34:	1000351e 	bne	r2,zero,400c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3f38:	00800074 	movhi	r2,1
    3f3c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10800a17 	ldw	r2,40(r2)
    3f48:	10800044 	addi	r2,r2,1
    3f4c:	1081ffcc 	andi	r2,r2,2047
    3f50:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    3f54:	e0bffd17 	ldw	r2,-12(fp)
    3f58:	10c00b17 	ldw	r3,44(r2)
    3f5c:	e0bff917 	ldw	r2,-28(fp)
    3f60:	18801626 	beq	r3,r2,3fbc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3f64:	e0bffc17 	ldw	r2,-16(fp)
    3f68:	10800037 	ldwio	r2,0(r2)
    3f6c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3f70:	e0bffa17 	ldw	r2,-24(fp)
    3f74:	10a0000c 	andi	r2,r2,32768
    3f78:	1005003a 	cmpeq	r2,r2,zero
    3f7c:	10000f1e 	bne	r2,zero,3fbc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3f80:	e0bffd17 	ldw	r2,-12(fp)
    3f84:	10c00a17 	ldw	r3,40(r2)
    3f88:	e0bffa17 	ldw	r2,-24(fp)
    3f8c:	1009883a 	mov	r4,r2
    3f90:	e0bffd17 	ldw	r2,-12(fp)
    3f94:	1885883a 	add	r2,r3,r2
    3f98:	10800e04 	addi	r2,r2,56
    3f9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3fa0:	e0bffd17 	ldw	r2,-12(fp)
    3fa4:	10800a17 	ldw	r2,40(r2)
    3fa8:	10800044 	addi	r2,r2,1
    3fac:	10c1ffcc 	andi	r3,r2,2047
    3fb0:	e0bffd17 	ldw	r2,-12(fp)
    3fb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3fb8:	003fe106 	br	3f40 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3fbc:	e0bffa17 	ldw	r2,-24(fp)
    3fc0:	10bfffec 	andhi	r2,r2,65535
    3fc4:	1005003a 	cmpeq	r2,r2,zero
    3fc8:	1000101e 	bne	r2,zero,400c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3fcc:	e0bffd17 	ldw	r2,-12(fp)
    3fd0:	10c00817 	ldw	r3,32(r2)
    3fd4:	00bfff84 	movi	r2,-2
    3fd8:	1886703a 	and	r3,r3,r2
    3fdc:	e0bffd17 	ldw	r2,-12(fp)
    3fe0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3fe4:	e0bffc17 	ldw	r2,-16(fp)
    3fe8:	11000104 	addi	r4,r2,4
    3fec:	e0bffd17 	ldw	r2,-12(fp)
    3ff0:	10800817 	ldw	r2,32(r2)
    3ff4:	1007883a 	mov	r3,r2
    3ff8:	2005883a 	mov	r2,r4
    3ffc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4000:	e0bffc17 	ldw	r2,-16(fp)
    4004:	10800104 	addi	r2,r2,4
    4008:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    400c:	e0bffb17 	ldw	r2,-20(fp)
    4010:	1080800c 	andi	r2,r2,512
    4014:	1005003a 	cmpeq	r2,r2,zero
    4018:	103fbb1e 	bne	r2,zero,3f08 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    401c:	e0bffb17 	ldw	r2,-20(fp)
    4020:	10bfffec 	andhi	r2,r2,65535
    4024:	1004d43a 	srli	r2,r2,16
    4028:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    402c:	00001506 	br	4084 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4030:	e13ffc17 	ldw	r4,-16(fp)
    4034:	e0bffd17 	ldw	r2,-12(fp)
    4038:	10c00d17 	ldw	r3,52(r2)
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	1885883a 	add	r2,r3,r2
    4044:	10820e04 	addi	r2,r2,2104
    4048:	10800003 	ldbu	r2,0(r2)
    404c:	10c03fcc 	andi	r3,r2,255
    4050:	18c0201c 	xori	r3,r3,128
    4054:	18ffe004 	addi	r3,r3,-128
    4058:	2005883a 	mov	r2,r4
    405c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4060:	e0bffd17 	ldw	r2,-12(fp)
    4064:	10800d17 	ldw	r2,52(r2)
    4068:	10800044 	addi	r2,r2,1
    406c:	10c1ffcc 	andi	r3,r2,2047
    4070:	e0bffd17 	ldw	r2,-12(fp)
    4074:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4078:	e0bff817 	ldw	r2,-32(fp)
    407c:	10bfffc4 	addi	r2,r2,-1
    4080:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4084:	e0bff817 	ldw	r2,-32(fp)
    4088:	1005003a 	cmpeq	r2,r2,zero
    408c:	1000051e 	bne	r2,zero,40a4 <altera_avalon_jtag_uart_irq+0x1c8>
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	10c00d17 	ldw	r3,52(r2)
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10800c17 	ldw	r2,48(r2)
    40a0:	18bfe31e 	bne	r3,r2,4030 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    40a4:	e0bff817 	ldw	r2,-32(fp)
    40a8:	1005003a 	cmpeq	r2,r2,zero
    40ac:	103f961e 	bne	r2,zero,3f08 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    40b0:	e0bffd17 	ldw	r2,-12(fp)
    40b4:	10c00817 	ldw	r3,32(r2)
    40b8:	00bfff44 	movi	r2,-3
    40bc:	1886703a 	and	r3,r3,r2
    40c0:	e0bffd17 	ldw	r2,-12(fp)
    40c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    40c8:	e0bffd17 	ldw	r2,-12(fp)
    40cc:	10800017 	ldw	r2,0(r2)
    40d0:	11000104 	addi	r4,r2,4
    40d4:	e0bffd17 	ldw	r2,-12(fp)
    40d8:	10800817 	ldw	r2,32(r2)
    40dc:	1007883a 	mov	r3,r2
    40e0:	2005883a 	mov	r2,r4
    40e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    40e8:	e0bffc17 	ldw	r2,-16(fp)
    40ec:	10800104 	addi	r2,r2,4
    40f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    40f4:	003f8406 	br	3f08 <altera_avalon_jtag_uart_irq+0x2c>
}
    40f8:	e037883a 	mov	sp,fp
    40fc:	df000017 	ldw	fp,0(sp)
    4100:	dec00104 	addi	sp,sp,4
    4104:	f800283a 	ret

00004108 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4108:	defffc04 	addi	sp,sp,-16
    410c:	df000315 	stw	fp,12(sp)
    4110:	df000304 	addi	fp,sp,12
    4114:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4118:	e0bfff17 	ldw	r2,-4(fp)
    411c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4120:	e0bffe17 	ldw	r2,-8(fp)
    4124:	10800017 	ldw	r2,0(r2)
    4128:	10800104 	addi	r2,r2,4
    412c:	10800037 	ldwio	r2,0(r2)
    4130:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4134:	e0bffd17 	ldw	r2,-12(fp)
    4138:	1081000c 	andi	r2,r2,1024
    413c:	1005003a 	cmpeq	r2,r2,zero
    4140:	10000c1e 	bne	r2,zero,4174 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4144:	e0bffe17 	ldw	r2,-8(fp)
    4148:	10800017 	ldw	r2,0(r2)
    414c:	11000104 	addi	r4,r2,4
    4150:	e0bffe17 	ldw	r2,-8(fp)
    4154:	10800817 	ldw	r2,32(r2)
    4158:	10810014 	ori	r2,r2,1024
    415c:	1007883a 	mov	r3,r2
    4160:	2005883a 	mov	r2,r4
    4164:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    4168:	e0bffe17 	ldw	r2,-8(fp)
    416c:	10000915 	stw	zero,36(r2)
    4170:	00000a06 	br	419c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4174:	e0bffe17 	ldw	r2,-8(fp)
    4178:	10c00917 	ldw	r3,36(r2)
    417c:	00a00034 	movhi	r2,32768
    4180:	10bfff04 	addi	r2,r2,-4
    4184:	10c00536 	bltu	r2,r3,419c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    4188:	e0bffe17 	ldw	r2,-8(fp)
    418c:	10800917 	ldw	r2,36(r2)
    4190:	10c00044 	addi	r3,r2,1
    4194:	e0bffe17 	ldw	r2,-8(fp)
    4198:	10c00915 	stw	r3,36(r2)
    419c:	00800074 	movhi	r2,1
    41a0:	10a4f404 	addi	r2,r2,-27696
    41a4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    41a8:	e037883a 	mov	sp,fp
    41ac:	df000017 	ldw	fp,0(sp)
    41b0:	dec00104 	addi	sp,sp,4
    41b4:	f800283a 	ret

000041b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    41b8:	defffc04 	addi	sp,sp,-16
    41bc:	df000315 	stw	fp,12(sp)
    41c0:	df000304 	addi	fp,sp,12
    41c4:	e13ffd15 	stw	r4,-12(fp)
    41c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    41cc:	00000706 	br	41ec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    41d0:	e0bffe17 	ldw	r2,-8(fp)
    41d4:	1090000c 	andi	r2,r2,16384
    41d8:	1005003a 	cmpeq	r2,r2,zero
    41dc:	1000031e 	bne	r2,zero,41ec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    41e0:	00bffd44 	movi	r2,-11
    41e4:	e0bfff15 	stw	r2,-4(fp)
    41e8:	00000b06 	br	4218 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    41ec:	e0bffd17 	ldw	r2,-12(fp)
    41f0:	10c00d17 	ldw	r3,52(r2)
    41f4:	e0bffd17 	ldw	r2,-12(fp)
    41f8:	10800c17 	ldw	r2,48(r2)
    41fc:	18800526 	beq	r3,r2,4214 <altera_avalon_jtag_uart_close+0x5c>
    4200:	e0bffd17 	ldw	r2,-12(fp)
    4204:	10c00917 	ldw	r3,36(r2)
    4208:	e0bffd17 	ldw	r2,-12(fp)
    420c:	10800117 	ldw	r2,4(r2)
    4210:	18bfef36 	bltu	r3,r2,41d0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4214:	e03fff15 	stw	zero,-4(fp)
    4218:	e0bfff17 	ldw	r2,-4(fp)
}
    421c:	e037883a 	mov	sp,fp
    4220:	df000017 	ldw	fp,0(sp)
    4224:	dec00104 	addi	sp,sp,4
    4228:	f800283a 	ret

0000422c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    422c:	defff804 	addi	sp,sp,-32
    4230:	df000715 	stw	fp,28(sp)
    4234:	df000704 	addi	fp,sp,28
    4238:	e13ffb15 	stw	r4,-20(fp)
    423c:	e17ffc15 	stw	r5,-16(fp)
    4240:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4244:	00bff9c4 	movi	r2,-25
    4248:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    424c:	e0bffc17 	ldw	r2,-16(fp)
    4250:	e0bfff15 	stw	r2,-4(fp)
    4254:	e0ffff17 	ldw	r3,-4(fp)
    4258:	189a8060 	cmpeqi	r2,r3,27137
    425c:	1000041e 	bne	r2,zero,4270 <altera_avalon_jtag_uart_ioctl+0x44>
    4260:	e0ffff17 	ldw	r3,-4(fp)
    4264:	189a80a0 	cmpeqi	r2,r3,27138
    4268:	10001b1e 	bne	r2,zero,42d8 <altera_avalon_jtag_uart_ioctl+0xac>
    426c:	00002706 	br	430c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4270:	e0bffb17 	ldw	r2,-20(fp)
    4274:	10c00117 	ldw	r3,4(r2)
    4278:	00a00034 	movhi	r2,32768
    427c:	10bfffc4 	addi	r2,r2,-1
    4280:	18802226 	beq	r3,r2,430c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    4284:	e0bffd17 	ldw	r2,-12(fp)
    4288:	10800017 	ldw	r2,0(r2)
    428c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4290:	e0bff917 	ldw	r2,-28(fp)
    4294:	10800090 	cmplti	r2,r2,2
    4298:	1000071e 	bne	r2,zero,42b8 <altera_avalon_jtag_uart_ioctl+0x8c>
    429c:	e0fff917 	ldw	r3,-28(fp)
    42a0:	00a00034 	movhi	r2,32768
    42a4:	10bfffc4 	addi	r2,r2,-1
    42a8:	18800326 	beq	r3,r2,42b8 <altera_avalon_jtag_uart_ioctl+0x8c>
    42ac:	e0bff917 	ldw	r2,-28(fp)
    42b0:	e0bffe15 	stw	r2,-8(fp)
    42b4:	00000306 	br	42c4 <altera_avalon_jtag_uart_ioctl+0x98>
    42b8:	00e00034 	movhi	r3,32768
    42bc:	18ffff84 	addi	r3,r3,-2
    42c0:	e0fffe15 	stw	r3,-8(fp)
    42c4:	e0bffb17 	ldw	r2,-20(fp)
    42c8:	e0fffe17 	ldw	r3,-8(fp)
    42cc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    42d0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    42d4:	00000d06 	br	430c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    42d8:	e0bffb17 	ldw	r2,-20(fp)
    42dc:	10c00117 	ldw	r3,4(r2)
    42e0:	00a00034 	movhi	r2,32768
    42e4:	10bfffc4 	addi	r2,r2,-1
    42e8:	18800826 	beq	r3,r2,430c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    42ec:	e13ffd17 	ldw	r4,-12(fp)
    42f0:	e0bffb17 	ldw	r2,-20(fp)
    42f4:	10c00917 	ldw	r3,36(r2)
    42f8:	e0bffb17 	ldw	r2,-20(fp)
    42fc:	10800117 	ldw	r2,4(r2)
    4300:	1885803a 	cmpltu	r2,r3,r2
    4304:	20800015 	stw	r2,0(r4)
      rc = 0;
    4308:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    430c:	e0bffa17 	ldw	r2,-24(fp)
}
    4310:	e037883a 	mov	sp,fp
    4314:	df000017 	ldw	fp,0(sp)
    4318:	dec00104 	addi	sp,sp,4
    431c:	f800283a 	ret

00004320 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4320:	defff204 	addi	sp,sp,-56
    4324:	dfc00d15 	stw	ra,52(sp)
    4328:	df000c15 	stw	fp,48(sp)
    432c:	df000c04 	addi	fp,sp,48
    4330:	e13ffb15 	stw	r4,-20(fp)
    4334:	e17ffc15 	stw	r5,-16(fp)
    4338:	e1bffd15 	stw	r6,-12(fp)
    433c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    4340:	e0bffc17 	ldw	r2,-16(fp)
    4344:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4348:	00004806 	br	446c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    434c:	e0bffb17 	ldw	r2,-20(fp)
    4350:	10800a17 	ldw	r2,40(r2)
    4354:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4358:	e0bffb17 	ldw	r2,-20(fp)
    435c:	10800b17 	ldw	r2,44(r2)
    4360:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    4364:	e0fff717 	ldw	r3,-36(fp)
    4368:	e0bff617 	ldw	r2,-40(fp)
    436c:	18800536 	bltu	r3,r2,4384 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4370:	e0bff717 	ldw	r2,-36(fp)
    4374:	e0fff617 	ldw	r3,-40(fp)
    4378:	10c5c83a 	sub	r2,r2,r3
    437c:	e0bff815 	stw	r2,-32(fp)
    4380:	00000406 	br	4394 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4384:	00820004 	movi	r2,2048
    4388:	e0fff617 	ldw	r3,-40(fp)
    438c:	10c5c83a 	sub	r2,r2,r3
    4390:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4394:	e0bff817 	ldw	r2,-32(fp)
    4398:	1005003a 	cmpeq	r2,r2,zero
    439c:	10001f1e 	bne	r2,zero,441c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    43a0:	e0fffd17 	ldw	r3,-12(fp)
    43a4:	e0bff817 	ldw	r2,-32(fp)
    43a8:	1880022e 	bgeu	r3,r2,43b4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    43ac:	e0bffd17 	ldw	r2,-12(fp)
    43b0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    43b4:	e0bffb17 	ldw	r2,-20(fp)
    43b8:	10c00e04 	addi	r3,r2,56
    43bc:	e0bff617 	ldw	r2,-40(fp)
    43c0:	1887883a 	add	r3,r3,r2
    43c4:	e0bffa17 	ldw	r2,-24(fp)
    43c8:	1009883a 	mov	r4,r2
    43cc:	180b883a 	mov	r5,r3
    43d0:	e1bff817 	ldw	r6,-32(fp)
    43d4:	00012440 	call	1244 <memcpy>
      ptr   += n;
    43d8:	e0fff817 	ldw	r3,-32(fp)
    43dc:	e0bffa17 	ldw	r2,-24(fp)
    43e0:	10c5883a 	add	r2,r2,r3
    43e4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    43e8:	e0fffd17 	ldw	r3,-12(fp)
    43ec:	e0bff817 	ldw	r2,-32(fp)
    43f0:	1885c83a 	sub	r2,r3,r2
    43f4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    43f8:	e0fff617 	ldw	r3,-40(fp)
    43fc:	e0bff817 	ldw	r2,-32(fp)
    4400:	1885883a 	add	r2,r3,r2
    4404:	10c1ffcc 	andi	r3,r2,2047
    4408:	e0bffb17 	ldw	r2,-20(fp)
    440c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4410:	e0bffd17 	ldw	r2,-12(fp)
    4414:	10800048 	cmpgei	r2,r2,1
    4418:	103fcc1e 	bne	r2,zero,434c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    441c:	e0fffa17 	ldw	r3,-24(fp)
    4420:	e0bffc17 	ldw	r2,-16(fp)
    4424:	1880141e 	bne	r3,r2,4478 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4428:	e0bffe17 	ldw	r2,-8(fp)
    442c:	1090000c 	andi	r2,r2,16384
    4430:	1004c03a 	cmpne	r2,r2,zero
    4434:	1000101e 	bne	r2,zero,4478 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4438:	e0bffb17 	ldw	r2,-20(fp)
    443c:	10c00a17 	ldw	r3,40(r2)
    4440:	e0bff717 	ldw	r2,-36(fp)
    4444:	1880051e 	bne	r3,r2,445c <altera_avalon_jtag_uart_read+0x13c>
    4448:	e0bffb17 	ldw	r2,-20(fp)
    444c:	10c00917 	ldw	r3,36(r2)
    4450:	e0bffb17 	ldw	r2,-20(fp)
    4454:	10800117 	ldw	r2,4(r2)
    4458:	18bff736 	bltu	r3,r2,4438 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    445c:	e0bffb17 	ldw	r2,-20(fp)
    4460:	10c00a17 	ldw	r3,40(r2)
    4464:	e0bff717 	ldw	r2,-36(fp)
    4468:	18800326 	beq	r3,r2,4478 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    446c:	e0bffd17 	ldw	r2,-12(fp)
    4470:	10800048 	cmpgei	r2,r2,1
    4474:	103fb51e 	bne	r2,zero,434c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4478:	e0fffa17 	ldw	r3,-24(fp)
    447c:	e0bffc17 	ldw	r2,-16(fp)
    4480:	18801926 	beq	r3,r2,44e8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4484:	0005303a 	rdctl	r2,status
    4488:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    448c:	e0fff517 	ldw	r3,-44(fp)
    4490:	00bfff84 	movi	r2,-2
    4494:	1884703a 	and	r2,r3,r2
    4498:	1001703a 	wrctl	status,r2
  
  return context;
    449c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    44a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    44a4:	e0bffb17 	ldw	r2,-20(fp)
    44a8:	10800817 	ldw	r2,32(r2)
    44ac:	10c00054 	ori	r3,r2,1
    44b0:	e0bffb17 	ldw	r2,-20(fp)
    44b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    44b8:	e0bffb17 	ldw	r2,-20(fp)
    44bc:	10800017 	ldw	r2,0(r2)
    44c0:	11000104 	addi	r4,r2,4
    44c4:	e0bffb17 	ldw	r2,-20(fp)
    44c8:	10800817 	ldw	r2,32(r2)
    44cc:	1007883a 	mov	r3,r2
    44d0:	2005883a 	mov	r2,r4
    44d4:	10c00035 	stwio	r3,0(r2)
    44d8:	e0bff917 	ldw	r2,-28(fp)
    44dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44e0:	e0bff417 	ldw	r2,-48(fp)
    44e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    44e8:	e0fffa17 	ldw	r3,-24(fp)
    44ec:	e0bffc17 	ldw	r2,-16(fp)
    44f0:	18800526 	beq	r3,r2,4508 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    44f4:	e0fffa17 	ldw	r3,-24(fp)
    44f8:	e0bffc17 	ldw	r2,-16(fp)
    44fc:	1887c83a 	sub	r3,r3,r2
    4500:	e0ffff15 	stw	r3,-4(fp)
    4504:	00000906 	br	452c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    4508:	e0bffe17 	ldw	r2,-8(fp)
    450c:	1090000c 	andi	r2,r2,16384
    4510:	1005003a 	cmpeq	r2,r2,zero
    4514:	1000031e 	bne	r2,zero,4524 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4518:	00bffd44 	movi	r2,-11
    451c:	e0bfff15 	stw	r2,-4(fp)
    4520:	00000206 	br	452c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    4524:	00bffec4 	movi	r2,-5
    4528:	e0bfff15 	stw	r2,-4(fp)
    452c:	e0bfff17 	ldw	r2,-4(fp)
}
    4530:	e037883a 	mov	sp,fp
    4534:	dfc00117 	ldw	ra,4(sp)
    4538:	df000017 	ldw	fp,0(sp)
    453c:	dec00204 	addi	sp,sp,8
    4540:	f800283a 	ret

00004544 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4544:	defff204 	addi	sp,sp,-56
    4548:	dfc00d15 	stw	ra,52(sp)
    454c:	df000c15 	stw	fp,48(sp)
    4550:	df000c04 	addi	fp,sp,48
    4554:	e13ffb15 	stw	r4,-20(fp)
    4558:	e17ffc15 	stw	r5,-16(fp)
    455c:	e1bffd15 	stw	r6,-12(fp)
    4560:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4564:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4568:	e0bffc17 	ldw	r2,-16(fp)
    456c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4570:	00003a06 	br	465c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4574:	e0bffb17 	ldw	r2,-20(fp)
    4578:	10800c17 	ldw	r2,48(r2)
    457c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    4580:	e0bffb17 	ldw	r2,-20(fp)
    4584:	10800d17 	ldw	r2,52(r2)
    4588:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    458c:	e0fffa17 	ldw	r3,-24(fp)
    4590:	e0bff917 	ldw	r2,-28(fp)
    4594:	1880062e 	bgeu	r3,r2,45b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4598:	e0fff917 	ldw	r3,-28(fp)
    459c:	e0bffa17 	ldw	r2,-24(fp)
    45a0:	1885c83a 	sub	r2,r3,r2
    45a4:	10bfffc4 	addi	r2,r2,-1
    45a8:	e0bff815 	stw	r2,-32(fp)
    45ac:	00000c06 	br	45e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    45b0:	e0bff917 	ldw	r2,-28(fp)
    45b4:	1005003a 	cmpeq	r2,r2,zero
    45b8:	1000051e 	bne	r2,zero,45d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    45bc:	00820004 	movi	r2,2048
    45c0:	e0fffa17 	ldw	r3,-24(fp)
    45c4:	10c5c83a 	sub	r2,r2,r3
    45c8:	e0bff815 	stw	r2,-32(fp)
    45cc:	00000406 	br	45e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    45d0:	0081ffc4 	movi	r2,2047
    45d4:	e0fffa17 	ldw	r3,-24(fp)
    45d8:	10c5c83a 	sub	r2,r2,r3
    45dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    45e0:	e0bff817 	ldw	r2,-32(fp)
    45e4:	1005003a 	cmpeq	r2,r2,zero
    45e8:	10001f1e 	bne	r2,zero,4668 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    45ec:	e0fffd17 	ldw	r3,-12(fp)
    45f0:	e0bff817 	ldw	r2,-32(fp)
    45f4:	1880022e 	bgeu	r3,r2,4600 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    45f8:	e0bffd17 	ldw	r2,-12(fp)
    45fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4600:	e0bffb17 	ldw	r2,-20(fp)
    4604:	10c20e04 	addi	r3,r2,2104
    4608:	e0bffa17 	ldw	r2,-24(fp)
    460c:	1885883a 	add	r2,r3,r2
    4610:	e0fffc17 	ldw	r3,-16(fp)
    4614:	1009883a 	mov	r4,r2
    4618:	180b883a 	mov	r5,r3
    461c:	e1bff817 	ldw	r6,-32(fp)
    4620:	00012440 	call	1244 <memcpy>
      ptr   += n;
    4624:	e0fff817 	ldw	r3,-32(fp)
    4628:	e0bffc17 	ldw	r2,-16(fp)
    462c:	10c5883a 	add	r2,r2,r3
    4630:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    4634:	e0fffd17 	ldw	r3,-12(fp)
    4638:	e0bff817 	ldw	r2,-32(fp)
    463c:	1885c83a 	sub	r2,r3,r2
    4640:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4644:	e0fffa17 	ldw	r3,-24(fp)
    4648:	e0bff817 	ldw	r2,-32(fp)
    464c:	1885883a 	add	r2,r3,r2
    4650:	10c1ffcc 	andi	r3,r2,2047
    4654:	e0bffb17 	ldw	r2,-20(fp)
    4658:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    465c:	e0bffd17 	ldw	r2,-12(fp)
    4660:	10800048 	cmpgei	r2,r2,1
    4664:	103fc31e 	bne	r2,zero,4574 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4668:	0005303a 	rdctl	r2,status
    466c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4670:	e0fff517 	ldw	r3,-44(fp)
    4674:	00bfff84 	movi	r2,-2
    4678:	1884703a 	and	r2,r3,r2
    467c:	1001703a 	wrctl	status,r2
  
  return context;
    4680:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4684:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4688:	e0bffb17 	ldw	r2,-20(fp)
    468c:	10800817 	ldw	r2,32(r2)
    4690:	10c00094 	ori	r3,r2,2
    4694:	e0bffb17 	ldw	r2,-20(fp)
    4698:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    469c:	e0bffb17 	ldw	r2,-20(fp)
    46a0:	10800017 	ldw	r2,0(r2)
    46a4:	11000104 	addi	r4,r2,4
    46a8:	e0bffb17 	ldw	r2,-20(fp)
    46ac:	10800817 	ldw	r2,32(r2)
    46b0:	1007883a 	mov	r3,r2
    46b4:	2005883a 	mov	r2,r4
    46b8:	10c00035 	stwio	r3,0(r2)
    46bc:	e0bff717 	ldw	r2,-36(fp)
    46c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46c4:	e0bff417 	ldw	r2,-48(fp)
    46c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    46cc:	e0bffd17 	ldw	r2,-12(fp)
    46d0:	10800050 	cmplti	r2,r2,1
    46d4:	1000111e 	bne	r2,zero,471c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    46d8:	e0bffe17 	ldw	r2,-8(fp)
    46dc:	1090000c 	andi	r2,r2,16384
    46e0:	1004c03a 	cmpne	r2,r2,zero
    46e4:	1000101e 	bne	r2,zero,4728 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    46e8:	e0bffb17 	ldw	r2,-20(fp)
    46ec:	10c00d17 	ldw	r3,52(r2)
    46f0:	e0bff917 	ldw	r2,-28(fp)
    46f4:	1880051e 	bne	r3,r2,470c <altera_avalon_jtag_uart_write+0x1c8>
    46f8:	e0bffb17 	ldw	r2,-20(fp)
    46fc:	10c00917 	ldw	r3,36(r2)
    4700:	e0bffb17 	ldw	r2,-20(fp)
    4704:	10800117 	ldw	r2,4(r2)
    4708:	18bff736 	bltu	r3,r2,46e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    470c:	e0bffb17 	ldw	r2,-20(fp)
    4710:	10c00d17 	ldw	r3,52(r2)
    4714:	e0bff917 	ldw	r2,-28(fp)
    4718:	18800326 	beq	r3,r2,4728 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    471c:	e0bffd17 	ldw	r2,-12(fp)
    4720:	10800048 	cmpgei	r2,r2,1
    4724:	103fcd1e 	bne	r2,zero,465c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4728:	e0fffc17 	ldw	r3,-16(fp)
    472c:	e0bff617 	ldw	r2,-40(fp)
    4730:	18800526 	beq	r3,r2,4748 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    4734:	e0fffc17 	ldw	r3,-16(fp)
    4738:	e0bff617 	ldw	r2,-40(fp)
    473c:	1887c83a 	sub	r3,r3,r2
    4740:	e0ffff15 	stw	r3,-4(fp)
    4744:	00000906 	br	476c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    4748:	e0bffe17 	ldw	r2,-8(fp)
    474c:	1090000c 	andi	r2,r2,16384
    4750:	1005003a 	cmpeq	r2,r2,zero
    4754:	1000031e 	bne	r2,zero,4764 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4758:	00bffd44 	movi	r2,-11
    475c:	e0bfff15 	stw	r2,-4(fp)
    4760:	00000206 	br	476c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    4764:	00bffec4 	movi	r2,-5
    4768:	e0bfff15 	stw	r2,-4(fp)
    476c:	e0bfff17 	ldw	r2,-4(fp)
}
    4770:	e037883a 	mov	sp,fp
    4774:	dfc00117 	ldw	ra,4(sp)
    4778:	df000017 	ldw	fp,0(sp)
    477c:	dec00204 	addi	sp,sp,8
    4780:	f800283a 	ret

00004784 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4784:	defff904 	addi	sp,sp,-28
    4788:	dfc00615 	stw	ra,24(sp)
    478c:	df000515 	stw	fp,20(sp)
    4790:	df000504 	addi	fp,sp,20
    4794:	e13ffe15 	stw	r4,-8(fp)
    4798:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    479c:	e0bffe17 	ldw	r2,-8(fp)
    47a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    47a4:	e0bffe17 	ldw	r2,-8(fp)
    47a8:	10800104 	addi	r2,r2,4
    47ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47b0:	0005303a 	rdctl	r2,status
    47b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47b8:	e0fffc17 	ldw	r3,-16(fp)
    47bc:	00bfff84 	movi	r2,-2
    47c0:	1884703a 	and	r2,r3,r2
    47c4:	1001703a 	wrctl	status,r2
  
  return context;
    47c8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    47cc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    47d0:	00039180 	call	3918 <alt_tick>
    47d4:	e0bffd17 	ldw	r2,-12(fp)
    47d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47dc:	e0bffb17 	ldw	r2,-20(fp)
    47e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    47e4:	e037883a 	mov	sp,fp
    47e8:	dfc00117 	ldw	ra,4(sp)
    47ec:	df000017 	ldw	fp,0(sp)
    47f0:	dec00204 	addi	sp,sp,8
    47f4:	f800283a 	ret

000047f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    47f8:	defff904 	addi	sp,sp,-28
    47fc:	dfc00615 	stw	ra,24(sp)
    4800:	df000515 	stw	fp,20(sp)
    4804:	df000504 	addi	fp,sp,20
    4808:	e13ffc15 	stw	r4,-16(fp)
    480c:	e17ffd15 	stw	r5,-12(fp)
    4810:	e1bffe15 	stw	r6,-8(fp)
    4814:	e1ffff15 	stw	r7,-4(fp)
    4818:	e0bfff17 	ldw	r2,-4(fp)
    481c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4820:	00800074 	movhi	r2,1
    4824:	10a4f404 	addi	r2,r2,-27696
    4828:	10800017 	ldw	r2,0(r2)
    482c:	1004c03a 	cmpne	r2,r2,zero
    4830:	1000041e 	bne	r2,zero,4844 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    4834:	00c00074 	movhi	r3,1
    4838:	18e4f404 	addi	r3,r3,-27696
    483c:	e0bffb17 	ldw	r2,-20(fp)
    4840:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4844:	e0bffc17 	ldw	r2,-16(fp)
    4848:	10800104 	addi	r2,r2,4
    484c:	1007883a 	mov	r3,r2
    4850:	008001c4 	movi	r2,7
    4854:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4858:	e13ffe17 	ldw	r4,-8(fp)
    485c:	e17ffc17 	ldw	r5,-16(fp)
    4860:	01800034 	movhi	r6,0
    4864:	3191e104 	addi	r6,r6,18308
    4868:	00050100 	call	5010 <alt_irq_register>
#endif  
}
    486c:	e037883a 	mov	sp,fp
    4870:	dfc00117 	ldw	ra,4(sp)
    4874:	df000017 	ldw	fp,0(sp)
    4878:	dec00204 	addi	sp,sp,8
    487c:	f800283a 	ret

00004880 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    4880:	defffd04 	addi	sp,sp,-12
    4884:	df000215 	stw	fp,8(sp)
    4888:	df000204 	addi	fp,sp,8
    488c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4890:	e0bfff17 	ldw	r2,-4(fp)
    4894:	10800a17 	ldw	r2,40(r2)
    4898:	10800104 	addi	r2,r2,4
    489c:	10800037 	ldwio	r2,0(r2)
    48a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    48a4:	e0bffe17 	ldw	r2,-8(fp)
    48a8:	10800054 	ori	r2,r2,1
    48ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    48b0:	e0bfff17 	ldw	r2,-4(fp)
    48b4:	10800a17 	ldw	r2,40(r2)
    48b8:	10800104 	addi	r2,r2,4
    48bc:	e0fffe17 	ldw	r3,-8(fp)
    48c0:	10c00035 	stwio	r3,0(r2)
}
    48c4:	e037883a 	mov	sp,fp
    48c8:	df000017 	ldw	fp,0(sp)
    48cc:	dec00104 	addi	sp,sp,4
    48d0:	f800283a 	ret

000048d4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    48d4:	defffd04 	addi	sp,sp,-12
    48d8:	df000215 	stw	fp,8(sp)
    48dc:	df000204 	addi	fp,sp,8
    48e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    48e4:	e0bfff17 	ldw	r2,-4(fp)
    48e8:	10800a17 	ldw	r2,40(r2)
    48ec:	10800104 	addi	r2,r2,4
    48f0:	10800037 	ldwio	r2,0(r2)
    48f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    48f8:	e0fffe17 	ldw	r3,-8(fp)
    48fc:	00bfff84 	movi	r2,-2
    4900:	1884703a 	and	r2,r3,r2
    4904:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    4908:	e0bfff17 	ldw	r2,-4(fp)
    490c:	10800a17 	ldw	r2,40(r2)
    4910:	10800104 	addi	r2,r2,4
    4914:	e0fffe17 	ldw	r3,-8(fp)
    4918:	10c00035 	stwio	r3,0(r2)
}
    491c:	e037883a 	mov	sp,fp
    4920:	df000017 	ldw	fp,0(sp)
    4924:	dec00104 	addi	sp,sp,4
    4928:	f800283a 	ret

0000492c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    492c:	defffd04 	addi	sp,sp,-12
    4930:	df000215 	stw	fp,8(sp)
    4934:	df000204 	addi	fp,sp,8
    4938:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    493c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    4940:	e0bfff17 	ldw	r2,-4(fp)
    4944:	10800a17 	ldw	r2,40(r2)
    4948:	10800084 	addi	r2,r2,2
    494c:	1080002b 	ldhuio	r2,0(r2)
    4950:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    4954:	e0bffe0b 	ldhu	r2,-8(fp)
}
    4958:	e037883a 	mov	sp,fp
    495c:	df000017 	ldw	fp,0(sp)
    4960:	dec00104 	addi	sp,sp,4
    4964:	f800283a 	ret

00004968 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    4968:	defffd04 	addi	sp,sp,-12
    496c:	df000215 	stw	fp,8(sp)
    4970:	df000204 	addi	fp,sp,8
    4974:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    4978:	e0bfff17 	ldw	r2,-4(fp)
    497c:	10800a17 	ldw	r2,40(r2)
    4980:	10800104 	addi	r2,r2,4
    4984:	10800037 	ldwio	r2,0(r2)
    4988:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    498c:	e0bffe17 	ldw	r2,-8(fp)
    4990:	10bfffec 	andhi	r2,r2,65535
    4994:	1004d43a 	srli	r2,r2,16
}
    4998:	e037883a 	mov	sp,fp
    499c:	df000017 	ldw	fp,0(sp)
    49a0:	dec00104 	addi	sp,sp,4
    49a4:	f800283a 	ret

000049a8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    49a8:	defffc04 	addi	sp,sp,-16
    49ac:	df000315 	stw	fp,12(sp)
    49b0:	df000304 	addi	fp,sp,12
    49b4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    49b8:	e0bffe17 	ldw	r2,-8(fp)
    49bc:	1080800c 	andi	r2,r2,512
    49c0:	1004d27a 	srli	r2,r2,9
    49c4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    49c8:	e0bffd17 	ldw	r2,-12(fp)
    49cc:	1005003a 	cmpeq	r2,r2,zero
    49d0:	1000031e 	bne	r2,zero,49e0 <alt_up_rs232_check_parity+0x38>
    49d4:	00bfffc4 	movi	r2,-1
    49d8:	e0bfff15 	stw	r2,-4(fp)
    49dc:	00000106 	br	49e4 <alt_up_rs232_check_parity+0x3c>
    49e0:	e03fff15 	stw	zero,-4(fp)
    49e4:	e0bfff17 	ldw	r2,-4(fp)
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	df000017 	ldw	fp,0(sp)
    49f0:	dec00104 	addi	sp,sp,4
    49f4:	f800283a 	ret

000049f8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    49f8:	defffc04 	addi	sp,sp,-16
    49fc:	df000315 	stw	fp,12(sp)
    4a00:	df000304 	addi	fp,sp,12
    4a04:	e13ffe15 	stw	r4,-8(fp)
    4a08:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4a0c:	e0bffe17 	ldw	r2,-8(fp)
    4a10:	10800a17 	ldw	r2,40(r2)
    4a14:	10800037 	ldwio	r2,0(r2)
    4a18:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    4a1c:	e0bffe17 	ldw	r2,-8(fp)
    4a20:	10800a17 	ldw	r2,40(r2)
    4a24:	e0ffff03 	ldbu	r3,-4(fp)
    4a28:	10c00035 	stwio	r3,0(r2)
	return 0;
    4a2c:	0005883a 	mov	r2,zero
}
    4a30:	e037883a 	mov	sp,fp
    4a34:	df000017 	ldw	fp,0(sp)
    4a38:	dec00104 	addi	sp,sp,4
    4a3c:	f800283a 	ret

00004a40 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    4a40:	defffa04 	addi	sp,sp,-24
    4a44:	dfc00515 	stw	ra,20(sp)
    4a48:	df000415 	stw	fp,16(sp)
    4a4c:	df000404 	addi	fp,sp,16
    4a50:	e13ffd15 	stw	r4,-12(fp)
    4a54:	e17ffe15 	stw	r5,-8(fp)
    4a58:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    4a5c:	e0bffd17 	ldw	r2,-12(fp)
    4a60:	10800a17 	ldw	r2,40(r2)
    4a64:	10800037 	ldwio	r2,0(r2)
    4a68:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    4a6c:	e0bffc17 	ldw	r2,-16(fp)
    4a70:	1007883a 	mov	r3,r2
    4a74:	e0bffe17 	ldw	r2,-8(fp)
    4a78:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    4a7c:	e13ffc17 	ldw	r4,-16(fp)
    4a80:	00049a80 	call	49a8 <alt_up_rs232_check_parity>
    4a84:	1007883a 	mov	r3,r2
    4a88:	e0bfff17 	ldw	r2,-4(fp)
    4a8c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    4a90:	e0bffc17 	ldw	r2,-16(fp)
    4a94:	10a0000c 	andi	r2,r2,32768
    4a98:	1004d3fa 	srli	r2,r2,15
    4a9c:	10bfffc4 	addi	r2,r2,-1
}
    4aa0:	e037883a 	mov	sp,fp
    4aa4:	dfc00117 	ldw	ra,4(sp)
    4aa8:	df000017 	ldw	fp,0(sp)
    4aac:	dec00204 	addi	sp,sp,8
    4ab0:	f800283a 	ret

00004ab4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    4ab4:	defff804 	addi	sp,sp,-32
    4ab8:	dfc00715 	stw	ra,28(sp)
    4abc:	df000615 	stw	fp,24(sp)
    4ac0:	df000604 	addi	fp,sp,24
    4ac4:	e13ffd15 	stw	r4,-12(fp)
    4ac8:	e17ffe15 	stw	r5,-8(fp)
    4acc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    4ad0:	e0bffd17 	ldw	r2,-12(fp)
    4ad4:	10800017 	ldw	r2,0(r2)
    4ad8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    4adc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    4ae0:	00000c06 	br	4b14 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    4ae4:	e17ffe17 	ldw	r5,-8(fp)
    4ae8:	e0bffe17 	ldw	r2,-8(fp)
    4aec:	10800044 	addi	r2,r2,1
    4af0:	e0bffe15 	stw	r2,-8(fp)
    4af4:	e1bffc04 	addi	r6,fp,-16
    4af8:	e13ffb17 	ldw	r4,-20(fp)
    4afc:	0004a400 	call	4a40 <alt_up_rs232_read_data>
    4b00:	1004c03a 	cmpne	r2,r2,zero
    4b04:	1000091e 	bne	r2,zero,4b2c <alt_up_rs232_read_fd+0x78>
			count++;
    4b08:	e0bffa17 	ldw	r2,-24(fp)
    4b0c:	10800044 	addi	r2,r2,1
    4b10:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    4b14:	e0bfff17 	ldw	r2,-4(fp)
    4b18:	10bfffc4 	addi	r2,r2,-1
    4b1c:	e0bfff15 	stw	r2,-4(fp)
    4b20:	e0bfff17 	ldw	r2,-4(fp)
    4b24:	10bfffd8 	cmpnei	r2,r2,-1
    4b28:	103fee1e 	bne	r2,zero,4ae4 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    4b2c:	e0bffa17 	ldw	r2,-24(fp)
}
    4b30:	e037883a 	mov	sp,fp
    4b34:	dfc00117 	ldw	ra,4(sp)
    4b38:	df000017 	ldw	fp,0(sp)
    4b3c:	dec00204 	addi	sp,sp,8
    4b40:	f800283a 	ret

00004b44 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    4b44:	defff904 	addi	sp,sp,-28
    4b48:	dfc00615 	stw	ra,24(sp)
    4b4c:	df000515 	stw	fp,20(sp)
    4b50:	df000504 	addi	fp,sp,20
    4b54:	e13ffd15 	stw	r4,-12(fp)
    4b58:	e17ffe15 	stw	r5,-8(fp)
    4b5c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    4b60:	e0bffd17 	ldw	r2,-12(fp)
    4b64:	10800017 	ldw	r2,0(r2)
    4b68:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    4b6c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    4b70:	00000d06 	br	4ba8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    4b74:	e0bffe17 	ldw	r2,-8(fp)
    4b78:	10800003 	ldbu	r2,0(r2)
    4b7c:	11403fcc 	andi	r5,r2,255
    4b80:	e13ffc17 	ldw	r4,-16(fp)
    4b84:	00049f80 	call	49f8 <alt_up_rs232_write_data>
    4b88:	1004c03a 	cmpne	r2,r2,zero
    4b8c:	10000c1e 	bne	r2,zero,4bc0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    4b90:	e0bffb17 	ldw	r2,-20(fp)
    4b94:	10800044 	addi	r2,r2,1
    4b98:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    4b9c:	e0bffe17 	ldw	r2,-8(fp)
    4ba0:	10800044 	addi	r2,r2,1
    4ba4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    4ba8:	e0bfff17 	ldw	r2,-4(fp)
    4bac:	10bfffc4 	addi	r2,r2,-1
    4bb0:	e0bfff15 	stw	r2,-4(fp)
    4bb4:	e0bfff17 	ldw	r2,-4(fp)
    4bb8:	10bfffd8 	cmpnei	r2,r2,-1
    4bbc:	103fed1e 	bne	r2,zero,4b74 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    4bc0:	e0bffb17 	ldw	r2,-20(fp)
}
    4bc4:	e037883a 	mov	sp,fp
    4bc8:	dfc00117 	ldw	ra,4(sp)
    4bcc:	df000017 	ldw	fp,0(sp)
    4bd0:	dec00204 	addi	sp,sp,8
    4bd4:	f800283a 	ret

00004bd8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    4bd8:	defffc04 	addi	sp,sp,-16
    4bdc:	dfc00315 	stw	ra,12(sp)
    4be0:	df000215 	stw	fp,8(sp)
    4be4:	df000204 	addi	fp,sp,8
    4be8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    4bec:	e13fff17 	ldw	r4,-4(fp)
    4bf0:	01400034 	movhi	r5,0
    4bf4:	295df004 	addi	r5,r5,30656
    4bf8:	0004e100 	call	4e10 <alt_find_dev>
    4bfc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    4c00:	e0bffe17 	ldw	r2,-8(fp)
}
    4c04:	e037883a 	mov	sp,fp
    4c08:	dfc00117 	ldw	ra,4(sp)
    4c0c:	df000017 	ldw	fp,0(sp)
    4c10:	dec00204 	addi	sp,sp,8
    4c14:	f800283a 	ret

00004c18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4c18:	deffff04 	addi	sp,sp,-4
    4c1c:	df000015 	stw	fp,0(sp)
    4c20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4c24:	e037883a 	mov	sp,fp
    4c28:	df000017 	ldw	fp,0(sp)
    4c2c:	dec00104 	addi	sp,sp,4
    4c30:	f800283a 	ret

00004c34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4c34:	defff904 	addi	sp,sp,-28
    4c38:	dfc00615 	stw	ra,24(sp)
    4c3c:	df000515 	stw	fp,20(sp)
    4c40:	df000504 	addi	fp,sp,20
    4c44:	e13ffd15 	stw	r4,-12(fp)
    4c48:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4c4c:	e0bffd17 	ldw	r2,-12(fp)
    4c50:	1005003a 	cmpeq	r2,r2,zero
    4c54:	1000041e 	bne	r2,zero,4c68 <alt_dev_llist_insert+0x34>
    4c58:	e0bffd17 	ldw	r2,-12(fp)
    4c5c:	10800217 	ldw	r2,8(r2)
    4c60:	1004c03a 	cmpne	r2,r2,zero
    4c64:	1000071e 	bne	r2,zero,4c84 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    4c68:	0004ce80 	call	4ce8 <alt_get_errno>
    4c6c:	1007883a 	mov	r3,r2
    4c70:	00800584 	movi	r2,22
    4c74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4c78:	00bffa84 	movi	r2,-22
    4c7c:	e0bfff15 	stw	r2,-4(fp)
    4c80:	00001306 	br	4cd0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4c84:	e0fffd17 	ldw	r3,-12(fp)
    4c88:	e0bffe17 	ldw	r2,-8(fp)
    4c8c:	e0bffb15 	stw	r2,-20(fp)
    4c90:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4c94:	e0fffc17 	ldw	r3,-16(fp)
    4c98:	e0bffb17 	ldw	r2,-20(fp)
    4c9c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    4ca0:	e0bffb17 	ldw	r2,-20(fp)
    4ca4:	10c00017 	ldw	r3,0(r2)
    4ca8:	e0bffc17 	ldw	r2,-16(fp)
    4cac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4cb0:	e0bffb17 	ldw	r2,-20(fp)
    4cb4:	10c00017 	ldw	r3,0(r2)
    4cb8:	e0bffc17 	ldw	r2,-16(fp)
    4cbc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    4cc0:	e0fffb17 	ldw	r3,-20(fp)
    4cc4:	e0bffc17 	ldw	r2,-16(fp)
    4cc8:	18800015 	stw	r2,0(r3)

  return 0;  
    4ccc:	e03fff15 	stw	zero,-4(fp)
    4cd0:	e0bfff17 	ldw	r2,-4(fp)
}
    4cd4:	e037883a 	mov	sp,fp
    4cd8:	dfc00117 	ldw	ra,4(sp)
    4cdc:	df000017 	ldw	fp,0(sp)
    4ce0:	dec00204 	addi	sp,sp,8
    4ce4:	f800283a 	ret

00004ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4ce8:	defffd04 	addi	sp,sp,-12
    4cec:	dfc00215 	stw	ra,8(sp)
    4cf0:	df000115 	stw	fp,4(sp)
    4cf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4cf8:	00800034 	movhi	r2,0
    4cfc:	109df304 	addi	r2,r2,30668
    4d00:	10800017 	ldw	r2,0(r2)
    4d04:	1005003a 	cmpeq	r2,r2,zero
    4d08:	1000061e 	bne	r2,zero,4d24 <alt_get_errno+0x3c>
    4d0c:	00800034 	movhi	r2,0
    4d10:	109df304 	addi	r2,r2,30668
    4d14:	10800017 	ldw	r2,0(r2)
    4d18:	103ee83a 	callr	r2
    4d1c:	e0bfff15 	stw	r2,-4(fp)
    4d20:	00000306 	br	4d30 <alt_get_errno+0x48>
    4d24:	00800074 	movhi	r2,1
    4d28:	10a4f004 	addi	r2,r2,-27712
    4d2c:	e0bfff15 	stw	r2,-4(fp)
    4d30:	e0bfff17 	ldw	r2,-4(fp)
}
    4d34:	e037883a 	mov	sp,fp
    4d38:	dfc00117 	ldw	ra,4(sp)
    4d3c:	df000017 	ldw	fp,0(sp)
    4d40:	dec00204 	addi	sp,sp,8
    4d44:	f800283a 	ret

00004d48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4d48:	defffd04 	addi	sp,sp,-12
    4d4c:	dfc00215 	stw	ra,8(sp)
    4d50:	df000115 	stw	fp,4(sp)
    4d54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4d58:	00bfff04 	movi	r2,-4
    4d5c:	00c00034 	movhi	r3,0
    4d60:	18d6b404 	addi	r3,r3,23248
    4d64:	1885883a 	add	r2,r3,r2
    4d68:	e0bfff15 	stw	r2,-4(fp)
    4d6c:	00000606 	br	4d88 <_do_ctors+0x40>
        (*ctor) (); 
    4d70:	e0bfff17 	ldw	r2,-4(fp)
    4d74:	10800017 	ldw	r2,0(r2)
    4d78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4d7c:	e0bfff17 	ldw	r2,-4(fp)
    4d80:	10bfff04 	addi	r2,r2,-4
    4d84:	e0bfff15 	stw	r2,-4(fp)
    4d88:	e0ffff17 	ldw	r3,-4(fp)
    4d8c:	00800034 	movhi	r2,0
    4d90:	1096b304 	addi	r2,r2,23244
    4d94:	18bff62e 	bgeu	r3,r2,4d70 <_do_ctors+0x28>
        (*ctor) (); 
}
    4d98:	e037883a 	mov	sp,fp
    4d9c:	dfc00117 	ldw	ra,4(sp)
    4da0:	df000017 	ldw	fp,0(sp)
    4da4:	dec00204 	addi	sp,sp,8
    4da8:	f800283a 	ret

00004dac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4dac:	defffd04 	addi	sp,sp,-12
    4db0:	dfc00215 	stw	ra,8(sp)
    4db4:	df000115 	stw	fp,4(sp)
    4db8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4dbc:	00bfff04 	movi	r2,-4
    4dc0:	00c00034 	movhi	r3,0
    4dc4:	18d6b404 	addi	r3,r3,23248
    4dc8:	1885883a 	add	r2,r3,r2
    4dcc:	e0bfff15 	stw	r2,-4(fp)
    4dd0:	00000606 	br	4dec <_do_dtors+0x40>
        (*dtor) (); 
    4dd4:	e0bfff17 	ldw	r2,-4(fp)
    4dd8:	10800017 	ldw	r2,0(r2)
    4ddc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4de0:	e0bfff17 	ldw	r2,-4(fp)
    4de4:	10bfff04 	addi	r2,r2,-4
    4de8:	e0bfff15 	stw	r2,-4(fp)
    4dec:	e0ffff17 	ldw	r3,-4(fp)
    4df0:	00800034 	movhi	r2,0
    4df4:	1096b404 	addi	r2,r2,23248
    4df8:	18bff62e 	bgeu	r3,r2,4dd4 <_do_dtors+0x28>
        (*dtor) (); 
}
    4dfc:	e037883a 	mov	sp,fp
    4e00:	dfc00117 	ldw	ra,4(sp)
    4e04:	df000017 	ldw	fp,0(sp)
    4e08:	dec00204 	addi	sp,sp,8
    4e0c:	f800283a 	ret

00004e10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4e10:	defff904 	addi	sp,sp,-28
    4e14:	dfc00615 	stw	ra,24(sp)
    4e18:	df000515 	stw	fp,20(sp)
    4e1c:	df000504 	addi	fp,sp,20
    4e20:	e13ffd15 	stw	r4,-12(fp)
    4e24:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4e28:	e0bffe17 	ldw	r2,-8(fp)
    4e2c:	10800017 	ldw	r2,0(r2)
    4e30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4e34:	e13ffd17 	ldw	r4,-12(fp)
    4e38:	00005100 	call	510 <strlen>
    4e3c:	10800044 	addi	r2,r2,1
    4e40:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4e44:	00000d06 	br	4e7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4e48:	e0bffc17 	ldw	r2,-16(fp)
    4e4c:	11000217 	ldw	r4,8(r2)
    4e50:	e1bffb17 	ldw	r6,-20(fp)
    4e54:	e17ffd17 	ldw	r5,-12(fp)
    4e58:	00057100 	call	5710 <memcmp>
    4e5c:	1004c03a 	cmpne	r2,r2,zero
    4e60:	1000031e 	bne	r2,zero,4e70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4e64:	e0bffc17 	ldw	r2,-16(fp)
    4e68:	e0bfff15 	stw	r2,-4(fp)
    4e6c:	00000706 	br	4e8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4e70:	e0bffc17 	ldw	r2,-16(fp)
    4e74:	10800017 	ldw	r2,0(r2)
    4e78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4e7c:	e0fffe17 	ldw	r3,-8(fp)
    4e80:	e0bffc17 	ldw	r2,-16(fp)
    4e84:	10fff01e 	bne	r2,r3,4e48 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4e88:	e03fff15 	stw	zero,-4(fp)
    4e8c:	e0bfff17 	ldw	r2,-4(fp)
}
    4e90:	e037883a 	mov	sp,fp
    4e94:	dfc00117 	ldw	ra,4(sp)
    4e98:	df000017 	ldw	fp,0(sp)
    4e9c:	dec00204 	addi	sp,sp,8
    4ea0:	f800283a 	ret

00004ea4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4ea4:	deffff04 	addi	sp,sp,-4
    4ea8:	df000015 	stw	fp,0(sp)
    4eac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4eb0:	e037883a 	mov	sp,fp
    4eb4:	df000017 	ldw	fp,0(sp)
    4eb8:	dec00104 	addi	sp,sp,4
    4ebc:	f800283a 	ret

00004ec0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4ec0:	defff804 	addi	sp,sp,-32
    4ec4:	dfc00715 	stw	ra,28(sp)
    4ec8:	df000615 	stw	fp,24(sp)
    4ecc:	dc000515 	stw	r16,20(sp)
    4ed0:	df000504 	addi	fp,sp,20
    4ed4:	e13ffc15 	stw	r4,-16(fp)
    4ed8:	e17ffd15 	stw	r5,-12(fp)
    4edc:	e1bffe15 	stw	r6,-8(fp)
    4ee0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4ee4:	e13ffd17 	ldw	r4,-12(fp)
    4ee8:	e17ffe17 	ldw	r5,-8(fp)
    4eec:	e1bfff17 	ldw	r6,-4(fp)
    4ef0:	00052c80 	call	52c8 <open>
    4ef4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4ef8:	e0bffb17 	ldw	r2,-20(fp)
    4efc:	1004803a 	cmplt	r2,r2,zero
    4f00:	10001f1e 	bne	r2,zero,4f80 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    4f04:	e13ffb17 	ldw	r4,-20(fp)
    4f08:	04000034 	movhi	r16,0
    4f0c:	84190f04 	addi	r16,r16,25660
    4f10:	01400304 	movi	r5,12
    4f14:	00004240 	call	424 <__mulsi3>
    4f18:	1405883a 	add	r2,r2,r16
    4f1c:	10c00017 	ldw	r3,0(r2)
    4f20:	e0bffc17 	ldw	r2,-16(fp)
    4f24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4f28:	e13ffb17 	ldw	r4,-20(fp)
    4f2c:	04000034 	movhi	r16,0
    4f30:	84190f04 	addi	r16,r16,25660
    4f34:	01400304 	movi	r5,12
    4f38:	00004240 	call	424 <__mulsi3>
    4f3c:	1405883a 	add	r2,r2,r16
    4f40:	10800104 	addi	r2,r2,4
    4f44:	10c00017 	ldw	r3,0(r2)
    4f48:	e0bffc17 	ldw	r2,-16(fp)
    4f4c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4f50:	e13ffb17 	ldw	r4,-20(fp)
    4f54:	04000034 	movhi	r16,0
    4f58:	84190f04 	addi	r16,r16,25660
    4f5c:	01400304 	movi	r5,12
    4f60:	00004240 	call	424 <__mulsi3>
    4f64:	1405883a 	add	r2,r2,r16
    4f68:	10800204 	addi	r2,r2,8
    4f6c:	10c00017 	ldw	r3,0(r2)
    4f70:	e0bffc17 	ldw	r2,-16(fp)
    4f74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4f78:	e13ffb17 	ldw	r4,-20(fp)
    4f7c:	000374c0 	call	374c <alt_release_fd>
  }
} 
    4f80:	e037883a 	mov	sp,fp
    4f84:	dfc00217 	ldw	ra,8(sp)
    4f88:	df000117 	ldw	fp,4(sp)
    4f8c:	dc000017 	ldw	r16,0(sp)
    4f90:	dec00304 	addi	sp,sp,12
    4f94:	f800283a 	ret

00004f98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4f98:	defffb04 	addi	sp,sp,-20
    4f9c:	dfc00415 	stw	ra,16(sp)
    4fa0:	df000315 	stw	fp,12(sp)
    4fa4:	df000304 	addi	fp,sp,12
    4fa8:	e13ffd15 	stw	r4,-12(fp)
    4fac:	e17ffe15 	stw	r5,-8(fp)
    4fb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4fb4:	01000034 	movhi	r4,0
    4fb8:	21191204 	addi	r4,r4,25672
    4fbc:	e17ffd17 	ldw	r5,-12(fp)
    4fc0:	01800044 	movi	r6,1
    4fc4:	01c07fc4 	movi	r7,511
    4fc8:	0004ec00 	call	4ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4fcc:	01000034 	movhi	r4,0
    4fd0:	21190f04 	addi	r4,r4,25660
    4fd4:	e17ffe17 	ldw	r5,-8(fp)
    4fd8:	000d883a 	mov	r6,zero
    4fdc:	01c07fc4 	movi	r7,511
    4fe0:	0004ec00 	call	4ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4fe4:	01000034 	movhi	r4,0
    4fe8:	21191504 	addi	r4,r4,25684
    4fec:	e17fff17 	ldw	r5,-4(fp)
    4ff0:	01800044 	movi	r6,1
    4ff4:	01c07fc4 	movi	r7,511
    4ff8:	0004ec00 	call	4ec0 <alt_open_fd>
}  
    4ffc:	e037883a 	mov	sp,fp
    5000:	dfc00117 	ldw	ra,4(sp)
    5004:	df000017 	ldw	fp,0(sp)
    5008:	dec00204 	addi	sp,sp,8
    500c:	f800283a 	ret

00005010 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    5010:	deffef04 	addi	sp,sp,-68
    5014:	df001015 	stw	fp,64(sp)
    5018:	df001004 	addi	fp,sp,64
    501c:	e13ffc15 	stw	r4,-16(fp)
    5020:	e17ffd15 	stw	r5,-12(fp)
    5024:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    5028:	00bffa84 	movi	r2,-22
    502c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5030:	e0bffc17 	ldw	r2,-16(fp)
    5034:	10800828 	cmpgeui	r2,r2,32
    5038:	1000601e 	bne	r2,zero,51bc <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    503c:	0005303a 	rdctl	r2,status
    5040:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5044:	e0fff917 	ldw	r3,-28(fp)
    5048:	00bfff84 	movi	r2,-2
    504c:	1884703a 	and	r2,r3,r2
    5050:	1001703a 	wrctl	status,r2
  
  return context;
    5054:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    5058:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    505c:	e0bffc17 	ldw	r2,-16(fp)
    5060:	00c00074 	movhi	r3,1
    5064:	18e50704 	addi	r3,r3,-27620
    5068:	100490fa 	slli	r2,r2,3
    506c:	10c7883a 	add	r3,r2,r3
    5070:	e0bffe17 	ldw	r2,-8(fp)
    5074:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    5078:	e0bffc17 	ldw	r2,-16(fp)
    507c:	00c00074 	movhi	r3,1
    5080:	18e50704 	addi	r3,r3,-27620
    5084:	100490fa 	slli	r2,r2,3
    5088:	10c5883a 	add	r2,r2,r3
    508c:	10c00104 	addi	r3,r2,4
    5090:	e0bffd17 	ldw	r2,-12(fp)
    5094:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    5098:	e0bffe17 	ldw	r2,-8(fp)
    509c:	1005003a 	cmpeq	r2,r2,zero
    50a0:	1000201e 	bne	r2,zero,5124 <alt_irq_register+0x114>
    50a4:	e0bffc17 	ldw	r2,-16(fp)
    50a8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    50ac:	0005303a 	rdctl	r2,status
    50b0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50b4:	e0fff617 	ldw	r3,-40(fp)
    50b8:	00bfff84 	movi	r2,-2
    50bc:	1884703a 	and	r2,r3,r2
    50c0:	1001703a 	wrctl	status,r2
  
  return context;
    50c4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    50c8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    50cc:	e0fff717 	ldw	r3,-36(fp)
    50d0:	00800044 	movi	r2,1
    50d4:	10c4983a 	sll	r2,r2,r3
    50d8:	1007883a 	mov	r3,r2
    50dc:	00800074 	movhi	r2,1
    50e0:	10a4f604 	addi	r2,r2,-27688
    50e4:	10800017 	ldw	r2,0(r2)
    50e8:	1886b03a 	or	r3,r3,r2
    50ec:	00800074 	movhi	r2,1
    50f0:	10a4f604 	addi	r2,r2,-27688
    50f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    50f8:	00800074 	movhi	r2,1
    50fc:	10a4f604 	addi	r2,r2,-27688
    5100:	10800017 	ldw	r2,0(r2)
    5104:	100170fa 	wrctl	ienable,r2
    5108:	e0bff817 	ldw	r2,-32(fp)
    510c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5110:	e0bff517 	ldw	r2,-44(fp)
    5114:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5118:	0005883a 	mov	r2,zero
    511c:	e0bfff15 	stw	r2,-4(fp)
    5120:	00002006 	br	51a4 <alt_irq_register+0x194>
    5124:	e0bffc17 	ldw	r2,-16(fp)
    5128:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    512c:	0005303a 	rdctl	r2,status
    5130:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5134:	e0fff217 	ldw	r3,-56(fp)
    5138:	00bfff84 	movi	r2,-2
    513c:	1884703a 	and	r2,r3,r2
    5140:	1001703a 	wrctl	status,r2
  
  return context;
    5144:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5148:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    514c:	e0fff317 	ldw	r3,-52(fp)
    5150:	00800044 	movi	r2,1
    5154:	10c4983a 	sll	r2,r2,r3
    5158:	0084303a 	nor	r2,zero,r2
    515c:	1007883a 	mov	r3,r2
    5160:	00800074 	movhi	r2,1
    5164:	10a4f604 	addi	r2,r2,-27688
    5168:	10800017 	ldw	r2,0(r2)
    516c:	1886703a 	and	r3,r3,r2
    5170:	00800074 	movhi	r2,1
    5174:	10a4f604 	addi	r2,r2,-27688
    5178:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    517c:	00800074 	movhi	r2,1
    5180:	10a4f604 	addi	r2,r2,-27688
    5184:	10800017 	ldw	r2,0(r2)
    5188:	100170fa 	wrctl	ienable,r2
    518c:	e0bff417 	ldw	r2,-48(fp)
    5190:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5194:	e0bff117 	ldw	r2,-60(fp)
    5198:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    519c:	0005883a 	mov	r2,zero
    51a0:	e0bfff15 	stw	r2,-4(fp)
    51a4:	e0bfff17 	ldw	r2,-4(fp)
    51a8:	e0bffb15 	stw	r2,-20(fp)
    51ac:	e0bffa17 	ldw	r2,-24(fp)
    51b0:	e0bff015 	stw	r2,-64(fp)
    51b4:	e0bff017 	ldw	r2,-64(fp)
    51b8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    51bc:	e0bffb17 	ldw	r2,-20(fp)
}
    51c0:	e037883a 	mov	sp,fp
    51c4:	df000017 	ldw	fp,0(sp)
    51c8:	dec00104 	addi	sp,sp,4
    51cc:	f800283a 	ret

000051d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    51d0:	defffa04 	addi	sp,sp,-24
    51d4:	dfc00515 	stw	ra,20(sp)
    51d8:	df000415 	stw	fp,16(sp)
    51dc:	dc000315 	stw	r16,12(sp)
    51e0:	df000304 	addi	fp,sp,12
    51e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    51e8:	e0bffe17 	ldw	r2,-8(fp)
    51ec:	10800217 	ldw	r2,8(r2)
    51f0:	10d00034 	orhi	r3,r2,16384
    51f4:	e0bffe17 	ldw	r2,-8(fp)
    51f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    51fc:	e03ffd15 	stw	zero,-12(fp)
    5200:	00002306 	br	5290 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5204:	e13ffd17 	ldw	r4,-12(fp)
    5208:	04000034 	movhi	r16,0
    520c:	84190f04 	addi	r16,r16,25660
    5210:	01400304 	movi	r5,12
    5214:	00004240 	call	424 <__mulsi3>
    5218:	1405883a 	add	r2,r2,r16
    521c:	10c00017 	ldw	r3,0(r2)
    5220:	e0bffe17 	ldw	r2,-8(fp)
    5224:	10800017 	ldw	r2,0(r2)
    5228:	1880161e 	bne	r3,r2,5284 <alt_file_locked+0xb4>
    522c:	e13ffd17 	ldw	r4,-12(fp)
    5230:	04000034 	movhi	r16,0
    5234:	84190f04 	addi	r16,r16,25660
    5238:	01400304 	movi	r5,12
    523c:	00004240 	call	424 <__mulsi3>
    5240:	1405883a 	add	r2,r2,r16
    5244:	10800204 	addi	r2,r2,8
    5248:	10800017 	ldw	r2,0(r2)
    524c:	1004403a 	cmpge	r2,r2,zero
    5250:	10000c1e 	bne	r2,zero,5284 <alt_file_locked+0xb4>
    5254:	e13ffd17 	ldw	r4,-12(fp)
    5258:	01400304 	movi	r5,12
    525c:	00004240 	call	424 <__mulsi3>
    5260:	1007883a 	mov	r3,r2
    5264:	00800034 	movhi	r2,0
    5268:	10990f04 	addi	r2,r2,25660
    526c:	1887883a 	add	r3,r3,r2
    5270:	e0bffe17 	ldw	r2,-8(fp)
    5274:	18800326 	beq	r3,r2,5284 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5278:	00bffcc4 	movi	r2,-13
    527c:	e0bfff15 	stw	r2,-4(fp)
    5280:	00000a06 	br	52ac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5284:	e0bffd17 	ldw	r2,-12(fp)
    5288:	10800044 	addi	r2,r2,1
    528c:	e0bffd15 	stw	r2,-12(fp)
    5290:	00800034 	movhi	r2,0
    5294:	109df204 	addi	r2,r2,30664
    5298:	10800017 	ldw	r2,0(r2)
    529c:	1007883a 	mov	r3,r2
    52a0:	e0bffd17 	ldw	r2,-12(fp)
    52a4:	18bfd72e 	bgeu	r3,r2,5204 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    52a8:	e03fff15 	stw	zero,-4(fp)
    52ac:	e0bfff17 	ldw	r2,-4(fp)
}
    52b0:	e037883a 	mov	sp,fp
    52b4:	dfc00217 	ldw	ra,8(sp)
    52b8:	df000117 	ldw	fp,4(sp)
    52bc:	dc000017 	ldw	r16,0(sp)
    52c0:	dec00304 	addi	sp,sp,12
    52c4:	f800283a 	ret

000052c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    52c8:	defff404 	addi	sp,sp,-48
    52cc:	dfc00b15 	stw	ra,44(sp)
    52d0:	df000a15 	stw	fp,40(sp)
    52d4:	df000a04 	addi	fp,sp,40
    52d8:	e13ffb15 	stw	r4,-20(fp)
    52dc:	e17ffc15 	stw	r5,-16(fp)
    52e0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    52e4:	00bfffc4 	movi	r2,-1
    52e8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    52ec:	00bffb44 	movi	r2,-19
    52f0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    52f4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    52f8:	e13ffb17 	ldw	r4,-20(fp)
    52fc:	01400034 	movhi	r5,0
    5300:	295df004 	addi	r5,r5,30656
    5304:	0004e100 	call	4e10 <alt_find_dev>
    5308:	e0bffa15 	stw	r2,-24(fp)
    530c:	e0bffa17 	ldw	r2,-24(fp)
    5310:	1004c03a 	cmpne	r2,r2,zero
    5314:	1000051e 	bne	r2,zero,532c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5318:	e13ffb17 	ldw	r4,-20(fp)
    531c:	00054d40 	call	54d4 <alt_find_file>
    5320:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    5324:	00800044 	movi	r2,1
    5328:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    532c:	e0bffa17 	ldw	r2,-24(fp)
    5330:	1005003a 	cmpeq	r2,r2,zero
    5334:	1000311e 	bne	r2,zero,53fc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5338:	e13ffa17 	ldw	r4,-24(fp)
    533c:	00055f40 	call	55f4 <alt_get_fd>
    5340:	e0bff815 	stw	r2,-32(fp)
    5344:	e0bff817 	ldw	r2,-32(fp)
    5348:	1004403a 	cmpge	r2,r2,zero
    534c:	1000031e 	bne	r2,zero,535c <open+0x94>
    {
      status = index;
    5350:	e0bff817 	ldw	r2,-32(fp)
    5354:	e0bff715 	stw	r2,-36(fp)
    5358:	00002a06 	br	5404 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    535c:	e13ff817 	ldw	r4,-32(fp)
    5360:	01400304 	movi	r5,12
    5364:	00004240 	call	424 <__mulsi3>
    5368:	1007883a 	mov	r3,r2
    536c:	00800034 	movhi	r2,0
    5370:	10990f04 	addi	r2,r2,25660
    5374:	1885883a 	add	r2,r3,r2
    5378:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    537c:	e0fffc17 	ldw	r3,-16(fp)
    5380:	00900034 	movhi	r2,16384
    5384:	10bfffc4 	addi	r2,r2,-1
    5388:	1886703a 	and	r3,r3,r2
    538c:	e0bff917 	ldw	r2,-28(fp)
    5390:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5394:	e0bff617 	ldw	r2,-40(fp)
    5398:	1004c03a 	cmpne	r2,r2,zero
    539c:	1000061e 	bne	r2,zero,53b8 <open+0xf0>
    53a0:	e13ff917 	ldw	r4,-28(fp)
    53a4:	00051d00 	call	51d0 <alt_file_locked>
    53a8:	e0bff715 	stw	r2,-36(fp)
    53ac:	e0bff717 	ldw	r2,-36(fp)
    53b0:	1004803a 	cmplt	r2,r2,zero
    53b4:	1000131e 	bne	r2,zero,5404 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    53b8:	e0bffa17 	ldw	r2,-24(fp)
    53bc:	10800317 	ldw	r2,12(r2)
    53c0:	1005003a 	cmpeq	r2,r2,zero
    53c4:	1000091e 	bne	r2,zero,53ec <open+0x124>
    53c8:	e0bffa17 	ldw	r2,-24(fp)
    53cc:	10800317 	ldw	r2,12(r2)
    53d0:	e13ff917 	ldw	r4,-28(fp)
    53d4:	e17ffb17 	ldw	r5,-20(fp)
    53d8:	e1bffc17 	ldw	r6,-16(fp)
    53dc:	e1fffd17 	ldw	r7,-12(fp)
    53e0:	103ee83a 	callr	r2
    53e4:	e0bfff15 	stw	r2,-4(fp)
    53e8:	00000106 	br	53f0 <open+0x128>
    53ec:	e03fff15 	stw	zero,-4(fp)
    53f0:	e0bfff17 	ldw	r2,-4(fp)
    53f4:	e0bff715 	stw	r2,-36(fp)
    53f8:	00000206 	br	5404 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    53fc:	00bffb44 	movi	r2,-19
    5400:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5404:	e0bff717 	ldw	r2,-36(fp)
    5408:	1004403a 	cmpge	r2,r2,zero
    540c:	1000091e 	bne	r2,zero,5434 <open+0x16c>
  {
    alt_release_fd (index);  
    5410:	e13ff817 	ldw	r4,-32(fp)
    5414:	000374c0 	call	374c <alt_release_fd>
    ALT_ERRNO = -status;
    5418:	00054540 	call	5454 <alt_get_errno>
    541c:	e0fff717 	ldw	r3,-36(fp)
    5420:	00c7c83a 	sub	r3,zero,r3
    5424:	10c00015 	stw	r3,0(r2)
    return -1;
    5428:	00bfffc4 	movi	r2,-1
    542c:	e0bffe15 	stw	r2,-8(fp)
    5430:	00000206 	br	543c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    5434:	e0bff817 	ldw	r2,-32(fp)
    5438:	e0bffe15 	stw	r2,-8(fp)
    543c:	e0bffe17 	ldw	r2,-8(fp)
}
    5440:	e037883a 	mov	sp,fp
    5444:	dfc00117 	ldw	ra,4(sp)
    5448:	df000017 	ldw	fp,0(sp)
    544c:	dec00204 	addi	sp,sp,8
    5450:	f800283a 	ret

00005454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5454:	defffd04 	addi	sp,sp,-12
    5458:	dfc00215 	stw	ra,8(sp)
    545c:	df000115 	stw	fp,4(sp)
    5460:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    5464:	00800034 	movhi	r2,0
    5468:	109df304 	addi	r2,r2,30668
    546c:	10800017 	ldw	r2,0(r2)
    5470:	1005003a 	cmpeq	r2,r2,zero
    5474:	1000061e 	bne	r2,zero,5490 <alt_get_errno+0x3c>
    5478:	00800034 	movhi	r2,0
    547c:	109df304 	addi	r2,r2,30668
    5480:	10800017 	ldw	r2,0(r2)
    5484:	103ee83a 	callr	r2
    5488:	e0bfff15 	stw	r2,-4(fp)
    548c:	00000306 	br	549c <alt_get_errno+0x48>
    5490:	00800074 	movhi	r2,1
    5494:	10a4f004 	addi	r2,r2,-27712
    5498:	e0bfff15 	stw	r2,-4(fp)
    549c:	e0bfff17 	ldw	r2,-4(fp)
}
    54a0:	e037883a 	mov	sp,fp
    54a4:	dfc00117 	ldw	ra,4(sp)
    54a8:	df000017 	ldw	fp,0(sp)
    54ac:	dec00204 	addi	sp,sp,8
    54b0:	f800283a 	ret

000054b4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    54b4:	deffff04 	addi	sp,sp,-4
    54b8:	df000015 	stw	fp,0(sp)
    54bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    54c0:	000170fa 	wrctl	ienable,zero
}
    54c4:	e037883a 	mov	sp,fp
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00104 	addi	sp,sp,4
    54d0:	f800283a 	ret

000054d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    54d4:	defffa04 	addi	sp,sp,-24
    54d8:	dfc00515 	stw	ra,20(sp)
    54dc:	df000415 	stw	fp,16(sp)
    54e0:	df000404 	addi	fp,sp,16
    54e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    54e8:	00800034 	movhi	r2,0
    54ec:	109dee04 	addi	r2,r2,30648
    54f0:	10800017 	ldw	r2,0(r2)
    54f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    54f8:	00003306 	br	55c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    54fc:	e0bffd17 	ldw	r2,-12(fp)
    5500:	11000217 	ldw	r4,8(r2)
    5504:	00005100 	call	510 <strlen>
    5508:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    550c:	e0bffd17 	ldw	r2,-12(fp)
    5510:	10c00217 	ldw	r3,8(r2)
    5514:	e0bffc17 	ldw	r2,-16(fp)
    5518:	1885883a 	add	r2,r3,r2
    551c:	10bfffc4 	addi	r2,r2,-1
    5520:	10800003 	ldbu	r2,0(r2)
    5524:	10803fcc 	andi	r2,r2,255
    5528:	1080201c 	xori	r2,r2,128
    552c:	10bfe004 	addi	r2,r2,-128
    5530:	10800bd8 	cmpnei	r2,r2,47
    5534:	1000031e 	bne	r2,zero,5544 <alt_find_file+0x70>
    {
      len -= 1;
    5538:	e0bffc17 	ldw	r2,-16(fp)
    553c:	10bfffc4 	addi	r2,r2,-1
    5540:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5544:	e0bffc17 	ldw	r2,-16(fp)
    5548:	1007883a 	mov	r3,r2
    554c:	e0bffe17 	ldw	r2,-8(fp)
    5550:	1885883a 	add	r2,r3,r2
    5554:	10800003 	ldbu	r2,0(r2)
    5558:	10803fcc 	andi	r2,r2,255
    555c:	1080201c 	xori	r2,r2,128
    5560:	10bfe004 	addi	r2,r2,-128
    5564:	10800be0 	cmpeqi	r2,r2,47
    5568:	10000a1e 	bne	r2,zero,5594 <alt_find_file+0xc0>
    556c:	e0bffc17 	ldw	r2,-16(fp)
    5570:	1007883a 	mov	r3,r2
    5574:	e0bffe17 	ldw	r2,-8(fp)
    5578:	1885883a 	add	r2,r3,r2
    557c:	10800003 	ldbu	r2,0(r2)
    5580:	10803fcc 	andi	r2,r2,255
    5584:	1080201c 	xori	r2,r2,128
    5588:	10bfe004 	addi	r2,r2,-128
    558c:	1004c03a 	cmpne	r2,r2,zero
    5590:	10000a1e 	bne	r2,zero,55bc <alt_find_file+0xe8>
    5594:	e0bffd17 	ldw	r2,-12(fp)
    5598:	11000217 	ldw	r4,8(r2)
    559c:	e1bffc17 	ldw	r6,-16(fp)
    55a0:	e17ffe17 	ldw	r5,-8(fp)
    55a4:	00057100 	call	5710 <memcmp>
    55a8:	1004c03a 	cmpne	r2,r2,zero
    55ac:	1000031e 	bne	r2,zero,55bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    55b0:	e0bffd17 	ldw	r2,-12(fp)
    55b4:	e0bfff15 	stw	r2,-4(fp)
    55b8:	00000806 	br	55dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    55bc:	e0bffd17 	ldw	r2,-12(fp)
    55c0:	10800017 	ldw	r2,0(r2)
    55c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    55c8:	00c00034 	movhi	r3,0
    55cc:	18ddee04 	addi	r3,r3,30648
    55d0:	e0bffd17 	ldw	r2,-12(fp)
    55d4:	10ffc91e 	bne	r2,r3,54fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    55d8:	e03fff15 	stw	zero,-4(fp)
    55dc:	e0bfff17 	ldw	r2,-4(fp)
}
    55e0:	e037883a 	mov	sp,fp
    55e4:	dfc00117 	ldw	ra,4(sp)
    55e8:	df000017 	ldw	fp,0(sp)
    55ec:	dec00204 	addi	sp,sp,8
    55f0:	f800283a 	ret

000055f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    55f4:	defffa04 	addi	sp,sp,-24
    55f8:	dfc00515 	stw	ra,20(sp)
    55fc:	df000415 	stw	fp,16(sp)
    5600:	dc000315 	stw	r16,12(sp)
    5604:	df000304 	addi	fp,sp,12
    5608:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    560c:	00bffa04 	movi	r2,-24
    5610:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5614:	e03ffe15 	stw	zero,-8(fp)
    5618:	00002006 	br	569c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    561c:	e13ffe17 	ldw	r4,-8(fp)
    5620:	04000034 	movhi	r16,0
    5624:	84190f04 	addi	r16,r16,25660
    5628:	01400304 	movi	r5,12
    562c:	00004240 	call	424 <__mulsi3>
    5630:	1405883a 	add	r2,r2,r16
    5634:	10800017 	ldw	r2,0(r2)
    5638:	1004c03a 	cmpne	r2,r2,zero
    563c:	1000141e 	bne	r2,zero,5690 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    5640:	e13ffe17 	ldw	r4,-8(fp)
    5644:	04000034 	movhi	r16,0
    5648:	84190f04 	addi	r16,r16,25660
    564c:	01400304 	movi	r5,12
    5650:	00004240 	call	424 <__mulsi3>
    5654:	1407883a 	add	r3,r2,r16
    5658:	e0bfff17 	ldw	r2,-4(fp)
    565c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    5660:	00800034 	movhi	r2,0
    5664:	109df204 	addi	r2,r2,30664
    5668:	10c00017 	ldw	r3,0(r2)
    566c:	e0bffe17 	ldw	r2,-8(fp)
    5670:	1880040e 	bge	r3,r2,5684 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    5674:	00c00034 	movhi	r3,0
    5678:	18ddf204 	addi	r3,r3,30664
    567c:	e0bffe17 	ldw	r2,-8(fp)
    5680:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    5684:	e0bffe17 	ldw	r2,-8(fp)
    5688:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    568c:	00000606 	br	56a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5690:	e0bffe17 	ldw	r2,-8(fp)
    5694:	10800044 	addi	r2,r2,1
    5698:	e0bffe15 	stw	r2,-8(fp)
    569c:	e0bffe17 	ldw	r2,-8(fp)
    56a0:	10800810 	cmplti	r2,r2,32
    56a4:	103fdd1e 	bne	r2,zero,561c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    56a8:	e0bffd17 	ldw	r2,-12(fp)
}
    56ac:	e037883a 	mov	sp,fp
    56b0:	dfc00217 	ldw	ra,8(sp)
    56b4:	df000117 	ldw	fp,4(sp)
    56b8:	dc000017 	ldw	r16,0(sp)
    56bc:	dec00304 	addi	sp,sp,12
    56c0:	f800283a 	ret

000056c4 <atexit>:
    56c4:	200b883a 	mov	r5,r4
    56c8:	000d883a 	mov	r6,zero
    56cc:	0009883a 	mov	r4,zero
    56d0:	000f883a 	mov	r7,zero
    56d4:	00057841 	jmpi	5784 <__register_exitproc>

000056d8 <exit>:
    56d8:	defffe04 	addi	sp,sp,-8
    56dc:	000b883a 	mov	r5,zero
    56e0:	dc000015 	stw	r16,0(sp)
    56e4:	dfc00115 	stw	ra,4(sp)
    56e8:	2021883a 	mov	r16,r4
    56ec:	00058bc0 	call	58bc <__call_exitprocs>
    56f0:	00800034 	movhi	r2,0
    56f4:	109deb04 	addi	r2,r2,30636
    56f8:	11000017 	ldw	r4,0(r2)
    56fc:	20800f17 	ldw	r2,60(r4)
    5700:	10000126 	beq	r2,zero,5708 <exit+0x30>
    5704:	103ee83a 	callr	r2
    5708:	8009883a 	mov	r4,r16
    570c:	0005aac0 	call	5aac <_exit>

00005710 <memcmp>:
    5710:	00c000c4 	movi	r3,3
    5714:	1980032e 	bgeu	r3,r6,5724 <memcmp+0x14>
    5718:	2144b03a 	or	r2,r4,r5
    571c:	10c4703a 	and	r2,r2,r3
    5720:	10000f26 	beq	r2,zero,5760 <memcmp+0x50>
    5724:	31ffffc4 	addi	r7,r6,-1
    5728:	3000061e 	bne	r6,zero,5744 <memcmp+0x34>
    572c:	00000a06 	br	5758 <memcmp+0x48>
    5730:	39ffffc4 	addi	r7,r7,-1
    5734:	00bfffc4 	movi	r2,-1
    5738:	21000044 	addi	r4,r4,1
    573c:	29400044 	addi	r5,r5,1
    5740:	38800526 	beq	r7,r2,5758 <memcmp+0x48>
    5744:	20c00003 	ldbu	r3,0(r4)
    5748:	28800003 	ldbu	r2,0(r5)
    574c:	18bff826 	beq	r3,r2,5730 <memcmp+0x20>
    5750:	1885c83a 	sub	r2,r3,r2
    5754:	f800283a 	ret
    5758:	0005883a 	mov	r2,zero
    575c:	f800283a 	ret
    5760:	180f883a 	mov	r7,r3
    5764:	20c00017 	ldw	r3,0(r4)
    5768:	28800017 	ldw	r2,0(r5)
    576c:	18bfed1e 	bne	r3,r2,5724 <memcmp+0x14>
    5770:	31bfff04 	addi	r6,r6,-4
    5774:	21000104 	addi	r4,r4,4
    5778:	29400104 	addi	r5,r5,4
    577c:	39bff936 	bltu	r7,r6,5764 <memcmp+0x54>
    5780:	003fe806 	br	5724 <memcmp+0x14>

00005784 <__register_exitproc>:
    5784:	defffa04 	addi	sp,sp,-24
    5788:	00800034 	movhi	r2,0
    578c:	109deb04 	addi	r2,r2,30636
    5790:	dc000015 	stw	r16,0(sp)
    5794:	14000017 	ldw	r16,0(r2)
    5798:	dd000415 	stw	r20,16(sp)
    579c:	2829883a 	mov	r20,r5
    57a0:	81405217 	ldw	r5,328(r16)
    57a4:	dcc00315 	stw	r19,12(sp)
    57a8:	dc800215 	stw	r18,8(sp)
    57ac:	dc400115 	stw	r17,4(sp)
    57b0:	dfc00515 	stw	ra,20(sp)
    57b4:	2023883a 	mov	r17,r4
    57b8:	3027883a 	mov	r19,r6
    57bc:	3825883a 	mov	r18,r7
    57c0:	28002526 	beq	r5,zero,5858 <__register_exitproc+0xd4>
    57c4:	29000117 	ldw	r4,4(r5)
    57c8:	008007c4 	movi	r2,31
    57cc:	11002716 	blt	r2,r4,586c <__register_exitproc+0xe8>
    57d0:	8800101e 	bne	r17,zero,5814 <__register_exitproc+0x90>
    57d4:	2105883a 	add	r2,r4,r4
    57d8:	1085883a 	add	r2,r2,r2
    57dc:	20c00044 	addi	r3,r4,1
    57e0:	1145883a 	add	r2,r2,r5
    57e4:	0009883a 	mov	r4,zero
    57e8:	15000215 	stw	r20,8(r2)
    57ec:	28c00115 	stw	r3,4(r5)
    57f0:	2005883a 	mov	r2,r4
    57f4:	dfc00517 	ldw	ra,20(sp)
    57f8:	dd000417 	ldw	r20,16(sp)
    57fc:	dcc00317 	ldw	r19,12(sp)
    5800:	dc800217 	ldw	r18,8(sp)
    5804:	dc400117 	ldw	r17,4(sp)
    5808:	dc000017 	ldw	r16,0(sp)
    580c:	dec00604 	addi	sp,sp,24
    5810:	f800283a 	ret
    5814:	29802204 	addi	r6,r5,136
    5818:	00800044 	movi	r2,1
    581c:	110e983a 	sll	r7,r2,r4
    5820:	30c04017 	ldw	r3,256(r6)
    5824:	2105883a 	add	r2,r4,r4
    5828:	1085883a 	add	r2,r2,r2
    582c:	1185883a 	add	r2,r2,r6
    5830:	19c6b03a 	or	r3,r3,r7
    5834:	14802015 	stw	r18,128(r2)
    5838:	14c00015 	stw	r19,0(r2)
    583c:	00800084 	movi	r2,2
    5840:	30c04015 	stw	r3,256(r6)
    5844:	88bfe31e 	bne	r17,r2,57d4 <__register_exitproc+0x50>
    5848:	30804117 	ldw	r2,260(r6)
    584c:	11c4b03a 	or	r2,r2,r7
    5850:	30804115 	stw	r2,260(r6)
    5854:	003fdf06 	br	57d4 <__register_exitproc+0x50>
    5858:	00800074 	movhi	r2,1
    585c:	10a54704 	addi	r2,r2,-27364
    5860:	100b883a 	mov	r5,r2
    5864:	80805215 	stw	r2,328(r16)
    5868:	003fd606 	br	57c4 <__register_exitproc+0x40>
    586c:	00800034 	movhi	r2,0
    5870:	10800004 	addi	r2,r2,0
    5874:	1000021e 	bne	r2,zero,5880 <__register_exitproc+0xfc>
    5878:	013fffc4 	movi	r4,-1
    587c:	003fdc06 	br	57f0 <__register_exitproc+0x6c>
    5880:	01006404 	movi	r4,400
    5884:	103ee83a 	callr	r2
    5888:	1007883a 	mov	r3,r2
    588c:	103ffa26 	beq	r2,zero,5878 <__register_exitproc+0xf4>
    5890:	80805217 	ldw	r2,328(r16)
    5894:	180b883a 	mov	r5,r3
    5898:	18000115 	stw	zero,4(r3)
    589c:	18800015 	stw	r2,0(r3)
    58a0:	80c05215 	stw	r3,328(r16)
    58a4:	18006215 	stw	zero,392(r3)
    58a8:	18006315 	stw	zero,396(r3)
    58ac:	0009883a 	mov	r4,zero
    58b0:	883fc826 	beq	r17,zero,57d4 <__register_exitproc+0x50>
    58b4:	003fd706 	br	5814 <__register_exitproc+0x90>

000058b8 <register_fini>:
    58b8:	f800283a 	ret

000058bc <__call_exitprocs>:
    58bc:	00800034 	movhi	r2,0
    58c0:	109deb04 	addi	r2,r2,30636
    58c4:	10800017 	ldw	r2,0(r2)
    58c8:	defff304 	addi	sp,sp,-52
    58cc:	df000b15 	stw	fp,44(sp)
    58d0:	d8800115 	stw	r2,4(sp)
    58d4:	00800034 	movhi	r2,0
    58d8:	10800004 	addi	r2,r2,0
    58dc:	1005003a 	cmpeq	r2,r2,zero
    58e0:	d8800215 	stw	r2,8(sp)
    58e4:	d8800117 	ldw	r2,4(sp)
    58e8:	dd400815 	stw	r21,32(sp)
    58ec:	dd000715 	stw	r20,28(sp)
    58f0:	10805204 	addi	r2,r2,328
    58f4:	dfc00c15 	stw	ra,48(sp)
    58f8:	ddc00a15 	stw	r23,40(sp)
    58fc:	dd800915 	stw	r22,36(sp)
    5900:	dcc00615 	stw	r19,24(sp)
    5904:	dc800515 	stw	r18,20(sp)
    5908:	dc400415 	stw	r17,16(sp)
    590c:	dc000315 	stw	r16,12(sp)
    5910:	282b883a 	mov	r21,r5
    5914:	2039883a 	mov	fp,r4
    5918:	d8800015 	stw	r2,0(sp)
    591c:	2829003a 	cmpeq	r20,r5,zero
    5920:	d8800117 	ldw	r2,4(sp)
    5924:	14405217 	ldw	r17,328(r2)
    5928:	88001026 	beq	r17,zero,596c <__call_exitprocs+0xb0>
    592c:	ddc00017 	ldw	r23,0(sp)
    5930:	88800117 	ldw	r2,4(r17)
    5934:	8c802204 	addi	r18,r17,136
    5938:	143fffc4 	addi	r16,r2,-1
    593c:	80000916 	blt	r16,zero,5964 <__call_exitprocs+0xa8>
    5940:	05bfffc4 	movi	r22,-1
    5944:	a000151e 	bne	r20,zero,599c <__call_exitprocs+0xe0>
    5948:	8409883a 	add	r4,r16,r16
    594c:	2105883a 	add	r2,r4,r4
    5950:	1485883a 	add	r2,r2,r18
    5954:	10c02017 	ldw	r3,128(r2)
    5958:	a8c01126 	beq	r21,r3,59a0 <__call_exitprocs+0xe4>
    595c:	843fffc4 	addi	r16,r16,-1
    5960:	85bff81e 	bne	r16,r22,5944 <__call_exitprocs+0x88>
    5964:	d8800217 	ldw	r2,8(sp)
    5968:	10003126 	beq	r2,zero,5a30 <__call_exitprocs+0x174>
    596c:	dfc00c17 	ldw	ra,48(sp)
    5970:	df000b17 	ldw	fp,44(sp)
    5974:	ddc00a17 	ldw	r23,40(sp)
    5978:	dd800917 	ldw	r22,36(sp)
    597c:	dd400817 	ldw	r21,32(sp)
    5980:	dd000717 	ldw	r20,28(sp)
    5984:	dcc00617 	ldw	r19,24(sp)
    5988:	dc800517 	ldw	r18,20(sp)
    598c:	dc400417 	ldw	r17,16(sp)
    5990:	dc000317 	ldw	r16,12(sp)
    5994:	dec00d04 	addi	sp,sp,52
    5998:	f800283a 	ret
    599c:	8409883a 	add	r4,r16,r16
    59a0:	88c00117 	ldw	r3,4(r17)
    59a4:	2105883a 	add	r2,r4,r4
    59a8:	1445883a 	add	r2,r2,r17
    59ac:	18ffffc4 	addi	r3,r3,-1
    59b0:	11800217 	ldw	r6,8(r2)
    59b4:	1c001526 	beq	r3,r16,5a0c <__call_exitprocs+0x150>
    59b8:	10000215 	stw	zero,8(r2)
    59bc:	303fe726 	beq	r6,zero,595c <__call_exitprocs+0xa0>
    59c0:	00c00044 	movi	r3,1
    59c4:	1c06983a 	sll	r3,r3,r16
    59c8:	90804017 	ldw	r2,256(r18)
    59cc:	8cc00117 	ldw	r19,4(r17)
    59d0:	1884703a 	and	r2,r3,r2
    59d4:	10001426 	beq	r2,zero,5a28 <__call_exitprocs+0x16c>
    59d8:	90804117 	ldw	r2,260(r18)
    59dc:	1884703a 	and	r2,r3,r2
    59e0:	10000c1e 	bne	r2,zero,5a14 <__call_exitprocs+0x158>
    59e4:	2105883a 	add	r2,r4,r4
    59e8:	1485883a 	add	r2,r2,r18
    59ec:	11400017 	ldw	r5,0(r2)
    59f0:	e009883a 	mov	r4,fp
    59f4:	303ee83a 	callr	r6
    59f8:	88800117 	ldw	r2,4(r17)
    59fc:	98bfc81e 	bne	r19,r2,5920 <__call_exitprocs+0x64>
    5a00:	b8800017 	ldw	r2,0(r23)
    5a04:	147fd526 	beq	r2,r17,595c <__call_exitprocs+0xa0>
    5a08:	003fc506 	br	5920 <__call_exitprocs+0x64>
    5a0c:	8c000115 	stw	r16,4(r17)
    5a10:	003fea06 	br	59bc <__call_exitprocs+0x100>
    5a14:	2105883a 	add	r2,r4,r4
    5a18:	1485883a 	add	r2,r2,r18
    5a1c:	11000017 	ldw	r4,0(r2)
    5a20:	303ee83a 	callr	r6
    5a24:	003ff406 	br	59f8 <__call_exitprocs+0x13c>
    5a28:	303ee83a 	callr	r6
    5a2c:	003ff206 	br	59f8 <__call_exitprocs+0x13c>
    5a30:	88800117 	ldw	r2,4(r17)
    5a34:	1000081e 	bne	r2,zero,5a58 <__call_exitprocs+0x19c>
    5a38:	89000017 	ldw	r4,0(r17)
    5a3c:	20000726 	beq	r4,zero,5a5c <__call_exitprocs+0x1a0>
    5a40:	b9000015 	stw	r4,0(r23)
    5a44:	8809883a 	mov	r4,r17
    5a48:	00000000 	call	0 <__reset>
    5a4c:	bc400017 	ldw	r17,0(r23)
    5a50:	883fb71e 	bne	r17,zero,5930 <__call_exitprocs+0x74>
    5a54:	003fc506 	br	596c <__call_exitprocs+0xb0>
    5a58:	89000017 	ldw	r4,0(r17)
    5a5c:	882f883a 	mov	r23,r17
    5a60:	2023883a 	mov	r17,r4
    5a64:	883fb21e 	bne	r17,zero,5930 <__call_exitprocs+0x74>
    5a68:	003fc006 	br	596c <__call_exitprocs+0xb0>

00005a6c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    5a6c:	defffd04 	addi	sp,sp,-12
    5a70:	df000215 	stw	fp,8(sp)
    5a74:	df000204 	addi	fp,sp,8
    5a78:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    5a7c:	e0bfff17 	ldw	r2,-4(fp)
    5a80:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5a84:	e0bffe17 	ldw	r2,-8(fp)
    5a88:	1005003a 	cmpeq	r2,r2,zero
    5a8c:	1000021e 	bne	r2,zero,5a98 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    5a90:	002af070 	cmpltui	zero,zero,43969
    5a94:	00000106 	br	5a9c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    5a98:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    5a9c:	e037883a 	mov	sp,fp
    5aa0:	df000017 	ldw	fp,0(sp)
    5aa4:	dec00104 	addi	sp,sp,4
    5aa8:	f800283a 	ret

00005aac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5aac:	defffd04 	addi	sp,sp,-12
    5ab0:	dfc00215 	stw	ra,8(sp)
    5ab4:	df000115 	stw	fp,4(sp)
    5ab8:	df000104 	addi	fp,sp,4
    5abc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    5ac0:	e13fff17 	ldw	r4,-4(fp)
    5ac4:	0005a6c0 	call	5a6c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5ac8:	003fff06 	br	5ac8 <_exit+0x1c>
    5acc:	000058b8 	rdprs	zero,zero,354
