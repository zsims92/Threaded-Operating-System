/*
* my_sem.c
*
*  Created on: Dec 9, 2013
*      Author: zsims
*/
#include "my_sem.h"
#include "thread_handler.h"
#include "queue.h"
#include <stdio.h>
#include <malloc.h>


sem* mysem_create(int size, char ID){
	sem* newSem = malloc(sizeof(sem) * 1);
	newSem->count = size;
	newSem->waiters = 0;
	newSem->ID = ID;
	return newSem;
}

void mysem_signal(sem* pSem){
	DISABLE_INTERRUPTS();
	pSem->count++;

	int i=0;
	if(pSem->count <= 0){
		for(i=0; i < pSem->waiters; i++){
			tcb* thread = pSem->waitQueue[0];
			thread->state = READY;
			printf("\t\t\t\t\t\tThread #%u Released\n", thread->tid);
			enqueue(thread);
		}
		pSem->waiters = 0;
	}

	printf("\t\t\t\t\t\t\t\t\tSignaled Sem %c count increased to %d\n", pSem->ID, pSem->count);
	ENABLE_INTERRUPTS();
}

void mysem_wait(sem* pSem){
	DISABLE_INTERRUPTS();


	if(pSem->count <= 0){
		current_running_thread->state = BLOCKED;
		pSem->waitQueue[pSem->waiters] = current_running_thread;
		pSem->waiters++;
		printf("\t\t\t\t\t\tThread #%u blocked\n", current_running_thread->tid);
		ENABLE_INTERRUPTS();
		while(current_running_thread->state == BLOCKED);
	}
	else{
		pSem->count--;
		ENABLE_INTERRUPTS();
		printf("\t\t\t\t\t\t\t\t\tWaited Sem %c count reduced to %d\n", pSem->ID, pSem->count);
	}
}

void mysem_delete(sem* pSem){
	free(pSem->waitQueue);
	free(pSem);
}

int mysem_count(sem* pSem){
	return pSem->count;
}
